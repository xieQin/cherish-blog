{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hacker/source/images/icon-bubble.svg","path":"images/icon-bubble.svg","modified":0,"renderable":1},{"_id":"themes/hacker/source/images/icon-categories.svg","path":"images/icon-categories.svg","modified":0,"renderable":1},{"_id":"themes/hacker/source/images/icon-tags.svg","path":"images/icon-tags.svg","modified":0,"renderable":1},{"_id":"themes/hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CommonJs、AMD、UMD.md","hash":"52b6c501db6d3aced5f454f7d1765c945bbc832d","modified":1468982450969},{"_id":"source/_posts/ES2015-总结.md","hash":"5a9d8bbb7a9821fd274b924b85629d5b64e980d2","modified":1468982450973},{"_id":"source/_posts/Eslint使用备查.md","hash":"144cbe3de951890001dfc96bb5cc122e25d066ca","modified":1468982450978},{"_id":"source/_posts/Javascript-继承.md","hash":"e0457d883fcd34de19b947689801fe4d0c7931e2","modified":1468982450981},{"_id":"source/_posts/Javascript事件.md","hash":"5853183465d77e1081370d3818fcb2c4fe42cc3d","modified":1468982450984},{"_id":"source/_posts/Javascript面向对象编程.md","hash":"b612046862a95bdf4ce9ecc6cdcbb2050879ae78","modified":1468982450989},{"_id":"source/_posts/Jquery源码阅读.md","hash":"639b696947cd751136686b19891e67fdb70439f4","modified":1468982450996},{"_id":"source/_posts/Jquery源码阅读-二.md","hash":"647cf6a0db1c43f67ff896a542bfef2cffc16d17","modified":1468982450991},{"_id":"source/_posts/Markdown语法总结.md","hash":"1eab79912e0c2daa5e7afdc6a54adc96df19ef77","modified":1468982450998},{"_id":"source/_posts/Redux学习总结.md","hash":"3265c3ac8b6abda2f9734806f332bbd7f2b07f2f","modified":1468982451007},{"_id":"source/_posts/React-Nactive学习总结.md","hash":"cf7f853371dc20071a7585471b8364159fedb9cf","modified":1468982451001},{"_id":"source/_posts/React学习总结.md","hash":"2c73fb39106d6dc448798b7b0655948eefd54729","modified":1468982451004},{"_id":"source/_posts/Touch手势.md","hash":"10bf3adcdf5dfa270e3a2b87fc8829dd607d21de","modified":1468982451013},{"_id":"source/_posts/Vue与Vuex.md","hash":"92f705541836321f9b8a9ef7d4853fb5d9f6a2f6","modified":1468982451018},{"_id":"source/_posts/CSS绘制三角形.md","hash":"a592f1e2be20fb63fa2c3a0b2f7e6397966173c5","modified":1468982450963},{"_id":"source/_posts/datatables-使用.md","hash":"17d302365b93a6f86fef5acb10d20fe44fba165e","modified":1468982451021},{"_id":"source/_posts/express与koa.md","hash":"e966a35b705e882dbbc3bfe6a2a76760c41b8473","modified":1468982451024},{"_id":"source/_posts/react-router使用指南.md","hash":"3169f1ffee86d88d5cf1ba97cf0c0b9f38725516","modified":1468982451030},{"_id":"source/_posts/使用nodejs搭建web服务器.md","hash":"ef0b88eb99c33abb5867ece6078b364d7c4fca51","modified":1468982451033},{"_id":"source/_posts/防止重复发送ajax的方法.md","hash":"855972c39a4fb87e8a6d152cacd3030bf1d6ee7a","modified":1468982451044},{"_id":"source/_posts/flexbox伸缩盒布局.md","hash":"8f975ce90e2230ba6612313ba66e6e1a3493dd5b","modified":1468982451027},{"_id":"source/_posts/Vue.md","hash":"ecfa5c82389fecbae01de48bfe63f55c790c4bda","modified":1468982451016},{"_id":"source/_posts/客户端检测.md","hash":"b9d4ad017636067c1c790dc84f49481efbc9dc71","modified":1468982451035},{"_id":"source/about/index.md","hash":"4e87ee2efad1b65bab629965b9eb2f67d97f1f8e","modified":1468982451048},{"_id":"source/_posts/点击事件绑定.md","hash":"2b06e9ce7a60902fa02b2b7b164535c6be17305b","modified":1468982451038},{"_id":"source/links/index.md","hash":"fce26f3fbe62dc4e7e654a9dfc6eacbf9c2a81d5","modified":1468982451051},{"_id":"themes/hacker/README.md","hash":"45b082406830583ce731d791434f70e83551cf58","modified":1469009724228},{"_id":"themes/hacker/.gitignore","hash":"803c06a7086b5817c03d2e8672da27bc56ba2bce","modified":1469009724226},{"_id":"source/_posts/Generator函数.md","hash":"ef1d21bceb5de1c5bc1d6b137ce2052a12c399c6","modified":1469010048996},{"_id":"themes/hacker/_config.yml","hash":"635119afa7834ee453cd8887d61d5f495959dbdf","modified":1469009724231},{"_id":"themes/hacker/layout/layout.ejs","hash":"8487eb7c5c2f036da802987bb50bb30f9b6a2b62","modified":1469009724287},{"_id":"themes/hacker/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1469009724283},{"_id":"themes/hacker/layout/index.ejs","hash":"c7cf84c84c26f1adfc249bc9a7605206fa245f73","modified":1469009724285},{"_id":"themes/hacker/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1469009724295},{"_id":"themes/hacker/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1469009724280},{"_id":"themes/hacker/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1469009724290},{"_id":"themes/hacker/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1469009724292},{"_id":"themes/hacker/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1469009724184},{"_id":"themes/hacker/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469009721957},{"_id":"themes/hacker/.git/config","hash":"c27e0f7a5aa8432fcaf6d0fe95d02a52b3883416","modified":1469009724208},{"_id":"themes/hacker/.git/index","hash":"c5354c95f4d049a54a34093ed510dbbba7ae963a","modified":1469009724356},{"_id":"themes/hacker/.git/packed-refs","hash":"bdbfc54c39f5ab4eac50a9f32e6b164194716bbc","modified":1469009724170},{"_id":"themes/hacker/languages/default.yml","hash":"45a293d8ed52429dbaee500c567206761106e1fd","modified":1469009724237},{"_id":"themes/hacker/languages/zh-CN.yml","hash":"92727f45f6f6846688934c405668c2ee66c69be3","modified":1469009724240},{"_id":"themes/hacker/layout/_partial/archive.ejs","hash":"d7dcd858d50c8086bffde0659b88c6db6da42038","modified":1469009724243},{"_id":"themes/hacker/layout/_partial/googleanalytics.ejs","hash":"cc5e3c636e91b48884bc8a6fc46ca89d4d9f7e0b","modified":1469009724255},{"_id":"themes/hacker/layout/_partial/article.ejs","hash":"9312be059f64d9cfb05fd1d9d70d31fd3bddf4a2","modified":1469009724246},{"_id":"themes/hacker/layout/_partial/comment.ejs","hash":"ff1738ac6433fbde1b73c50a385097468e1cc368","modified":1469009724249},{"_id":"themes/hacker/layout/_partial/header.ejs","hash":"b9549c2c7df8329a77e51028aac14b806025d95e","modified":1469009724263},{"_id":"themes/hacker/layout/_partial/head.ejs","hash":"7fbb720e6543796e018cd981e98374b3c366562d","modified":1469009724258},{"_id":"themes/hacker/layout/_partial/pagination.ejs","hash":"2643b0336eddb608fc1307fd8e9fe1a34a93b6d2","modified":1469009724265},{"_id":"themes/hacker/layout/_partial/footer.ejs","hash":"52586f429ddf3bb5eb65ba4afca71668bb96ef5a","modified":1469009724253},{"_id":"themes/hacker/.git/logs/HEAD","hash":"9e556afc866f337924ae9c639a08369c00fa06b5","modified":1469009724195},{"_id":"themes/hacker/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469009721997},{"_id":"themes/hacker/source/css/style.styl","hash":"85c1cff9b55aed2cae6dad45114a7603d7516c83","modified":1469009724338},{"_id":"themes/hacker/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469009721960},{"_id":"themes/hacker/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469009721974},{"_id":"themes/hacker/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469009721964},{"_id":"themes/hacker/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469009721971},{"_id":"themes/hacker/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469009721980},{"_id":"themes/hacker/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469009721989},{"_id":"themes/hacker/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469009721977},{"_id":"themes/hacker/source/images/icon-bubble.svg","hash":"c052a2f96808d72ef53b3f722fe832cdc3b6fc68","modified":1469009724341},{"_id":"themes/hacker/source/images/icon-categories.svg","hash":"d1c483574ba07f5c3e4573ec16c7595c7c32fa5a","modified":1469009724345},{"_id":"themes/hacker/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1469009721984},{"_id":"themes/hacker/source/images/icon-tags.svg","hash":"983e1f59e0efb3614e70acd858c1d3d12638bb15","modified":1469009724353},{"_id":"themes/hacker/source/images/icon-heart.svg","hash":"5fe7b418079dd99223e7ca9c09f84ae810e86af4","modified":1469009724349},{"_id":"themes/hacker/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1469009721992},{"_id":"themes/hacker/layout/_partial/post/category.ejs","hash":"28c6a4b13b7e0fe124120c61f7ca93bbe772c82d","modified":1469009724268},{"_id":"themes/hacker/layout/_partial/post/tag.ejs","hash":"5e296a56f7242742bf7a5910c19210ef9f869ffb","modified":1469009724274},{"_id":"themes/hacker/layout/_partial/post/gallery.ejs","hash":"90f0ec1b8d291d7f37ceb11ef270637aeff7d67e","modified":1469009724271},{"_id":"themes/hacker/layout/_partial/post/title.ejs","hash":"18454e48f2dd61bb951e5840907e3588bf7f380e","modified":1469009724276},{"_id":"themes/hacker/.git/objects/pack/pack-07338801b4628472e21841a0baf2ffc7ce1d89b4.idx","hash":"196741ce0456cb3550c272c30bab6fe0956b1576","modified":1469009724056},{"_id":"themes/hacker/.git/objects/pack/pack-07338801b4628472e21841a0baf2ffc7ce1d89b4.pack","hash":"f0bc23a8655bc79ff589e6eabca1a6950d9c5170","modified":1469009724059},{"_id":"themes/hacker/.git/refs/heads/master","hash":"0ee2024efc09194ae588b938d385d5b3b8234923","modified":1469009724189},{"_id":"themes/hacker/source/css/_base/responsive.css","hash":"538db170a07228ab30f0fa69389be7ab4361c444","modified":1469009724308},{"_id":"themes/hacker/source/css/_base/syntax.styl","hash":"d4195330f2804763792cf89719eed1c566d7ac0f","modified":1469009724311},{"_id":"themes/hacker/source/css/_base/utils.css","hash":"dd84b018e38cb941d0258923ba66c30c148939fd","modified":1469009724315},{"_id":"themes/hacker/source/css/_partial/archive.css","hash":"ff3ada9a1dc7efbbd52c3bd67bf94aa0017d64ab","modified":1469009724318},{"_id":"themes/hacker/source/css/_partial/article.css","hash":"9dc8de90093946911e83cc0258d873b0f9526f8e","modified":1469009724320},{"_id":"themes/hacker/source/css/_partial/footer.css","hash":"3f0146a2a90f47e3c7d4f3f7458cc7d252ba580a","modified":1469009724324},{"_id":"themes/hacker/source/css/_partial/header.css","hash":"e6b6a900b696f9b646b12a121e4c24017424520f","modified":1469009724327},{"_id":"themes/hacker/source/css/_partial/icon.css","hash":"2ef57876e7f395044c883b399375727e219675d0","modified":1469009724331},{"_id":"themes/hacker/source/css/_partial/pagination.css","hash":"60bf5440dd9ce09779be0a162712b8e27b75dc8b","modified":1469009724336},{"_id":"themes/hacker/source/css/_base/normalize.css","hash":"f466245d5ad990c1062481c0e1f8741fb4bfa00e","modified":1469009724304},{"_id":"themes/hacker/source/css/_partial/media.css","hash":"84372429ae44cb59d591e93536538689952a5879","modified":1469009724333},{"_id":"themes/hacker/source/css/_base/layout.css","hash":"1abbcc84819b0e92e6622f0a5ccecccc5cb952eb","modified":1469009724301},{"_id":"themes/hacker/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469009724176},{"_id":"themes/hacker/.git/logs/refs/heads/master","hash":"9e556afc866f337924ae9c639a08369c00fa06b5","modified":1469009724192},{"_id":"themes/hacker/.git/logs/refs/remotes/origin/HEAD","hash":"9e556afc866f337924ae9c639a08369c00fa06b5","modified":1469009724182}],"Category":[{"name":"前端","_id":"ciqubkyp40002ycjciy0hfdlp"},{"name":"编程","_id":"ciqubkypc0008ycjclnouqlx8"},{"name":"JavaScript","_id":"ciqubkyq0000kycjc1gj9o9s5"},{"name":"Markdown","_id":"ciqubkyq9000wycjcfklyf5o1"},{"name":"React","_id":"ciqubkyqi0012ycjcf6n65l72"},{"name":"Javascript","_id":"ciqubkyqz001nycjc347be9qa"},{"name":"插件","_id":"ciqubkyr9001vycjc4p81awto"},{"name":"Nodejs","_id":"ciqubkyre0024ycjcnpe25s0h"}],"Data":[],"Page":[{"title":"关于我","date":"2016-05-23T07:40:05.000Z","_content":"\n## 关于我\n- 前端工程师\n- NodeJs 开发\n- PHP 开发\n- 关注 React Native、Vue.js\n- <xieqin1991@gmail.com>","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-05-23 15:40:05\n---\n\n## 关于我\n- 前端工程师\n- NodeJs 开发\n- PHP 开发\n- 关注 React Native、Vue.js\n- <xieqin1991@gmail.com>","updated":"2016-07-20T02:40:51.048Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciqubkypn000eycjcu23y0hr6","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li>前端工程师</li>\n<li>NodeJs 开发</li>\n<li>PHP 开发</li>\n<li>关注 React Native、Vue.js</li>\n<li><a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#120;&#105;&#x65;&#x71;&#x69;&#110;&#x31;&#57;&#57;&#x31;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#120;&#105;&#x65;&#x71;&#x69;&#110;&#x31;&#57;&#57;&#x31;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li>前端工程师</li>\n<li>NodeJs 开发</li>\n<li>PHP 开发</li>\n<li>关注 React Native、Vue.js</li>\n<li><a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#120;&#105;&#x65;&#x71;&#x69;&#110;&#x31;&#57;&#57;&#x31;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#120;&#105;&#x65;&#x71;&#x69;&#110;&#x31;&#57;&#57;&#x31;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></li>\n</ul>\n"},{"title":"链接","date":"2016-05-23T08:39:50.000Z","_content":"\n## 链接\n- 我的[github](https://github.com/xieQin)\n- 我的[weibo](http://weibo.com/1843097101)\n- [一些小玩意](http://2.xieqin.sinaapp.com/)","source":"links/index.md","raw":"---\ntitle: 链接\ndate: 2016-05-23 16:39:50\n---\n\n## 链接\n- 我的[github](https://github.com/xieQin)\n- 我的[weibo](http://weibo.com/1843097101)\n- [一些小玩意](http://2.xieqin.sinaapp.com/)","updated":"2016-07-20T02:40:51.051Z","path":"links/index.html","comments":1,"layout":"page","_id":"ciqubkyps000gycjcqsvzr5pu","content":"<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>我的<a href=\"https://github.com/xieQin\" target=\"_blank\" rel=\"external\">github</a></li>\n<li>我的<a href=\"http://weibo.com/1843097101\" target=\"_blank\" rel=\"external\">weibo</a></li>\n<li><a href=\"http://2.xieqin.sinaapp.com/\" target=\"_blank\" rel=\"external\">一些小玩意</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>我的<a href=\"https://github.com/xieQin\">github</a></li>\n<li>我的<a href=\"http://weibo.com/1843097101\">weibo</a></li>\n<li><a href=\"http://2.xieqin.sinaapp.com/\">一些小玩意</a></li>\n</ul>\n"}],"Post":[{"title":"CommonJs、AMD、UMD","date":"2015-11-30T09:56:11.000Z","_content":"js的模块化方案真是层出不穷，专门记录一下各个方案之间的差别\n\n[参考文章](http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/)\n\n### 一、AMD\n异步模块定义，专门为浏览器中js环境设计的规范\nrequirejs的模块化方案，在用requirejs做项目的时候接触到的\n\n基本api:\n\n```js\ndefine(id?, dependencies?, factory);\n```\n\n定义无依赖的模块：\n\n```js\ndefine(function() {\n  return {\n    mix: function(source, target) {\n    }\n  };\n});\n````\n\n定义有依赖的模块：\n\n```js\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n\n定义数据对象模块:\n\n```js\ndefine({\n    users: [],\n    members: []\n});\n```\n\n### 二、Commonjs\n一个单独的文件就是一个模块\n每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），都是私有的\n\nCommonJS定义的模块分为:\n  - 模块引用(require)\n  - 模块定义(exports)\n  - 模块标识(module)\n\n```js\n// foo.js\nvar request = require('request').default({ \n    timeout: 4000\n});\n\nmodule.exports = function(){ \n    this.re = '';\n    this.req = function(url){ \n        request(url,function(error,status,res){ \n            this.re = res;\n        });\n    }\n};\n```\n\n```js\n// main.js\n\nvar Foo = require('./foo');\nvar foo = new Foo();\nfoo.req('http://www.baidu.com');\nconsole.log(foo.re);\n```\n\nCommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作\n\n### 三、UMD\n\nUMD是AMD和CommonJS的糅合\n\nUMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。\n再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块\n","source":"_posts/CommonJs、AMD、UMD.md","raw":"---\ntitle: CommonJs、AMD、UMD\ndate: 2015-11-30 17:56:11\ntags: Javascript\ncategories: 前端\n---\njs的模块化方案真是层出不穷，专门记录一下各个方案之间的差别\n\n[参考文章](http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/)\n\n### 一、AMD\n异步模块定义，专门为浏览器中js环境设计的规范\nrequirejs的模块化方案，在用requirejs做项目的时候接触到的\n\n基本api:\n\n```js\ndefine(id?, dependencies?, factory);\n```\n\n定义无依赖的模块：\n\n```js\ndefine(function() {\n  return {\n    mix: function(source, target) {\n    }\n  };\n});\n````\n\n定义有依赖的模块：\n\n```js\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n\n定义数据对象模块:\n\n```js\ndefine({\n    users: [],\n    members: []\n});\n```\n\n### 二、Commonjs\n一个单独的文件就是一个模块\n每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），都是私有的\n\nCommonJS定义的模块分为:\n  - 模块引用(require)\n  - 模块定义(exports)\n  - 模块标识(module)\n\n```js\n// foo.js\nvar request = require('request').default({ \n    timeout: 4000\n});\n\nmodule.exports = function(){ \n    this.re = '';\n    this.req = function(url){ \n        request(url,function(error,status,res){ \n            this.re = res;\n        });\n    }\n};\n```\n\n```js\n// main.js\n\nvar Foo = require('./foo');\nvar foo = new Foo();\nfoo.req('http://www.baidu.com');\nconsole.log(foo.re);\n```\n\nCommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作\n\n### 三、UMD\n\nUMD是AMD和CommonJS的糅合\n\nUMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。\n再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块\n","slug":"CommonJs、AMD、UMD","published":1,"updated":"2016-07-20T02:40:50.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyov0000ycjc0u2uewo5","content":"<p>js的模块化方案真是层出不穷，专门记录一下各个方案之间的差别</p>\n<p><a href=\"http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n<h3 id=\"一、AMD\"><a href=\"#一、AMD\" class=\"headerlink\" title=\"一、AMD\"></a>一、AMD</h3><p>异步模块定义，专门为浏览器中js环境设计的规范<br>requirejs的模块化方案，在用requirejs做项目的时候接触到的</p>\n<p>基本api:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>定义无依赖的模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    mix: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n<p>定义有依赖的模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'base'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">base</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// todo with module base</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">define([<span class=\"string\">'data'</span>, <span class=\"string\">'ui'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, ui</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// init here</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>定义数据对象模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"二、Commonjs\"><a href=\"#二、Commonjs\" class=\"headerlink\" title=\"二、Commonjs\"></a>二、Commonjs</h3><p>一个单独的文件就是一个模块<br>每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），都是私有的</p>\n<p>CommonJS定义的模块分为:</p>\n<ul>\n<li>模块引用(require)</li>\n<li>模块定义(exports)</li>\n<li>模块标识(module)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// foo.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>).default(&#123; </div><div class=\"line\">    timeout: <span class=\"number\">4000</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.re = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.req = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123; </div><div class=\"line\">        request(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,status,res</span>)</span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>.re = res;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.req(<span class=\"string\">'http://www.baidu.com'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.re);</div></pre></td></tr></table></figure>\n<p>CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作</p>\n<h3 id=\"三、UMD\"><a href=\"#三、UMD\" class=\"headerlink\" title=\"三、UMD\"></a>三、UMD</h3><p>UMD是AMD和CommonJS的糅合</p>\n<p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。<br>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块</p>\n","excerpt":"","more":"<p>js的模块化方案真是层出不穷，专门记录一下各个方案之间的差别</p>\n<p><a href=\"http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/\">参考文章</a></p>\n<h3 id=\"一、AMD\"><a href=\"#一、AMD\" class=\"headerlink\" title=\"一、AMD\"></a>一、AMD</h3><p>异步模块定义，专门为浏览器中js环境设计的规范<br>requirejs的模块化方案，在用requirejs做项目的时候接触到的</p>\n<p>基本api:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>定义无依赖的模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    mix: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n<p>定义有依赖的模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'base'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">base</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// todo with module base</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">define([<span class=\"string\">'data'</span>, <span class=\"string\">'ui'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, ui</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// init here</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>定义数据对象模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"二、Commonjs\"><a href=\"#二、Commonjs\" class=\"headerlink\" title=\"二、Commonjs\"></a>二、Commonjs</h3><p>一个单独的文件就是一个模块<br>每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），都是私有的</p>\n<p>CommonJS定义的模块分为:</p>\n<ul>\n<li>模块引用(require)</li>\n<li>模块定义(exports)</li>\n<li>模块标识(module)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// foo.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>).default(&#123; </div><div class=\"line\">    timeout: <span class=\"number\">4000</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.re = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.req = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123; </div><div class=\"line\">        request(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,status,res</span>)</span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>.re = res;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.req(<span class=\"string\">'http://www.baidu.com'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.re);</div></pre></td></tr></table></figure>\n<p>CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作</p>\n<h3 id=\"三、UMD\"><a href=\"#三、UMD\" class=\"headerlink\" title=\"三、UMD\"></a>三、UMD</h3><p>UMD是AMD和CommonJS的糅合</p>\n<p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。<br>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块</p>\n"},{"title":"ES2015 总结","date":"2016-02-12T10:34:05.000Z","_content":"关于ES2015，我最大的感受便是，当你一开始使用它，就再也不想离开了:)\n\n学习资源：\n- [ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n#### 1. 常用的es2015特性\nlet\nconst\nclass\narrow function\ntemplate string\ndestructuring\ndefault\nreset arguments\nimport export\n\n#### 2. 语法和特性\n\n###### 2.1 let const 块级作用域\n\n###### 2.2 箭头函数\n\n```js\nfoo => foo + ' world'\n\n(foo, bar) => foo + bar\n\nfoo => {\n  return foo + ' world'\n}\n\n(foo, bar) => {\n  return foo + bar\n}\n```\n箭头函数对上下文的绑定是强制性的，无法通过apply或call方法改变其上下文\n\n###### 2.3 模板字符串\n- 支持变量注入\n```js\nlet greet = `Hi, I'm ${name}, I am the ${title} at ${company}`\n```\n\n- 支持换行\n\n###### 2.4 对象字面量扩展语法\n\n```js\nlet obj = {\n  // before\n  foo: function() {\n    return 'foo'\n  },\n\n  // after\n  bar() {\n    return 'bar'\n  }\n}\n```\n\n###### 2.5 表达式解构\n\n```js\nfunction search(query) {\n  // ...\n  // let users = [ ... ]\n  // let posts = [ ... ]\n  // ...\n\n  return {\n    users: users,\n    posts: posts\n  }\n}\n```\n\n###### 2.6 函数参数表达、传参\n\n```js\nfunction fetchSomethings(...args) {\n  // ...\n}\nfunction doSomeOthers(name, ...args) {\n  // ...\n}\n```\n\n###### 2.7 新的数据结构\n\n- Set WeakSet\n- Map WeakMap\n\n###### 2.8 类\n\n```js\nclass Person {\n  constructor(name, gender, age) {\n    this.name = name\n    this.gender = gender\n    this.age = age\n  }\n\n  isAdult() {\n    return this.age >= 18\n  }\n}\n\nlet me = new Person('iwillwen', 'man', 19)\nconsole.log(me.isAdult()) //=> true\n```\n\n###### 2.9 生成器\n\n```js\nfunction* fibo() {\n  let a = 1\n  let b = 1\n\n  yield a\n  yield b\n\n  while (true) {\n    let next = a + b\n    a = b\n    b = next\n    yield next\n  }\n}\n\nlet generator = fibo()\n\nfor (var i = 0; i < 10; i++)\n  console.log(generator.next().value) //=> 1 1 2 3 5 8 13 21 34 55\n```\n生成器(Generator) 的运行原理\n![](http://static.open-open.com/lib/uploadImg/20151111/20151111142042_17.jpg)\n\n###### 2.10 模块化\n\n```js\nimport name from 'module-name'\nimport * as name from 'module-name'\n```\n\n```js\n// module.js\nexport function method() { /* ... */ }\n\n// main.js\nimport M from './module'\nM.method()\n```\n\n```js\n// module.js\nexport default {\n  method1,\n  method2\n}\n\n// main.js\nimport M from './module'\nM.method1()\n```\n\n###### 2.11 Promise\n\n```js\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    // ...\n  })\n}\n```\n\n###### 2.12 Symbol\nSymbol 对象具有唯一性\n\n```js\nlet privateDataStore = {\n  set(val) {\n    let key = Symbol(Math.random().toString(32).substr(2))\n    this[key] = val\n\n    return key\n  },\n\n  get(key) {\n    return this[key]\n  }\n}\n\nlet key = privateDateStore('hello world')\nprivateDataStore[key] //=> undefined\nprivateDataStore.get(key) //=> hello world\n```\n\n###### 2.13 Proxy\n\n```js\nlet apiProxy = new Proxy(api, {\n  get(receiver, name) {\n    return (function(...args) {\n      min.sadd(`log:${name}`, args)\n      return receiver[name].apply(receiver, args)\n    }).bind(receiver)\n  }\n})\n\napi.getComments(artical.id)\n  .then(comments => {\n    // ...\n  })\n```","source":"_posts/ES2015-总结.md","raw":"---\ntitle: ES2015 总结\ndate: 2016-02-12 18:34:05\ntags: Javascript\ncategories: 编程\n---\n关于ES2015，我最大的感受便是，当你一开始使用它，就再也不想离开了:)\n\n学习资源：\n- [ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n#### 1. 常用的es2015特性\nlet\nconst\nclass\narrow function\ntemplate string\ndestructuring\ndefault\nreset arguments\nimport export\n\n#### 2. 语法和特性\n\n###### 2.1 let const 块级作用域\n\n###### 2.2 箭头函数\n\n```js\nfoo => foo + ' world'\n\n(foo, bar) => foo + bar\n\nfoo => {\n  return foo + ' world'\n}\n\n(foo, bar) => {\n  return foo + bar\n}\n```\n箭头函数对上下文的绑定是强制性的，无法通过apply或call方法改变其上下文\n\n###### 2.3 模板字符串\n- 支持变量注入\n```js\nlet greet = `Hi, I'm ${name}, I am the ${title} at ${company}`\n```\n\n- 支持换行\n\n###### 2.4 对象字面量扩展语法\n\n```js\nlet obj = {\n  // before\n  foo: function() {\n    return 'foo'\n  },\n\n  // after\n  bar() {\n    return 'bar'\n  }\n}\n```\n\n###### 2.5 表达式解构\n\n```js\nfunction search(query) {\n  // ...\n  // let users = [ ... ]\n  // let posts = [ ... ]\n  // ...\n\n  return {\n    users: users,\n    posts: posts\n  }\n}\n```\n\n###### 2.6 函数参数表达、传参\n\n```js\nfunction fetchSomethings(...args) {\n  // ...\n}\nfunction doSomeOthers(name, ...args) {\n  // ...\n}\n```\n\n###### 2.7 新的数据结构\n\n- Set WeakSet\n- Map WeakMap\n\n###### 2.8 类\n\n```js\nclass Person {\n  constructor(name, gender, age) {\n    this.name = name\n    this.gender = gender\n    this.age = age\n  }\n\n  isAdult() {\n    return this.age >= 18\n  }\n}\n\nlet me = new Person('iwillwen', 'man', 19)\nconsole.log(me.isAdult()) //=> true\n```\n\n###### 2.9 生成器\n\n```js\nfunction* fibo() {\n  let a = 1\n  let b = 1\n\n  yield a\n  yield b\n\n  while (true) {\n    let next = a + b\n    a = b\n    b = next\n    yield next\n  }\n}\n\nlet generator = fibo()\n\nfor (var i = 0; i < 10; i++)\n  console.log(generator.next().value) //=> 1 1 2 3 5 8 13 21 34 55\n```\n生成器(Generator) 的运行原理\n![](http://static.open-open.com/lib/uploadImg/20151111/20151111142042_17.jpg)\n\n###### 2.10 模块化\n\n```js\nimport name from 'module-name'\nimport * as name from 'module-name'\n```\n\n```js\n// module.js\nexport function method() { /* ... */ }\n\n// main.js\nimport M from './module'\nM.method()\n```\n\n```js\n// module.js\nexport default {\n  method1,\n  method2\n}\n\n// main.js\nimport M from './module'\nM.method1()\n```\n\n###### 2.11 Promise\n\n```js\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    // ...\n  })\n}\n```\n\n###### 2.12 Symbol\nSymbol 对象具有唯一性\n\n```js\nlet privateDataStore = {\n  set(val) {\n    let key = Symbol(Math.random().toString(32).substr(2))\n    this[key] = val\n\n    return key\n  },\n\n  get(key) {\n    return this[key]\n  }\n}\n\nlet key = privateDateStore('hello world')\nprivateDataStore[key] //=> undefined\nprivateDataStore.get(key) //=> hello world\n```\n\n###### 2.13 Proxy\n\n```js\nlet apiProxy = new Proxy(api, {\n  get(receiver, name) {\n    return (function(...args) {\n      min.sadd(`log:${name}`, args)\n      return receiver[name].apply(receiver, args)\n    }).bind(receiver)\n  }\n})\n\napi.getComments(artical.id)\n  .then(comments => {\n    // ...\n  })\n```","slug":"ES2015-总结","published":1,"updated":"2016-07-20T02:40:50.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyp80005ycjc0vqfp56a","content":"<p>关于ES2015，我最大的感受便是，当你一开始使用它，就再也不想离开了:)</p>\n<p>学习资源：</p>\n<ul>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript6入门</a></li>\n</ul>\n<h4 id=\"1-常用的es2015特性\"><a href=\"#1-常用的es2015特性\" class=\"headerlink\" title=\"1. 常用的es2015特性\"></a>1. 常用的es2015特性</h4><p>let<br>const<br>class<br>arrow function<br>template string<br>destructuring<br>default<br>reset arguments<br>import export</p>\n<h4 id=\"2-语法和特性\"><a href=\"#2-语法和特性\" class=\"headerlink\" title=\"2. 语法和特性\"></a>2. 语法和特性</h4><h6 id=\"2-1-let-const-块级作用域\"><a href=\"#2-1-let-const-块级作用域\" class=\"headerlink\" title=\"2.1 let const 块级作用域\"></a>2.1 let const 块级作用域</h6><h6 id=\"2-2-箭头函数\"><a href=\"#2-2-箭头函数\" class=\"headerlink\" title=\"2.2 箭头函数\"></a>2.2 箭头函数</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo =&gt; foo + <span class=\"string\">' world'</span></div><div class=\"line\"></div><div class=\"line\">(foo, bar) =&gt; foo + bar</div><div class=\"line\"></div><div class=\"line\">foo =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo + <span class=\"string\">' world'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(foo, bar) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo + bar</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>箭头函数对上下文的绑定是强制性的，无法通过apply或call方法改变其上下文</p>\n<h6 id=\"2-3-模板字符串\"><a href=\"#2-3-模板字符串\" class=\"headerlink\" title=\"2.3 模板字符串\"></a>2.3 模板字符串</h6><ul>\n<li><p>支持变量注入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greet = <span class=\"string\">`Hi, I'm <span class=\"subst\">$&#123;name&#125;</span>, I am the <span class=\"subst\">$&#123;title&#125;</span> at <span class=\"subst\">$&#123;company&#125;</span>`</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>支持换行</p>\n</li>\n</ul>\n<h6 id=\"2-4-对象字面量扩展语法\"><a href=\"#2-4-对象字面量扩展语法\" class=\"headerlink\" title=\"2.4 对象字面量扩展语法\"></a>2.4 对象字面量扩展语法</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  <span class=\"comment\">// before</span></div><div class=\"line\">  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after</span></div><div class=\"line\">  bar() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-5-表达式解构\"><a href=\"#2-5-表达式解构\" class=\"headerlink\" title=\"2.5 表达式解构\"></a>2.5 表达式解构</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">query</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// let users = [ ... ]</span></div><div class=\"line\">  <span class=\"comment\">// let posts = [ ... ]</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    users: users,</div><div class=\"line\">    posts: posts</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-6-函数参数表达、传参\"><a href=\"#2-6-函数参数表达、传参\" class=\"headerlink\" title=\"2.6 函数参数表达、传参\"></a>2.6 函数参数表达、传参</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchSomethings</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomeOthers</span>(<span class=\"params\">name, ...args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-7-新的数据结构\"><a href=\"#2-7-新的数据结构\" class=\"headerlink\" title=\"2.7 新的数据结构\"></a>2.7 新的数据结构</h6><ul>\n<li>Set WeakSet</li>\n<li>Map WeakMap</li>\n</ul>\n<h6 id=\"2-8-类\"><a href=\"#2-8-类\" class=\"headerlink\" title=\"2.8 类\"></a>2.8 类</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, gender, age) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  isAdult() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age &gt;= <span class=\"number\">18</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"keyword\">new</span> Person(<span class=\"string\">'iwillwen'</span>, <span class=\"string\">'man'</span>, <span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.isAdult()) <span class=\"comment\">//=&gt; true</span></div></pre></td></tr></table></figure>\n<h6 id=\"2-9-生成器\"><a href=\"#2-9-生成器\" class=\"headerlink\" title=\"2.9 生成器\"></a>2.9 生成器</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">yield</span> a</div><div class=\"line\">  <span class=\"keyword\">yield</span> b</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> next = a + b</div><div class=\"line\">    a = b</div><div class=\"line\">    b = next</div><div class=\"line\">    <span class=\"keyword\">yield</span> next</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> generator = fibo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(generator.next().value) <span class=\"comment\">//=&gt; 1 1 2 3 5 8 13 21 34 55</span></div></pre></td></tr></table></figure>\n<p>生成器(Generator) 的运行原理<br><img src=\"http://static.open-open.com/lib/uploadImg/20151111/20151111142042_17.jpg\" alt=\"\"></p>\n<h6 id=\"2-10-模块化\"><a href=\"#2-10-模块化\" class=\"headerlink\" title=\"2.10 模块化\"></a>2.10 模块化</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">'module-name'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> name <span class=\"keyword\">from</span> <span class=\"string\">'module-name'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> M <span class=\"keyword\">from</span> <span class=\"string\">'./module'</span></div><div class=\"line\">M.method()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  method1,</div><div class=\"line\">  method2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> M <span class=\"keyword\">from</span> <span class=\"string\">'./module'</span></div><div class=\"line\">M.method1()</div></pre></td></tr></table></figure>\n<h6 id=\"2-11-Promise\"><a href=\"#2-11-Promise\" class=\"headerlink\" title=\"2.11 Promise\"></a>2.11 Promise</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-12-Symbol\"><a href=\"#2-12-Symbol\" class=\"headerlink\" title=\"2.12 Symbol\"></a>2.12 Symbol</h6><p>Symbol 对象具有唯一性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> privateDataStore = &#123;</div><div class=\"line\">  set(val) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"built_in\">Symbol</span>(<span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">32</span>).substr(<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> key</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  get(key) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[key]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> key = privateDateStore(<span class=\"string\">'hello world'</span>)</div><div class=\"line\">privateDataStore[key] <span class=\"comment\">//=&gt; undefined</span></div><div class=\"line\">privateDataStore.get(key) <span class=\"comment\">//=&gt; hello world</span></div></pre></td></tr></table></figure>\n<h6 id=\"2-13-Proxy\"><a href=\"#2-13-Proxy\" class=\"headerlink\" title=\"2.13 Proxy\"></a>2.13 Proxy</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apiProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(api, &#123;</div><div class=\"line\">  get(receiver, name) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">      min.sadd(<span class=\"string\">`log:<span class=\"subst\">$&#123;name&#125;</span>`</span>, args)</div><div class=\"line\">      <span class=\"keyword\">return</span> receiver[name].apply(receiver, args)</div><div class=\"line\">    &#125;).bind(receiver)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">api.getComments(artical.id)</div><div class=\"line\">  .then(comments =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>关于ES2015，我最大的感受便是，当你一开始使用它，就再也不想离开了:)</p>\n<p>学习资源：</p>\n<ul>\n<li><a href=\"http://es6.ruanyifeng.com/\">ECMAScript6入门</a></li>\n</ul>\n<h4 id=\"1-常用的es2015特性\"><a href=\"#1-常用的es2015特性\" class=\"headerlink\" title=\"1. 常用的es2015特性\"></a>1. 常用的es2015特性</h4><p>let<br>const<br>class<br>arrow function<br>template string<br>destructuring<br>default<br>reset arguments<br>import export</p>\n<h4 id=\"2-语法和特性\"><a href=\"#2-语法和特性\" class=\"headerlink\" title=\"2. 语法和特性\"></a>2. 语法和特性</h4><h6 id=\"2-1-let-const-块级作用域\"><a href=\"#2-1-let-const-块级作用域\" class=\"headerlink\" title=\"2.1 let const 块级作用域\"></a>2.1 let const 块级作用域</h6><h6 id=\"2-2-箭头函数\"><a href=\"#2-2-箭头函数\" class=\"headerlink\" title=\"2.2 箭头函数\"></a>2.2 箭头函数</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo =&gt; foo + <span class=\"string\">' world'</span></div><div class=\"line\"></div><div class=\"line\">(foo, bar) =&gt; foo + bar</div><div class=\"line\"></div><div class=\"line\">foo =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo + <span class=\"string\">' world'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(foo, bar) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> foo + bar</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>箭头函数对上下文的绑定是强制性的，无法通过apply或call方法改变其上下文</p>\n<h6 id=\"2-3-模板字符串\"><a href=\"#2-3-模板字符串\" class=\"headerlink\" title=\"2.3 模板字符串\"></a>2.3 模板字符串</h6><ul>\n<li><p>支持变量注入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greet = <span class=\"string\">`Hi, I'm <span class=\"subst\">$&#123;name&#125;</span>, I am the <span class=\"subst\">$&#123;title&#125;</span> at <span class=\"subst\">$&#123;company&#125;</span>`</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>支持换行</p>\n</li>\n</ul>\n<h6 id=\"2-4-对象字面量扩展语法\"><a href=\"#2-4-对象字面量扩展语法\" class=\"headerlink\" title=\"2.4 对象字面量扩展语法\"></a>2.4 对象字面量扩展语法</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  <span class=\"comment\">// before</span></div><div class=\"line\">  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after</span></div><div class=\"line\">  bar() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-5-表达式解构\"><a href=\"#2-5-表达式解构\" class=\"headerlink\" title=\"2.5 表达式解构\"></a>2.5 表达式解构</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">query</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// let users = [ ... ]</span></div><div class=\"line\">  <span class=\"comment\">// let posts = [ ... ]</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    users: users,</div><div class=\"line\">    posts: posts</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-6-函数参数表达、传参\"><a href=\"#2-6-函数参数表达、传参\" class=\"headerlink\" title=\"2.6 函数参数表达、传参\"></a>2.6 函数参数表达、传参</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchSomethings</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomeOthers</span>(<span class=\"params\">name, ...args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-7-新的数据结构\"><a href=\"#2-7-新的数据结构\" class=\"headerlink\" title=\"2.7 新的数据结构\"></a>2.7 新的数据结构</h6><ul>\n<li>Set WeakSet</li>\n<li>Map WeakMap</li>\n</ul>\n<h6 id=\"2-8-类\"><a href=\"#2-8-类\" class=\"headerlink\" title=\"2.8 类\"></a>2.8 类</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, gender, age) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  isAdult() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age &gt;= <span class=\"number\">18</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"keyword\">new</span> Person(<span class=\"string\">'iwillwen'</span>, <span class=\"string\">'man'</span>, <span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.isAdult()) <span class=\"comment\">//=&gt; true</span></div></pre></td></tr></table></figure>\n<h6 id=\"2-9-生成器\"><a href=\"#2-9-生成器\" class=\"headerlink\" title=\"2.9 生成器\"></a>2.9 生成器</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">yield</span> a</div><div class=\"line\">  <span class=\"keyword\">yield</span> b</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> next = a + b</div><div class=\"line\">    a = b</div><div class=\"line\">    b = next</div><div class=\"line\">    <span class=\"keyword\">yield</span> next</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> generator = fibo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(generator.next().value) <span class=\"comment\">//=&gt; 1 1 2 3 5 8 13 21 34 55</span></div></pre></td></tr></table></figure>\n<p>生成器(Generator) 的运行原理<br><img src=\"http://static.open-open.com/lib/uploadImg/20151111/20151111142042_17.jpg\" alt=\"\"></p>\n<h6 id=\"2-10-模块化\"><a href=\"#2-10-模块化\" class=\"headerlink\" title=\"2.10 模块化\"></a>2.10 模块化</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">'module-name'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> name <span class=\"keyword\">from</span> <span class=\"string\">'module-name'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> M <span class=\"keyword\">from</span> <span class=\"string\">'./module'</span></div><div class=\"line\">M.method()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  method1,</div><div class=\"line\">  method2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> M <span class=\"keyword\">from</span> <span class=\"string\">'./module'</span></div><div class=\"line\">M.method1()</div></pre></td></tr></table></figure>\n<h6 id=\"2-11-Promise\"><a href=\"#2-11-Promise\" class=\"headerlink\" title=\"2.11 Promise\"></a>2.11 Promise</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"2-12-Symbol\"><a href=\"#2-12-Symbol\" class=\"headerlink\" title=\"2.12 Symbol\"></a>2.12 Symbol</h6><p>Symbol 对象具有唯一性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> privateDataStore = &#123;</div><div class=\"line\">  set(val) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"built_in\">Symbol</span>(<span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">32</span>).substr(<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> key</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  get(key) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[key]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> key = privateDateStore(<span class=\"string\">'hello world'</span>)</div><div class=\"line\">privateDataStore[key] <span class=\"comment\">//=&gt; undefined</span></div><div class=\"line\">privateDataStore.get(key) <span class=\"comment\">//=&gt; hello world</span></div></pre></td></tr></table></figure>\n<h6 id=\"2-13-Proxy\"><a href=\"#2-13-Proxy\" class=\"headerlink\" title=\"2.13 Proxy\"></a>2.13 Proxy</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apiProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(api, &#123;</div><div class=\"line\">  get(receiver, name) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">      min.sadd(<span class=\"string\">`log:<span class=\"subst\">$&#123;name&#125;</span>`</span>, args)</div><div class=\"line\">      <span class=\"keyword\">return</span> receiver[name].apply(receiver, args)</div><div class=\"line\">    &#125;).bind(receiver)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">api.getComments(artical.id)</div><div class=\"line\">  .then(comments =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>"},{"title":"ESLint使用备查","date":"2016-03-27T03:48:43.000Z","_content":"\nESLint是以可扩展、每条规则独立、不内置编码风格为理念的lint工具\n\n### 1. 安装\n\n```bash\nnpm install -g eslint\n```\n\n### 2. 使用\n\n在项目目录下输入\n\n```bash\neslint --init\n```\n\n之后便可以对项目下的任何js文件使用ESLnt，如\n```bash\neslint test.js test2.js\n```\n\n### 3. 使用要点\n\n#### 3.1 配置\n\n可使用三种方式配置ESLint：\n- 使用 `.eslintrc` 文件（可通过`eslint --init`生成）\n- 在 `package.json` 文件内添加 `eslintConfig` 配置块\n- 在代码文件中定义\n\n###### 3.1.1 `.eslintrc` 示例\n项目根目录的 `.eslintrc` 文件会应用到整个项目，子目录中如果也包含 `.eslintrc` 文件则会忽略根目录中的配置\n\n```json\n{\n  \"env\": {\n    \"browser\": true,\n  },\n  \"globals\": {\n    \"angular\": true,\n  },\n  \"rules\": {\n    \"camelcase\": 2,\n    \"curly\": 2,\n    \"brace-style\": [2, \"1tbs\"],\n    \"quotes\": [2, \"single\"],\n    \"semi\": [2, \"always\"],\n    \"space-in-brackets\": [2, \"never\"],\n    \"space-infix-ops\": 2,\n  }\n}\n```\n\n###### 3.1.2 `package.json` 示例\n\n```json\n{\n  \"name\": \"mypackage\",\n  \"version\": \"0.0.1\",\n  \"eslintConfig\": {\n    \"env\": {\n      \"browser\": true,\n      \"node\": true\n    }\n  }\n}\n```\n\n###### 3.1.3 文件内配置\n代码文件内的配置会覆盖配置文件中的规则\n\n- 禁用ESLint:\n```js\n/* eslint-disable */\nvar obj = { key: 'value', };\n/* eslint-enable */\n```\n\n- 禁用一条规则\n```js\n/*eslint-disable no-alert */\nalert('doing awful things');\n/* eslint-enable no-alert */\n```\n\n#### 3.2 工作流集成\n\n- 在Gulp中使用\n```js\nvar gulp = require('gulp');\nvar eslint = require('gulp-eslint');\n\ngulp.task('lint', function() {\n  return gulp.src('client/app/**/*.js')\n    .pipe(eslint())\n    .pipe(eslint.format());\n});\n```\n\n- 在Webpack中使用\n```js\nvar path = require('path')\nvar webpack = require('webpack')\n\nmodule.exports = {\n  devtool: 'cheap-module-eval-source-map',\n  entry: [\n    'webpack-hot-middleware/client?noInfo=true&reload=true',\n    './index'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/static/'\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loaders: ['babel', 'eslint'],\n        exclude: /node_modules/,\n        include: __dirname\n      }\n    ]\n  }\n}\n```\n\n### 4. 配置规则\n\n[Configuring ESLint](http://eslint.org/docs/user-guide/configuring)","source":"_posts/Eslint使用备查.md","raw":"---\ntitle: ESLint使用备查\ndate: 2016-03-27 11:48:43\ntags: Eslint\ncategories: 前端\n---\n\nESLint是以可扩展、每条规则独立、不内置编码风格为理念的lint工具\n\n### 1. 安装\n\n```bash\nnpm install -g eslint\n```\n\n### 2. 使用\n\n在项目目录下输入\n\n```bash\neslint --init\n```\n\n之后便可以对项目下的任何js文件使用ESLnt，如\n```bash\neslint test.js test2.js\n```\n\n### 3. 使用要点\n\n#### 3.1 配置\n\n可使用三种方式配置ESLint：\n- 使用 `.eslintrc` 文件（可通过`eslint --init`生成）\n- 在 `package.json` 文件内添加 `eslintConfig` 配置块\n- 在代码文件中定义\n\n###### 3.1.1 `.eslintrc` 示例\n项目根目录的 `.eslintrc` 文件会应用到整个项目，子目录中如果也包含 `.eslintrc` 文件则会忽略根目录中的配置\n\n```json\n{\n  \"env\": {\n    \"browser\": true,\n  },\n  \"globals\": {\n    \"angular\": true,\n  },\n  \"rules\": {\n    \"camelcase\": 2,\n    \"curly\": 2,\n    \"brace-style\": [2, \"1tbs\"],\n    \"quotes\": [2, \"single\"],\n    \"semi\": [2, \"always\"],\n    \"space-in-brackets\": [2, \"never\"],\n    \"space-infix-ops\": 2,\n  }\n}\n```\n\n###### 3.1.2 `package.json` 示例\n\n```json\n{\n  \"name\": \"mypackage\",\n  \"version\": \"0.0.1\",\n  \"eslintConfig\": {\n    \"env\": {\n      \"browser\": true,\n      \"node\": true\n    }\n  }\n}\n```\n\n###### 3.1.3 文件内配置\n代码文件内的配置会覆盖配置文件中的规则\n\n- 禁用ESLint:\n```js\n/* eslint-disable */\nvar obj = { key: 'value', };\n/* eslint-enable */\n```\n\n- 禁用一条规则\n```js\n/*eslint-disable no-alert */\nalert('doing awful things');\n/* eslint-enable no-alert */\n```\n\n#### 3.2 工作流集成\n\n- 在Gulp中使用\n```js\nvar gulp = require('gulp');\nvar eslint = require('gulp-eslint');\n\ngulp.task('lint', function() {\n  return gulp.src('client/app/**/*.js')\n    .pipe(eslint())\n    .pipe(eslint.format());\n});\n```\n\n- 在Webpack中使用\n```js\nvar path = require('path')\nvar webpack = require('webpack')\n\nmodule.exports = {\n  devtool: 'cheap-module-eval-source-map',\n  entry: [\n    'webpack-hot-middleware/client?noInfo=true&reload=true',\n    './index'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/static/'\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loaders: ['babel', 'eslint'],\n        exclude: /node_modules/,\n        include: __dirname\n      }\n    ]\n  }\n}\n```\n\n### 4. 配置规则\n\n[Configuring ESLint](http://eslint.org/docs/user-guide/configuring)","slug":"Eslint使用备查","published":1,"updated":"2016-07-20T02:40:50.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkypa0006ycjcmw0mzt58","content":"<p>ESLint是以可扩展、每条规则独立、不内置编码风格为理念的lint工具</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g eslint</div></pre></td></tr></table></figure>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><p>在项目目录下输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eslint --init</div></pre></td></tr></table></figure>\n<p>之后便可以对项目下的任何js文件使用ESLnt，如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eslint test.js <span class=\"built_in\">test</span>2.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-使用要点\"><a href=\"#3-使用要点\" class=\"headerlink\" title=\"3. 使用要点\"></a>3. 使用要点</h3><h4 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1 配置\"></a>3.1 配置</h4><p>可使用三种方式配置ESLint：</p>\n<ul>\n<li>使用 <code>.eslintrc</code> 文件（可通过<code>eslint --init</code>生成）</li>\n<li>在 <code>package.json</code> 文件内添加 <code>eslintConfig</code> 配置块</li>\n<li>在代码文件中定义</li>\n</ul>\n<h6 id=\"3-1-1-eslintrc-示例\"><a href=\"#3-1-1-eslintrc-示例\" class=\"headerlink\" title=\"3.1.1 .eslintrc 示例\"></a>3.1.1 <code>.eslintrc</code> 示例</h6><p>项目根目录的 <code>.eslintrc</code> 文件会应用到整个项目，子目录中如果也包含 <code>.eslintrc</code> 文件则会忽略根目录中的配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"angular\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"camelcase\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"curly\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"brace-style\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"1tbs\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"quotes\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"single\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"semi\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"always\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-in-brackets\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-infix-ops\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"3-1-2-package-json-示例\"><a href=\"#3-1-2-package-json-示例\" class=\"headerlink\" title=\"3.1.2 package.json 示例\"></a>3.1.2 <code>package.json</code> 示例</h6><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"mypackage\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eslintConfig\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"3-1-3-文件内配置\"><a href=\"#3-1-3-文件内配置\" class=\"headerlink\" title=\"3.1.3 文件内配置\"></a>3.1.3 文件内配置</h6><p>代码文件内的配置会覆盖配置文件中的规则</p>\n<ul>\n<li><p>禁用ESLint:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* eslint-disable */</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; key: <span class=\"string\">'value'</span>, &#125;;</div><div class=\"line\"><span class=\"comment\">/* eslint-enable */</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>禁用一条规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*eslint-disable no-alert */</span></div><div class=\"line\">alert(<span class=\"string\">'doing awful things'</span>);</div><div class=\"line\"><span class=\"comment\">/* eslint-enable no-alert */</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-2-工作流集成\"><a href=\"#3-2-工作流集成\" class=\"headerlink\" title=\"3.2 工作流集成\"></a>3.2 工作流集成</h4><ul>\n<li><p>在Gulp中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eslint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-eslint'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'client/app/**/*.js'</span>)</div><div class=\"line\">    .pipe(eslint())</div><div class=\"line\">    .pipe(eslint.format());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Webpack中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'cheap-module-eval-source-map'</span>,</div><div class=\"line\">  entry: [</div><div class=\"line\">    <span class=\"string\">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</div><div class=\"line\">    <span class=\"string\">'./index'</span></div><div class=\"line\">  ],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    publicPath: <span class=\"string\">'/static/'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        loaders: [<span class=\"string\">'babel'</span>, <span class=\"string\">'eslint'</span>],</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        include: __dirname</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-配置规则\"><a href=\"#4-配置规则\" class=\"headerlink\" title=\"4. 配置规则\"></a>4. 配置规则</h3><p><a href=\"http://eslint.org/docs/user-guide/configuring\" target=\"_blank\" rel=\"external\">Configuring ESLint</a></p>\n","excerpt":"","more":"<p>ESLint是以可扩展、每条规则独立、不内置编码风格为理念的lint工具</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g eslint</div></pre></td></tr></table></figure>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><p>在项目目录下输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eslint --init</div></pre></td></tr></table></figure>\n<p>之后便可以对项目下的任何js文件使用ESLnt，如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eslint test.js <span class=\"built_in\">test</span>2.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-使用要点\"><a href=\"#3-使用要点\" class=\"headerlink\" title=\"3. 使用要点\"></a>3. 使用要点</h3><h4 id=\"3-1-配置\"><a href=\"#3-1-配置\" class=\"headerlink\" title=\"3.1 配置\"></a>3.1 配置</h4><p>可使用三种方式配置ESLint：</p>\n<ul>\n<li>使用 <code>.eslintrc</code> 文件（可通过<code>eslint --init</code>生成）</li>\n<li>在 <code>package.json</code> 文件内添加 <code>eslintConfig</code> 配置块</li>\n<li>在代码文件中定义</li>\n</ul>\n<h6 id=\"3-1-1-eslintrc-示例\"><a href=\"#3-1-1-eslintrc-示例\" class=\"headerlink\" title=\"3.1.1 .eslintrc 示例\"></a>3.1.1 <code>.eslintrc</code> 示例</h6><p>项目根目录的 <code>.eslintrc</code> 文件会应用到整个项目，子目录中如果也包含 <code>.eslintrc</code> 文件则会忽略根目录中的配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"globals\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"angular\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"camelcase\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"curly\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"brace-style\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"1tbs\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"quotes\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"single\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"semi\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"always\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-in-brackets\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"space-infix-ops\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"3-1-2-package-json-示例\"><a href=\"#3-1-2-package-json-示例\" class=\"headerlink\" title=\"3.1.2 package.json 示例\"></a>3.1.2 <code>package.json</code> 示例</h6><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"mypackage\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eslintConfig\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"3-1-3-文件内配置\"><a href=\"#3-1-3-文件内配置\" class=\"headerlink\" title=\"3.1.3 文件内配置\"></a>3.1.3 文件内配置</h6><p>代码文件内的配置会覆盖配置文件中的规则</p>\n<ul>\n<li><p>禁用ESLint:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* eslint-disable */</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; key: <span class=\"string\">'value'</span>, &#125;;</div><div class=\"line\"><span class=\"comment\">/* eslint-enable */</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>禁用一条规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*eslint-disable no-alert */</span></div><div class=\"line\">alert(<span class=\"string\">'doing awful things'</span>);</div><div class=\"line\"><span class=\"comment\">/* eslint-enable no-alert */</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-2-工作流集成\"><a href=\"#3-2-工作流集成\" class=\"headerlink\" title=\"3.2 工作流集成\"></a>3.2 工作流集成</h4><ul>\n<li><p>在Gulp中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eslint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-eslint'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'client/app/**/*.js'</span>)</div><div class=\"line\">    .pipe(eslint())</div><div class=\"line\">    .pipe(eslint.format());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Webpack中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'cheap-module-eval-source-map'</span>,</div><div class=\"line\">  entry: [</div><div class=\"line\">    <span class=\"string\">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</div><div class=\"line\">    <span class=\"string\">'./index'</span></div><div class=\"line\">  ],</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    publicPath: <span class=\"string\">'/static/'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        loaders: [<span class=\"string\">'babel'</span>, <span class=\"string\">'eslint'</span>],</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        include: __dirname</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-配置规则\"><a href=\"#4-配置规则\" class=\"headerlink\" title=\"4. 配置规则\"></a>4. 配置规则</h3><p><a href=\"http://eslint.org/docs/user-guide/configuring\">Configuring ESLint</a></p>\n"},{"title":"Javascript 继承","date":"2015-04-10T08:50:46.000Z","_content":"\n# 原型指针\n\n```js\nvar a = new Array();\na.__proto__ === Array.prototype // true\n\na.__proto__.__proto__ === Object.prototype  // true\n\na.__proto__.__proto__.__proto__ === null  // true\n```\n\n# 原型对象\n\n```js\nvar Foo = function() {}\nFoo.__proto__ === Function.prototype // true\n\nvar a = new Foo();\na.__proto__ === Foo.prototype; // true\n\nFoo.prototype.__proto__ === Object.prototype; // true\n\nFoo.prototype.constructor === Foo; // true\na.constructor === Foo; // true\na.constructor === Foo.prototype.constructor; // true\n```\n\n# 原型链\n\n利用原型让一个引用类型继承另一个引用类型的属性和方法\n\n每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(__proto__)\n\n只需要让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针\n\n当读取对象的某个属性时，JavaScript引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的Object.prototype还是找不到，则返回undefine\n\n![原型链](http://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg)","source":"_posts/Javascript-继承.md","raw":"---\ntitle: Javascript 继承\ndate: 2015-04-10 16:50:46\ntags: Javascript\ncategories: 编程\n---\n\n# 原型指针\n\n```js\nvar a = new Array();\na.__proto__ === Array.prototype // true\n\na.__proto__.__proto__ === Object.prototype  // true\n\na.__proto__.__proto__.__proto__ === null  // true\n```\n\n# 原型对象\n\n```js\nvar Foo = function() {}\nFoo.__proto__ === Function.prototype // true\n\nvar a = new Foo();\na.__proto__ === Foo.prototype; // true\n\nFoo.prototype.__proto__ === Object.prototype; // true\n\nFoo.prototype.constructor === Foo; // true\na.constructor === Foo; // true\na.constructor === Foo.prototype.constructor; // true\n```\n\n# 原型链\n\n利用原型让一个引用类型继承另一个引用类型的属性和方法\n\n每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(__proto__)\n\n只需要让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针\n\n当读取对象的某个属性时，JavaScript引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的Object.prototype还是找不到，则返回undefine\n\n![原型链](http://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg)","slug":"Javascript-继承","published":1,"updated":"2016-07-20T02:40:50.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkypm000dycjc0y5jdi83","content":"<h1 id=\"原型指针\"><a href=\"#原型指针\" class=\"headerlink\" title=\"原型指针\"></a>原型指针</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">a.__proto__ === <span class=\"built_in\">Array</span>.prototype <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">a.__proto__.__proto__ === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">a.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span>  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">a.__proto__ === Foo.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">Foo.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">// true</span></div><div class=\"line\">a.constructor === Foo; <span class=\"comment\">// true</span></div><div class=\"line\">a.constructor === Foo.prototype.constructor; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h1><p>利用原型让一个引用类型继承另一个引用类型的属性和方法</p>\n<p>每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(<strong>proto</strong>)</p>\n<p>只需要让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针</p>\n<p>当读取对象的某个属性时，JavaScript引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的Object.prototype还是找不到，则返回undefine</p>\n<p><img src=\"http://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg\" alt=\"原型链\"></p>\n","excerpt":"","more":"<h1 id=\"原型指针\"><a href=\"#原型指针\" class=\"headerlink\" title=\"原型指针\"></a>原型指针</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">a.__proto__ === <span class=\"built_in\">Array</span>.prototype <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">a.__proto__.__proto__ === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">a.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span>  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">a.__proto__ === Foo.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">Foo.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">// true</span></div><div class=\"line\">a.constructor === Foo; <span class=\"comment\">// true</span></div><div class=\"line\">a.constructor === Foo.prototype.constructor; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h1><p>利用原型让一个引用类型继承另一个引用类型的属性和方法</p>\n<p>每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(<strong>proto</strong>)</p>\n<p>只需要让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针</p>\n<p>当读取对象的某个属性时，JavaScript引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的Object.prototype还是找不到，则返回undefine</p>\n<p><img src=\"http://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg\" alt=\"原型链\"></p>\n"},{"title":"jQuery源码阅读","date":"2015-08-21T06:25:18.000Z","_content":"> jQuery 版本：2.0.3\n> jQuery 源码学习笔记：\n> [原文地址](http://www.cnblogs.com/aaronjs/p/3279314.html)\n\n# 1. 整体架构\n\nJquey的核心是从HTML文档中匹配元素后执行操作\n如：\n\n```js\n $(selector).append(html)\n $(selector).html(html).css()\n```\n\n具体步骤可分为:\n- 构造jQuery对象\n\n- 调用jQuery方法\n\n# 2. jQuery 构建\n\n通过原型传递，把jQuery的原型传递给jQuery.prototype.init.prototype\n\n```js\nvar jQuery = function(selector, context) {\n return  new aQuery.prototype.init();\n}\njQuery.prototype = {\n  init: function() {\n    return this;\n  },\n  name: function() {\n    return this.age\n  },\n  age: 20\n}\n\njQuery.prototype.init.prototype = jQuery.prototype;\n\nconsole.log(jQuery().name()) //20\n```\n\n# 3. 链式调用\n实现链式的基本条件就是实例this的存在，并且是同一个\n\n```js\njQuery.prototype = {\n  init: function() {\n    return this;\n  },\n  name: function() {\n    return this\n  }\n}\n```\n\n```js\njQuery.init().name()\n```\n\n# 4. 插件接口\n为jQuery或者jQuery prototype添加属性方法\n\njQuery.extend 对jQuery本身的属性和方法进行了扩展\n\njQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展\n\njQuery.fn 是jQuery.prototype 的引用\n\n```js\njQuery.extend = jQuery.fn.extend = function() {\n}\n```\n\n# 5. 总结\n\n- 通过new jQuery.fn.init() 构建一个新的对象，拥有init构造器的prototype原型对象的方法\n- 通过改变prorotype指针的指向，让这个新的对象也指向了jQuery类的原型prototype","source":"_posts/Jquery源码阅读.md","raw":"---\ntitle: jQuery源码阅读\ndate: 2015-08-21 14:25:18\ntags: Jquery\ncategories: JavaScript\n---\n> jQuery 版本：2.0.3\n> jQuery 源码学习笔记：\n> [原文地址](http://www.cnblogs.com/aaronjs/p/3279314.html)\n\n# 1. 整体架构\n\nJquey的核心是从HTML文档中匹配元素后执行操作\n如：\n\n```js\n $(selector).append(html)\n $(selector).html(html).css()\n```\n\n具体步骤可分为:\n- 构造jQuery对象\n\n- 调用jQuery方法\n\n# 2. jQuery 构建\n\n通过原型传递，把jQuery的原型传递给jQuery.prototype.init.prototype\n\n```js\nvar jQuery = function(selector, context) {\n return  new aQuery.prototype.init();\n}\njQuery.prototype = {\n  init: function() {\n    return this;\n  },\n  name: function() {\n    return this.age\n  },\n  age: 20\n}\n\njQuery.prototype.init.prototype = jQuery.prototype;\n\nconsole.log(jQuery().name()) //20\n```\n\n# 3. 链式调用\n实现链式的基本条件就是实例this的存在，并且是同一个\n\n```js\njQuery.prototype = {\n  init: function() {\n    return this;\n  },\n  name: function() {\n    return this\n  }\n}\n```\n\n```js\njQuery.init().name()\n```\n\n# 4. 插件接口\n为jQuery或者jQuery prototype添加属性方法\n\njQuery.extend 对jQuery本身的属性和方法进行了扩展\n\njQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展\n\njQuery.fn 是jQuery.prototype 的引用\n\n```js\njQuery.extend = jQuery.fn.extend = function() {\n}\n```\n\n# 5. 总结\n\n- 通过new jQuery.fn.init() 构建一个新的对象，拥有init构造器的prototype原型对象的方法\n- 通过改变prorotype指针的指向，让这个新的对象也指向了jQuery类的原型prototype","slug":"Jquery源码阅读","published":1,"updated":"2016-07-20T02:40:50.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkypq000fycjcdbobskve","content":"<blockquote>\n<p>jQuery 版本：2.0.3<br>jQuery 源码学习笔记：<br><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h1 id=\"1-整体架构\"><a href=\"#1-整体架构\" class=\"headerlink\" title=\"1. 整体架构\"></a>1. 整体架构</h1><p>Jquey的核心是从HTML文档中匹配元素后执行操作<br>如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(selector).append(html)</div><div class=\"line\">$(selector).html(html).css()</div></pre></td></tr></table></figure>\n<p>具体步骤可分为:</p>\n<ul>\n<li><p>构造jQuery对象</p>\n</li>\n<li><p>调用jQuery方法</p>\n</li>\n</ul>\n<h1 id=\"2-jQuery-构建\"><a href=\"#2-jQuery-构建\" class=\"headerlink\" title=\"2. jQuery 构建\"></a>2. jQuery 构建</h1><p>通过原型传递，把jQuery的原型传递给jQuery.prototype.init.prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>) </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> aQuery.prototype.init();</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age</div><div class=\"line\">  &#125;,</div><div class=\"line\">  age: <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jQuery.prototype.init.prototype = jQuery.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(jQuery().name()) <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-链式调用\"><a href=\"#3-链式调用\" class=\"headerlink\" title=\"3. 链式调用\"></a>3. 链式调用</h1><p>实现链式的基本条件就是实例this的存在，并且是同一个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.init().name()</div></pre></td></tr></table></figure>\n<h1 id=\"4-插件接口\"><a href=\"#4-插件接口\" class=\"headerlink\" title=\"4. 插件接口\"></a>4. 插件接口</h1><p>为jQuery或者jQuery prototype添加属性方法</p>\n<p>jQuery.extend 对jQuery本身的属性和方法进行了扩展</p>\n<p>jQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展</p>\n<p>jQuery.fn 是jQuery.prototype 的引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend = jQuery.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><ul>\n<li>通过new jQuery.fn.init() 构建一个新的对象，拥有init构造器的prototype原型对象的方法</li>\n<li>通过改变prorotype指针的指向，让这个新的对象也指向了jQuery类的原型prototype</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>jQuery 版本：2.0.3<br>jQuery 源码学习笔记：<br><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\">原文地址</a></p>\n</blockquote>\n<h1 id=\"1-整体架构\"><a href=\"#1-整体架构\" class=\"headerlink\" title=\"1. 整体架构\"></a>1. 整体架构</h1><p>Jquey的核心是从HTML文档中匹配元素后执行操作<br>如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(selector).append(html)</div><div class=\"line\">$(selector).html(html).css()</div></pre></td></tr></table></figure>\n<p>具体步骤可分为:</p>\n<ul>\n<li><p>构造jQuery对象</p>\n</li>\n<li><p>调用jQuery方法</p>\n</li>\n</ul>\n<h1 id=\"2-jQuery-构建\"><a href=\"#2-jQuery-构建\" class=\"headerlink\" title=\"2. jQuery 构建\"></a>2. jQuery 构建</h1><p>通过原型传递，把jQuery的原型传递给jQuery.prototype.init.prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>) </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> aQuery.prototype.init();</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age</div><div class=\"line\">  &#125;,</div><div class=\"line\">  age: <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jQuery.prototype.init.prototype = jQuery.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(jQuery().name()) <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-链式调用\"><a href=\"#3-链式调用\" class=\"headerlink\" title=\"3. 链式调用\"></a>3. 链式调用</h1><p>实现链式的基本条件就是实例this的存在，并且是同一个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  name: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.init().name()</div></pre></td></tr></table></figure>\n<h1 id=\"4-插件接口\"><a href=\"#4-插件接口\" class=\"headerlink\" title=\"4. 插件接口\"></a>4. 插件接口</h1><p>为jQuery或者jQuery prototype添加属性方法</p>\n<p>jQuery.extend 对jQuery本身的属性和方法进行了扩展</p>\n<p>jQuery.fn.extend 对jQuery.fn的属性和方法进行了扩展</p>\n<p>jQuery.fn 是jQuery.prototype 的引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend = jQuery.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><ul>\n<li>通过new jQuery.fn.init() 构建一个新的对象，拥有init构造器的prototype原型对象的方法</li>\n<li>通过改变prorotype指针的指向，让这个新的对象也指向了jQuery类的原型prototype</li>\n</ul>\n"},{"title":"Javascript面向对象编程","date":"2015-05-23T05:42:42.000Z","_content":"ECMA-262把对象定义为：\"无序属性的集合，其属性可以包含基本值、对象或者函数。\"\n\n## 对象\n\n### 属性类型\n- 数据属性\n- 访问器属性\n\n##### 定义多个属性\n\n##### 读取属性的特性\n\n### 创建对象\n\n##### 工厂模式\n\n##### 原型模式\n\n##### 组合使用构造函数模式和原型模式\n\n##### 动态原型模式\n\n##### 寄生构造函数模式\n\n##### 稳妥构造函数模式\n\n### 继承\n","source":"_posts/Javascript面向对象编程.md","raw":"---\ntitle: Javascript面向对象编程\ndate: 2015-05-23 13:42:42\ntags: Javascript\ncategories: 编程\n---\nECMA-262把对象定义为：\"无序属性的集合，其属性可以包含基本值、对象或者函数。\"\n\n## 对象\n\n### 属性类型\n- 数据属性\n- 访问器属性\n\n##### 定义多个属性\n\n##### 读取属性的特性\n\n### 创建对象\n\n##### 工厂模式\n\n##### 原型模式\n\n##### 组合使用构造函数模式和原型模式\n\n##### 动态原型模式\n\n##### 寄生构造函数模式\n\n##### 稳妥构造函数模式\n\n### 继承\n","slug":"Javascript面向对象编程","published":1,"updated":"2016-07-20T02:40:50.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkypw000iycjcc9n4032m","content":"<p>ECMA-262把对象定义为：”无序属性的集合，其属性可以包含基本值、对象或者函数。”</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h3><ul>\n<li>数据属性</li>\n<li>访问器属性</li>\n</ul>\n<h5 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h5><h5 id=\"读取属性的特性\"><a href=\"#读取属性的特性\" class=\"headerlink\" title=\"读取属性的特性\"></a>读取属性的特性</h5><h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><h5 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h5><h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><h5 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h5><h5 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h5><h5 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h5><h5 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h5><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3>","excerpt":"","more":"<p>ECMA-262把对象定义为：”无序属性的集合，其属性可以包含基本值、对象或者函数。”</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h3><ul>\n<li>数据属性</li>\n<li>访问器属性</li>\n</ul>\n<h5 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h5><h5 id=\"读取属性的特性\"><a href=\"#读取属性的特性\" class=\"headerlink\" title=\"读取属性的特性\"></a>读取属性的特性</h5><h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><h5 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h5><h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><h5 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h5><h5 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h5><h5 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h5><h5 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h5><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3>"},{"title":"Javascript事件","date":"2015-02-07T02:16:30.000Z","_content":"\n## 1. 事件流\n事件流描述的是从页面中接收事件的顺序\n\n#### 1.1 事件冒泡\nIE的事件流：事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling Example</title>\n</head>\n<body>\n  <div id=\"myDiv\">Click Me</div>\n</body>\n</html>\n```\n点击页面中的`<div>`元素，那么click事件会按照如下顺序传播：\n1. `<div>`\n2. `<body>`\n3. `<html>`\n4. `document`\n\n#### 1.2 事件捕获\n事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。\n事件捕获的用意在于在事件到达预定目标之前捕获它。\n\n点击页面中的`<div>`元素，click事件会按照如下顺序传播：\n1. `document`\n2. `<html>`\n3. `<body>`\n4. `<div>`\n\n#### 1.2 DOM事件流\n“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段\n\n![Alt text](http://img1.zsgjs.com/upfile/file/2016/0615/7644326177bdc141c1b2b85d4575d528.png)\n\n## 2. 事件处理程序\n响应某个事件的函数就是事件处理程序，或事件侦听器\n\n#### 2.1 HTML事件处理程序\n```html\n<input type=\"button\" name=\"btn\" onclick=\"alert('Clicked')\" value=\"Click Me\" />\n```\n\n#### 2.2 DOM 0级事件处理程序\n","source":"_posts/Javascript事件.md","raw":"---\ntitle: Javascript事件\ndate: 2015-02-07 10:16:30\ntags: Javascript\ncategories: 编程\n---\n\n## 1. 事件流\n事件流描述的是从页面中接收事件的顺序\n\n#### 1.1 事件冒泡\nIE的事件流：事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling Example</title>\n</head>\n<body>\n  <div id=\"myDiv\">Click Me</div>\n</body>\n</html>\n```\n点击页面中的`<div>`元素，那么click事件会按照如下顺序传播：\n1. `<div>`\n2. `<body>`\n3. `<html>`\n4. `document`\n\n#### 1.2 事件捕获\n事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。\n事件捕获的用意在于在事件到达预定目标之前捕获它。\n\n点击页面中的`<div>`元素，click事件会按照如下顺序传播：\n1. `document`\n2. `<html>`\n3. `<body>`\n4. `<div>`\n\n#### 1.2 DOM事件流\n“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段\n\n![Alt text](http://img1.zsgjs.com/upfile/file/2016/0615/7644326177bdc141c1b2b85d4575d528.png)\n\n## 2. 事件处理程序\n响应某个事件的函数就是事件处理程序，或事件侦听器\n\n#### 2.1 HTML事件处理程序\n```html\n<input type=\"button\" name=\"btn\" onclick=\"alert('Clicked')\" value=\"Click Me\" />\n```\n\n#### 2.2 DOM 0级事件处理程序\n","slug":"Javascript事件","published":1,"updated":"2016-07-20T02:40:50.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyq1000mycjcsvf3w1o8","content":"<h2 id=\"1-事件流\"><a href=\"#1-事件流\" class=\"headerlink\" title=\"1. 事件流\"></a>1. 事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p>\n<h4 id=\"1-1-事件冒泡\"><a href=\"#1-1-事件冒泡\" class=\"headerlink\" title=\"1.1 事件冒泡\"></a>1.1 事件冒泡</h4><p>IE的事件流：事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event Bubbling Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>点击页面中的<code>&lt;div&gt;</code>元素，那么click事件会按照如下顺序传播：</p>\n<ol>\n<li><code>&lt;div&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n<li><code>&lt;html&gt;</code></li>\n<li><code>document</code></li>\n</ol>\n<h4 id=\"1-2-事件捕获\"><a href=\"#1-2-事件捕获\" class=\"headerlink\" title=\"1.2 事件捕获\"></a>1.2 事件捕获</h4><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。<br>事件捕获的用意在于在事件到达预定目标之前捕获它。</p>\n<p>点击页面中的<code>&lt;div&gt;</code>元素，click事件会按照如下顺序传播：</p>\n<ol>\n<li><code>document</code></li>\n<li><code>&lt;html&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n<li><code>&lt;div&gt;</code></li>\n</ol>\n<h4 id=\"1-2-DOM事件流\"><a href=\"#1-2-DOM事件流\" class=\"headerlink\" title=\"1.2 DOM事件流\"></a>1.2 DOM事件流</h4><p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段</p>\n<p><img src=\"http://img1.zsgjs.com/upfile/file/2016/0615/7644326177bdc141c1b2b85d4575d528.png\" alt=\"Alt text\"></p>\n<h2 id=\"2-事件处理程序\"><a href=\"#2-事件处理程序\" class=\"headerlink\" title=\"2. 事件处理程序\"></a>2. 事件处理程序</h2><p>响应某个事件的函数就是事件处理程序，或事件侦听器</p>\n<h4 id=\"2-1-HTML事件处理程序\"><a href=\"#2-1-HTML事件处理程序\" class=\"headerlink\" title=\"2.1 HTML事件处理程序\"></a>2.1 HTML事件处理程序</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert('Clicked')\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Click Me\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-2-DOM-0级事件处理程序\"><a href=\"#2-2-DOM-0级事件处理程序\" class=\"headerlink\" title=\"2.2 DOM 0级事件处理程序\"></a>2.2 DOM 0级事件处理程序</h4>","excerpt":"","more":"<h2 id=\"1-事件流\"><a href=\"#1-事件流\" class=\"headerlink\" title=\"1. 事件流\"></a>1. 事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p>\n<h4 id=\"1-1-事件冒泡\"><a href=\"#1-1-事件冒泡\" class=\"headerlink\" title=\"1.1 事件冒泡\"></a>1.1 事件冒泡</h4><p>IE的事件流：事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event Bubbling Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>点击页面中的<code>&lt;div&gt;</code>元素，那么click事件会按照如下顺序传播：</p>\n<ol>\n<li><code>&lt;div&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n<li><code>&lt;html&gt;</code></li>\n<li><code>document</code></li>\n</ol>\n<h4 id=\"1-2-事件捕获\"><a href=\"#1-2-事件捕获\" class=\"headerlink\" title=\"1.2 事件捕获\"></a>1.2 事件捕获</h4><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。<br>事件捕获的用意在于在事件到达预定目标之前捕获它。</p>\n<p>点击页面中的<code>&lt;div&gt;</code>元素，click事件会按照如下顺序传播：</p>\n<ol>\n<li><code>document</code></li>\n<li><code>&lt;html&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n<li><code>&lt;div&gt;</code></li>\n</ol>\n<h4 id=\"1-2-DOM事件流\"><a href=\"#1-2-DOM事件流\" class=\"headerlink\" title=\"1.2 DOM事件流\"></a>1.2 DOM事件流</h4><p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段</p>\n<p><img src=\"http://img1.zsgjs.com/upfile/file/2016/0615/7644326177bdc141c1b2b85d4575d528.png\" alt=\"Alt text\"></p>\n<h2 id=\"2-事件处理程序\"><a href=\"#2-事件处理程序\" class=\"headerlink\" title=\"2. 事件处理程序\"></a>2. 事件处理程序</h2><p>响应某个事件的函数就是事件处理程序，或事件侦听器</p>\n<h4 id=\"2-1-HTML事件处理程序\"><a href=\"#2-1-HTML事件处理程序\" class=\"headerlink\" title=\"2.1 HTML事件处理程序\"></a>2.1 HTML事件处理程序</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert('Clicked')\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Click Me\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-2-DOM-0级事件处理程序\"><a href=\"#2-2-DOM-0级事件处理程序\" class=\"headerlink\" title=\"2.2 DOM 0级事件处理程序\"></a>2.2 DOM 0级事件处理程序</h4>"},{"title":"jQuery源码阅读(二)","date":"2015-08-30T09:27:53.000Z","_content":"> jQuery 版本：2.0.3\n> jQuery 源码学习笔记（二）：\n> [原文地址](http://www.cnblogs.com/aaronjs/p/3279314.html)\n\n# 事件绑定\n\n## 1. 事件绑定接口\n\n![事件绑定接口](http://images.cnitblog.com/blog/329084/201311/25131537-e46635f5fd144ceeb43c1bf8d3516dfc.png)\n\njQuery的事件绑定，以click方法为例：\n- click\n- bind\n- delegate\n- on\n\n## 2. jQuery事件流程图\n\n![jQuery事件流程图](http://images.cnitblog.com/blog/329084/201311/26084505-ee141e573a864f148af28f3cf62b6196.png)","source":"_posts/Jquery源码阅读-二.md","raw":"---\ntitle: jQuery源码阅读(二)\ndate: 2015-08-30 17:27:53\ntags:\n---\n> jQuery 版本：2.0.3\n> jQuery 源码学习笔记（二）：\n> [原文地址](http://www.cnblogs.com/aaronjs/p/3279314.html)\n\n# 事件绑定\n\n## 1. 事件绑定接口\n\n![事件绑定接口](http://images.cnitblog.com/blog/329084/201311/25131537-e46635f5fd144ceeb43c1bf8d3516dfc.png)\n\njQuery的事件绑定，以click方法为例：\n- click\n- bind\n- delegate\n- on\n\n## 2. jQuery事件流程图\n\n![jQuery事件流程图](http://images.cnitblog.com/blog/329084/201311/26084505-ee141e573a864f148af28f3cf62b6196.png)","slug":"Jquery源码阅读-二","published":1,"updated":"2016-07-20T02:40:50.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyq2000oycjcyogfv2br","content":"<blockquote>\n<p>jQuery 版本：2.0.3<br>jQuery 源码学习笔记（二）：<br><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h1 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h1><h2 id=\"1-事件绑定接口\"><a href=\"#1-事件绑定接口\" class=\"headerlink\" title=\"1. 事件绑定接口\"></a>1. 事件绑定接口</h2><p><img src=\"http://images.cnitblog.com/blog/329084/201311/25131537-e46635f5fd144ceeb43c1bf8d3516dfc.png\" alt=\"事件绑定接口\"></p>\n<p>jQuery的事件绑定，以click方法为例：</p>\n<ul>\n<li>click</li>\n<li>bind</li>\n<li>delegate</li>\n<li>on</li>\n</ul>\n<h2 id=\"2-jQuery事件流程图\"><a href=\"#2-jQuery事件流程图\" class=\"headerlink\" title=\"2. jQuery事件流程图\"></a>2. jQuery事件流程图</h2><p><img src=\"http://images.cnitblog.com/blog/329084/201311/26084505-ee141e573a864f148af28f3cf62b6196.png\" alt=\"jQuery事件流程图\"></p>\n","excerpt":"","more":"<blockquote>\n<p>jQuery 版本：2.0.3<br>jQuery 源码学习笔记（二）：<br><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\">原文地址</a></p>\n</blockquote>\n<h1 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h1><h2 id=\"1-事件绑定接口\"><a href=\"#1-事件绑定接口\" class=\"headerlink\" title=\"1. 事件绑定接口\"></a>1. 事件绑定接口</h2><p><img src=\"http://images.cnitblog.com/blog/329084/201311/25131537-e46635f5fd144ceeb43c1bf8d3516dfc.png\" alt=\"事件绑定接口\"></p>\n<p>jQuery的事件绑定，以click方法为例：</p>\n<ul>\n<li>click</li>\n<li>bind</li>\n<li>delegate</li>\n<li>on</li>\n</ul>\n<h2 id=\"2-jQuery事件流程图\"><a href=\"#2-jQuery事件流程图\" class=\"headerlink\" title=\"2. jQuery事件流程图\"></a>2. jQuery事件流程图</h2><p><img src=\"http://images.cnitblog.com/blog/329084/201311/26084505-ee141e573a864f148af28f3cf62b6196.png\" alt=\"jQuery事件流程图\"></p>\n"},{"title":"Markdown语法总结","date":"2015-10-23T05:45:12.000Z","_content":"\n## 特殊字符自动转换\n------------------------\n> &字符\n> <字符\n\n## 区块元素\n------------------------\n\n- 段落和换行\n\n- 标题\n\n>类Setext形式\n``` bash\nThis is an H1\n=============\nThis is an H2\n=============\n```\n\n>类Atx形式\n``` bash\n# 这是H1\n## 这是H2\n```\n- 区块引用\n\n- 代码区块\n\n- 分割线\n\n\n## 区段元素\n------------------------\n\n- 链接\n这是[我的blog](http://www.cherishhsieh.com)\n\n- 强调\n**文本区域**\n\n- 代码\nUse the `printf()` function\n\n- 图片\n![Alt text](https://avatars2.githubusercontent.com/u/6762420?v=3&s=460)\n\n## 其他\n------------------------\n\n- 自动链接\n<http://www.cherishhsieh.com>\n<xieqin1991@gmail.com>\n\n- 反斜杠\n\\*literal asterisks\\*\n>\\   反斜线\n>`   反引号\n>\\*   星号\n>_   底线\n>{}  花括号\n>[]  方括号\n>()  括弧\n>\\#   井字号\n>\\+   加号\n>\\-   减号\n>.   英文句点\n>!   惊叹号","source":"_posts/Markdown语法总结.md","raw":"---\ntitle: Markdown语法总结\ndate: 2015-10-23 13:45:12\ntags: Markdown\ncategories: Markdown\n---\n\n## 特殊字符自动转换\n------------------------\n> &字符\n> <字符\n\n## 区块元素\n------------------------\n\n- 段落和换行\n\n- 标题\n\n>类Setext形式\n``` bash\nThis is an H1\n=============\nThis is an H2\n=============\n```\n\n>类Atx形式\n``` bash\n# 这是H1\n## 这是H2\n```\n- 区块引用\n\n- 代码区块\n\n- 分割线\n\n\n## 区段元素\n------------------------\n\n- 链接\n这是[我的blog](http://www.cherishhsieh.com)\n\n- 强调\n**文本区域**\n\n- 代码\nUse the `printf()` function\n\n- 图片\n![Alt text](https://avatars2.githubusercontent.com/u/6762420?v=3&s=460)\n\n## 其他\n------------------------\n\n- 自动链接\n<http://www.cherishhsieh.com>\n<xieqin1991@gmail.com>\n\n- 反斜杠\n\\*literal asterisks\\*\n>\\   反斜线\n>`   反引号\n>\\*   星号\n>_   底线\n>{}  花括号\n>[]  方括号\n>()  括弧\n>\\#   井字号\n>\\+   加号\n>\\-   减号\n>.   英文句点\n>!   惊叹号","slug":"Markdown语法总结","published":1,"updated":"2016-07-20T02:40:50.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyq4000rycjcxu0xhgiy","content":"<h2 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h2><hr>\n<blockquote>\n<p>&amp;字符<br>&lt;字符</p>\n</blockquote>\n<h2 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h2><hr>\n<ul>\n<li><p>段落和换行</p>\n</li>\n<li><p>标题</p>\n</li>\n</ul>\n<blockquote>\n<p>类Setext形式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">This is an H1</div><div class=\"line\">=============</div><div class=\"line\">This is an H2</div><div class=\"line\">=============</div></pre></td></tr></table></figure></p>\n<p>类Atx形式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这是H1</span></div><div class=\"line\"><span class=\"comment\">## 这是H2</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><p>区块引用</p>\n</li>\n<li><p>代码区块</p>\n</li>\n<li><p>分割线</p>\n</li>\n</ul>\n<h2 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h2><hr>\n<ul>\n<li><p>链接<br>这是<a href=\"http://www.cherishhsieh.com\">我的blog</a></p>\n</li>\n<li><p>强调<br><strong>文本区域</strong></p>\n</li>\n<li><p>代码<br>Use the <code>printf()</code> function</p>\n</li>\n<li><p>图片<br><img src=\"https://avatars2.githubusercontent.com/u/6762420?v=3&amp;s=460\" alt=\"Alt text\"></p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><p>自动链接<br><a href=\"http://www.cherishhsieh.com\">http://www.cherishhsieh.com</a><br><a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x78;&#105;&#101;&#113;&#105;&#110;&#49;&#57;&#x39;&#49;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#x78;&#105;&#101;&#113;&#105;&#110;&#49;&#57;&#x39;&#49;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>\n</li>\n<li><p>反斜杠<br>*literal asterisks*</p>\n<blockquote>\n<p>\\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h2><hr>\n<blockquote>\n<p>&amp;字符<br>&lt;字符</p>\n</blockquote>\n<h2 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h2><hr>\n<ul>\n<li><p>段落和换行</p>\n</li>\n<li><p>标题</p>\n</li>\n</ul>\n<blockquote>\n<p>类Setext形式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">This is an H1</div><div class=\"line\">=============</div><div class=\"line\">This is an H2</div><div class=\"line\">=============</div></pre></td></tr></table></figure></p>\n<p>类Atx形式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这是H1</span></div><div class=\"line\"><span class=\"comment\">## 这是H2</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><p>区块引用</p>\n</li>\n<li><p>代码区块</p>\n</li>\n<li><p>分割线</p>\n</li>\n</ul>\n<h2 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h2><hr>\n<ul>\n<li><p>链接<br>这是<a href=\"http://www.cherishhsieh.com\">我的blog</a></p>\n</li>\n<li><p>强调<br><strong>文本区域</strong></p>\n</li>\n<li><p>代码<br>Use the <code>printf()</code> function</p>\n</li>\n<li><p>图片<br><img src=\"https://avatars2.githubusercontent.com/u/6762420?v=3&amp;s=460\" alt=\"Alt text\"></p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><p>自动链接<br><a href=\"http://www.cherishhsieh.com\">http://www.cherishhsieh.com</a><br><a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x78;&#105;&#101;&#113;&#105;&#110;&#49;&#57;&#x39;&#49;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#x78;&#105;&#101;&#113;&#105;&#110;&#49;&#57;&#x39;&#49;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>\n</li>\n<li><p>反斜杠<br>*literal asterisks*</p>\n<blockquote>\n<p>\\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Redux学习总结","date":"2016-06-15T07:01:17.000Z","_content":"\n![Redux流程图](https://camo.githubusercontent.com/76224d874f32535aa62c0cd01750fb71fb02cf53/687474703a2f2f70362e7168696d672e636f6d2f642f696e6e2f39613331326463632f7265647578466c6f772e706e67)\n\n从Redux的流程图来看，redux的整体思想还是不难理解的\n只是当遇到各种为了同构而设计得较为繁琐的API、为了相对高效率地获得状态树的局部状态而引入的第三方库时，\n难免有些地方迷糊\n因此总结一下学习中的要点，备查\n\n[推荐教程](https://github.com/happypoulp/redux-tutorial)\n[文档](http://redux.js.org/)\n\n# 1. Redux\n\nRedux主要特点：\n- state以单一对象存储在store对象中\n- state只读，state变化时应返回新的state而不是更新原state\n- 使用纯函数reducer执行state更新\n\n>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行\n\n## 1.1 Action\n\naction 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）\n\n```js\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text,\n  }\n}\nstore.dispatch(addTodo(text))\n```\n如果要处理异步 action，需要使用一些中间件。 \nredux-thunks 和 redux-promise 分别是使用异步回调和 Promise 来解决异步 action 的问题\n\n## 1.2 Reducer\n更新state的纯函数，用来执行根据指定 action 来更新 state 的逻辑\n`(previousState, action) => newState`\n`combineReducers(reducers)` 可以把多个 reducer 合并成一个 root reducer\n\n## 1.3 Store\n\nstore 是一个单一对象：\n\n- 管理应用的 state\n- 获取 state `store.getState()`\n- 触发 state 更新 `store.dispatch(action)`\n- 注册 state 变化监听器 `store.subscribe(listener)`\n- 创建store `createStore(reducer, [initialState])`\n\n# 2. Middlewares\ndispatch(action) 是一个同步的过程：执行 reducer 更新 state -> 调用 store 的监听处理函数。\n如果需要在 dispatch 时执行一些异步操作（fetch action data），此时就需要引入 Middleware 解决。\n\n```js\nexport default function thunkMiddleware({ dispatch, getState }) {\n  return next => action =>\n    typeof action === 'function' ? action(dispatch, getState) : next(action)\n}\n```\n`newDispatch = middleware1(middleware2(...(dispatch)...))`\n\n# 3. react-redux\n[react-redux 文档](http://cn.redux.js.org/docs/react-redux/index.html)\n\nAPI:\n\n- `<Provider store>`\n- `connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])`\n\n# 4. 总结\n\n- action是纯声明式的数据结构，提供事件的所有要素\n- reducer是一个匹配函数, 所有的reducer都可以捕捉到action并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回\n- store负责存储状态并可以被react api回调，发布action\n- react-redux, 提供一个Provider和connect\n- Provider是一个普通组件，可以作为顶层app的分发点，传入store属性后，它会将state分发给所有被connect的组件\n- connect是一个科里化函数，先接收两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）\n- mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n- mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。","source":"_posts/Redux学习总结.md","raw":"---\ntitle: Redux学习总结\ndate: 2016-06-15 15:01:17\ntags: Redux\ncategories: React\n---\n\n![Redux流程图](https://camo.githubusercontent.com/76224d874f32535aa62c0cd01750fb71fb02cf53/687474703a2f2f70362e7168696d672e636f6d2f642f696e6e2f39613331326463632f7265647578466c6f772e706e67)\n\n从Redux的流程图来看，redux的整体思想还是不难理解的\n只是当遇到各种为了同构而设计得较为繁琐的API、为了相对高效率地获得状态树的局部状态而引入的第三方库时，\n难免有些地方迷糊\n因此总结一下学习中的要点，备查\n\n[推荐教程](https://github.com/happypoulp/redux-tutorial)\n[文档](http://redux.js.org/)\n\n# 1. Redux\n\nRedux主要特点：\n- state以单一对象存储在store对象中\n- state只读，state变化时应返回新的state而不是更新原state\n- 使用纯函数reducer执行state更新\n\n>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行\n\n## 1.1 Action\n\naction 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）\n\n```js\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text,\n  }\n}\nstore.dispatch(addTodo(text))\n```\n如果要处理异步 action，需要使用一些中间件。 \nredux-thunks 和 redux-promise 分别是使用异步回调和 Promise 来解决异步 action 的问题\n\n## 1.2 Reducer\n更新state的纯函数，用来执行根据指定 action 来更新 state 的逻辑\n`(previousState, action) => newState`\n`combineReducers(reducers)` 可以把多个 reducer 合并成一个 root reducer\n\n## 1.3 Store\n\nstore 是一个单一对象：\n\n- 管理应用的 state\n- 获取 state `store.getState()`\n- 触发 state 更新 `store.dispatch(action)`\n- 注册 state 变化监听器 `store.subscribe(listener)`\n- 创建store `createStore(reducer, [initialState])`\n\n# 2. Middlewares\ndispatch(action) 是一个同步的过程：执行 reducer 更新 state -> 调用 store 的监听处理函数。\n如果需要在 dispatch 时执行一些异步操作（fetch action data），此时就需要引入 Middleware 解决。\n\n```js\nexport default function thunkMiddleware({ dispatch, getState }) {\n  return next => action =>\n    typeof action === 'function' ? action(dispatch, getState) : next(action)\n}\n```\n`newDispatch = middleware1(middleware2(...(dispatch)...))`\n\n# 3. react-redux\n[react-redux 文档](http://cn.redux.js.org/docs/react-redux/index.html)\n\nAPI:\n\n- `<Provider store>`\n- `connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])`\n\n# 4. 总结\n\n- action是纯声明式的数据结构，提供事件的所有要素\n- reducer是一个匹配函数, 所有的reducer都可以捕捉到action并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回\n- store负责存储状态并可以被react api回调，发布action\n- react-redux, 提供一个Provider和connect\n- Provider是一个普通组件，可以作为顶层app的分发点，传入store属性后，它会将state分发给所有被connect的组件\n- connect是一个科里化函数，先接收两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）\n- mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n- mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。","slug":"Redux学习总结","published":1,"updated":"2016-07-20T02:40:51.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyq6000uycjcq943qg07","content":"<p><img src=\"https://camo.githubusercontent.com/76224d874f32535aa62c0cd01750fb71fb02cf53/687474703a2f2f70362e7168696d672e636f6d2f642f696e6e2f39613331326463632f7265647578466c6f772e706e67\" alt=\"Redux流程图\"></p>\n<p>从Redux的流程图来看，redux的整体思想还是不难理解的<br>只是当遇到各种为了同构而设计得较为繁琐的API、为了相对高效率地获得状态树的局部状态而引入的第三方库时，<br>难免有些地方迷糊<br>因此总结一下学习中的要点，备查</p>\n<p><a href=\"https://github.com/happypoulp/redux-tutorial\" target=\"_blank\" rel=\"external\">推荐教程</a><br><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h1 id=\"1-Redux\"><a href=\"#1-Redux\" class=\"headerlink\" title=\"1. Redux\"></a>1. Redux</h1><p>Redux主要特点：</p>\n<ul>\n<li>state以单一对象存储在store对象中</li>\n<li>state只读，state变化时应返回新的state而不是更新原state</li>\n<li>使用纯函数reducer执行state更新</li>\n</ul>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行</p>\n</blockquote>\n<h2 id=\"1-1-Action\"><a href=\"#1-1-Action\" class=\"headerlink\" title=\"1.1 Action\"></a>1.1 Action</h2><p>action 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    type: ADD_TODO,</div><div class=\"line\">    text,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">store.dispatch(addTodo(text))</div></pre></td></tr></table></figure>\n<p>如果要处理异步 action，需要使用一些中间件。<br>redux-thunks 和 redux-promise 分别是使用异步回调和 Promise 来解决异步 action 的问题</p>\n<h2 id=\"1-2-Reducer\"><a href=\"#1-2-Reducer\" class=\"headerlink\" title=\"1.2 Reducer\"></a>1.2 Reducer</h2><p>更新state的纯函数，用来执行根据指定 action 来更新 state 的逻辑<br><code>(previousState, action) =&gt; newState</code><br><code>combineReducers(reducers)</code> 可以把多个 reducer 合并成一个 root reducer</p>\n<h2 id=\"1-3-Store\"><a href=\"#1-3-Store\" class=\"headerlink\" title=\"1.3 Store\"></a>1.3 Store</h2><p>store 是一个单一对象：</p>\n<ul>\n<li>管理应用的 state</li>\n<li>获取 state <code>store.getState()</code></li>\n<li>触发 state 更新 <code>store.dispatch(action)</code></li>\n<li>注册 state 变化监听器 <code>store.subscribe(listener)</code></li>\n<li>创建store <code>createStore(reducer, [initialState])</code></li>\n</ul>\n<h1 id=\"2-Middlewares\"><a href=\"#2-Middlewares\" class=\"headerlink\" title=\"2. Middlewares\"></a>2. Middlewares</h1><p>dispatch(action) 是一个同步的过程：执行 reducer 更新 state -&gt; 调用 store 的监听处理函数。<br>如果需要在 dispatch 时执行一些异步操作（fetch action data），此时就需要引入 Middleware 解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkMiddleware</span>(<span class=\"params\">&#123; dispatch, getState &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> next =&gt; action =&gt;</div><div class=\"line\">    <span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(dispatch, getState) : next(action)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>newDispatch = middleware1(middleware2(...(dispatch)...))</code></p>\n<h1 id=\"3-react-redux\"><a href=\"#3-react-redux\" class=\"headerlink\" title=\"3. react-redux\"></a>3. react-redux</h1><p><a href=\"http://cn.redux.js.org/docs/react-redux/index.html\" target=\"_blank\" rel=\"external\">react-redux 文档</a></p>\n<p>API:</p>\n<ul>\n<li><code>&lt;Provider store&gt;</code></li>\n<li><code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code></li>\n</ul>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><ul>\n<li>action是纯声明式的数据结构，提供事件的所有要素</li>\n<li>reducer是一个匹配函数, 所有的reducer都可以捕捉到action并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回</li>\n<li>store负责存储状态并可以被react api回调，发布action</li>\n<li>react-redux, 提供一个Provider和connect</li>\n<li>Provider是一个普通组件，可以作为顶层app的分发点，传入store属性后，它会将state分发给所有被connect的组件</li>\n<li>connect是一个科里化函数，先接收两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）</li>\n<li>mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</li>\n<li>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://camo.githubusercontent.com/76224d874f32535aa62c0cd01750fb71fb02cf53/687474703a2f2f70362e7168696d672e636f6d2f642f696e6e2f39613331326463632f7265647578466c6f772e706e67\" alt=\"Redux流程图\"></p>\n<p>从Redux的流程图来看，redux的整体思想还是不难理解的<br>只是当遇到各种为了同构而设计得较为繁琐的API、为了相对高效率地获得状态树的局部状态而引入的第三方库时，<br>难免有些地方迷糊<br>因此总结一下学习中的要点，备查</p>\n<p><a href=\"https://github.com/happypoulp/redux-tutorial\">推荐教程</a><br><a href=\"http://redux.js.org/\">文档</a></p>\n<h1 id=\"1-Redux\"><a href=\"#1-Redux\" class=\"headerlink\" title=\"1. Redux\"></a>1. Redux</h1><p>Redux主要特点：</p>\n<ul>\n<li>state以单一对象存储在store对象中</li>\n<li>state只读，state变化时应返回新的state而不是更新原state</li>\n<li>使用纯函数reducer执行state更新</li>\n</ul>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行</p>\n</blockquote>\n<h2 id=\"1-1-Action\"><a href=\"#1-1-Action\" class=\"headerlink\" title=\"1.1 Action\"></a>1.1 Action</h2><p>action 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    type: ADD_TODO,</div><div class=\"line\">    text,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">store.dispatch(addTodo(text))</div></pre></td></tr></table></figure>\n<p>如果要处理异步 action，需要使用一些中间件。<br>redux-thunks 和 redux-promise 分别是使用异步回调和 Promise 来解决异步 action 的问题</p>\n<h2 id=\"1-2-Reducer\"><a href=\"#1-2-Reducer\" class=\"headerlink\" title=\"1.2 Reducer\"></a>1.2 Reducer</h2><p>更新state的纯函数，用来执行根据指定 action 来更新 state 的逻辑<br><code>(previousState, action) =&gt; newState</code><br><code>combineReducers(reducers)</code> 可以把多个 reducer 合并成一个 root reducer</p>\n<h2 id=\"1-3-Store\"><a href=\"#1-3-Store\" class=\"headerlink\" title=\"1.3 Store\"></a>1.3 Store</h2><p>store 是一个单一对象：</p>\n<ul>\n<li>管理应用的 state</li>\n<li>获取 state <code>store.getState()</code></li>\n<li>触发 state 更新 <code>store.dispatch(action)</code></li>\n<li>注册 state 变化监听器 <code>store.subscribe(listener)</code></li>\n<li>创建store <code>createStore(reducer, [initialState])</code></li>\n</ul>\n<h1 id=\"2-Middlewares\"><a href=\"#2-Middlewares\" class=\"headerlink\" title=\"2. Middlewares\"></a>2. Middlewares</h1><p>dispatch(action) 是一个同步的过程：执行 reducer 更新 state -&gt; 调用 store 的监听处理函数。<br>如果需要在 dispatch 时执行一些异步操作（fetch action data），此时就需要引入 Middleware 解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkMiddleware</span>(<span class=\"params\">&#123; dispatch, getState &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> next =&gt; action =&gt;</div><div class=\"line\">    <span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(dispatch, getState) : next(action)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>newDispatch = middleware1(middleware2(...(dispatch)...))</code></p>\n<h1 id=\"3-react-redux\"><a href=\"#3-react-redux\" class=\"headerlink\" title=\"3. react-redux\"></a>3. react-redux</h1><p><a href=\"http://cn.redux.js.org/docs/react-redux/index.html\">react-redux 文档</a></p>\n<p>API:</p>\n<ul>\n<li><code>&lt;Provider store&gt;</code></li>\n<li><code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code></li>\n</ul>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><ul>\n<li>action是纯声明式的数据结构，提供事件的所有要素</li>\n<li>reducer是一个匹配函数, 所有的reducer都可以捕捉到action并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回</li>\n<li>store负责存储状态并可以被react api回调，发布action</li>\n<li>react-redux, 提供一个Provider和connect</li>\n<li>Provider是一个普通组件，可以作为顶层app的分发点，传入store属性后，它会将state分发给所有被connect的组件</li>\n<li>connect是一个科里化函数，先接收两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）</li>\n<li>mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</li>\n<li>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。</li>\n</ul>\n"},{"title":"React-Nactive学习总结","date":"2016-06-11T08:49:01.000Z","_content":"\n[文档](https://facebook.github.io/react-native/docs/getting-started.html)\n\n# 个人学习demo\n[react-native-learning-starter](https://github.com/xieQin/react-native-learning-starter)\n\nAndroid app\n\n主要实现的功能：\n- splash页\n- 抽屉导航\n- 带网络请求的ListView\n- 界面切换及Android 返回按钮控制\n- 下拉刷新\n\n# 总体感受\n如果只是用来实现简单的列表页+详情页，对于不熟悉Native开发的Web前端技术人员来说，React Native还是能很好地完成需求的，网络请求、UI视图交互、页面跳转均提供了很好的支持\n\n但是如果需要使用PackageManager,ActivityManager等组件的话，就需要通过React Native和Native混合开发了\n个人觉得对于实现复杂的应用来说，目前的RN社区还是缺乏一些高质量的组件，在找不到好用的组件的情况下，或者说大部分组件拿来后都要大修大改的情况下，实现 App 的效率其实非常低，大家都在忙着做一些基础的控件，很多东西都没有打磨好\n\n# 环境配置及安装\n依照[教程](https://facebook.github.io/react-native/docs/getting-started.html)安装即可\n","source":"_posts/React-Nactive学习总结.md","raw":"---\ntitle: React-Nactive学习总结\ndate: 2016-06-11 16:49:01\ntags: React-Native\ncategories: React\n---\n\n[文档](https://facebook.github.io/react-native/docs/getting-started.html)\n\n# 个人学习demo\n[react-native-learning-starter](https://github.com/xieQin/react-native-learning-starter)\n\nAndroid app\n\n主要实现的功能：\n- splash页\n- 抽屉导航\n- 带网络请求的ListView\n- 界面切换及Android 返回按钮控制\n- 下拉刷新\n\n# 总体感受\n如果只是用来实现简单的列表页+详情页，对于不熟悉Native开发的Web前端技术人员来说，React Native还是能很好地完成需求的，网络请求、UI视图交互、页面跳转均提供了很好的支持\n\n但是如果需要使用PackageManager,ActivityManager等组件的话，就需要通过React Native和Native混合开发了\n个人觉得对于实现复杂的应用来说，目前的RN社区还是缺乏一些高质量的组件，在找不到好用的组件的情况下，或者说大部分组件拿来后都要大修大改的情况下，实现 App 的效率其实非常低，大家都在忙着做一些基础的控件，很多东西都没有打磨好\n\n# 环境配置及安装\n依照[教程](https://facebook.github.io/react-native/docs/getting-started.html)安装即可\n","slug":"React-Nactive学习总结","published":1,"updated":"2016-07-20T02:40:51.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqa000yycjcbz9alw3g","content":"<p><a href=\"https://facebook.github.io/react-native/docs/getting-started.html\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h1 id=\"个人学习demo\"><a href=\"#个人学习demo\" class=\"headerlink\" title=\"个人学习demo\"></a>个人学习demo</h1><p><a href=\"https://github.com/xieQin/react-native-learning-starter\" target=\"_blank\" rel=\"external\">react-native-learning-starter</a></p>\n<p>Android app</p>\n<p>主要实现的功能：</p>\n<ul>\n<li>splash页</li>\n<li>抽屉导航</li>\n<li>带网络请求的ListView</li>\n<li>界面切换及Android 返回按钮控制</li>\n<li>下拉刷新</li>\n</ul>\n<h1 id=\"总体感受\"><a href=\"#总体感受\" class=\"headerlink\" title=\"总体感受\"></a>总体感受</h1><p>如果只是用来实现简单的列表页+详情页，对于不熟悉Native开发的Web前端技术人员来说，React Native还是能很好地完成需求的，网络请求、UI视图交互、页面跳转均提供了很好的支持</p>\n<p>但是如果需要使用PackageManager,ActivityManager等组件的话，就需要通过React Native和Native混合开发了<br>个人觉得对于实现复杂的应用来说，目前的RN社区还是缺乏一些高质量的组件，在找不到好用的组件的情况下，或者说大部分组件拿来后都要大修大改的情况下，实现 App 的效率其实非常低，大家都在忙着做一些基础的控件，很多东西都没有打磨好</p>\n<h1 id=\"环境配置及安装\"><a href=\"#环境配置及安装\" class=\"headerlink\" title=\"环境配置及安装\"></a>环境配置及安装</h1><p>依照<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\" target=\"_blank\" rel=\"external\">教程</a>安装即可</p>\n","excerpt":"","more":"<p><a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">文档</a></p>\n<h1 id=\"个人学习demo\"><a href=\"#个人学习demo\" class=\"headerlink\" title=\"个人学习demo\"></a>个人学习demo</h1><p><a href=\"https://github.com/xieQin/react-native-learning-starter\">react-native-learning-starter</a></p>\n<p>Android app</p>\n<p>主要实现的功能：</p>\n<ul>\n<li>splash页</li>\n<li>抽屉导航</li>\n<li>带网络请求的ListView</li>\n<li>界面切换及Android 返回按钮控制</li>\n<li>下拉刷新</li>\n</ul>\n<h1 id=\"总体感受\"><a href=\"#总体感受\" class=\"headerlink\" title=\"总体感受\"></a>总体感受</h1><p>如果只是用来实现简单的列表页+详情页，对于不熟悉Native开发的Web前端技术人员来说，React Native还是能很好地完成需求的，网络请求、UI视图交互、页面跳转均提供了很好的支持</p>\n<p>但是如果需要使用PackageManager,ActivityManager等组件的话，就需要通过React Native和Native混合开发了<br>个人觉得对于实现复杂的应用来说，目前的RN社区还是缺乏一些高质量的组件，在找不到好用的组件的情况下，或者说大部分组件拿来后都要大修大改的情况下，实现 App 的效率其实非常低，大家都在忙着做一些基础的控件，很多东西都没有打磨好</p>\n<h1 id=\"环境配置及安装\"><a href=\"#环境配置及安装\" class=\"headerlink\" title=\"环境配置及安装\"></a>环境配置及安装</h1><p>依照<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">教程</a>安装即可</p>\n"},{"title":"React学习总结","date":"2015-11-15T07:01:07.000Z","_content":"\n[文档](http://reactjs.cn/react/docs/getting-started.html)\n[个人学习demo](https://github.com/xieQin/react-learning/tree/master/tutorial)\n\nReact 主要概念：\n- 组件\n- JSX\n- Virtual DOM\n- Data Flow\n\n```js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass HelloMessage extends Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\n// 加载组件到 DOM 元素 mountNode\nrender(<HelloMessage name=\"John\" />, mountNode);\n```\n\n# 组件生命周期\n\n- `componentWillMount`\n- `componentDidMount`\n- `componentWillReceiveProps`\n- `shouldComponentUpdate`\n- `componentWillUpdate`\n- `componentDidUpdate`\n- `componentWillUnmount`\n\n一个简单例子：\n```js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass LikeButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n  handleClick(e) {\n    this.setState({ liked: !this.state.liked });\n  }\n\n  render() {\n    const text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      <p onClick={this.handleClick.bind(this)}>\n          You {text} this. Click to toggle.\n      </p>\n    );\n  }\n}\n\nrender(\n    <LikeButton />,\n    document.getElementById('example')\n);\n```","source":"_posts/React学习总结.md","raw":"---\ntitle: React学习总结\ndate: 2015-11-15 15:01:07\ntags: React\ncategories: React\n---\n\n[文档](http://reactjs.cn/react/docs/getting-started.html)\n[个人学习demo](https://github.com/xieQin/react-learning/tree/master/tutorial)\n\nReact 主要概念：\n- 组件\n- JSX\n- Virtual DOM\n- Data Flow\n\n```js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass HelloMessage extends Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\n// 加载组件到 DOM 元素 mountNode\nrender(<HelloMessage name=\"John\" />, mountNode);\n```\n\n# 组件生命周期\n\n- `componentWillMount`\n- `componentDidMount`\n- `componentWillReceiveProps`\n- `shouldComponentUpdate`\n- `componentWillUpdate`\n- `componentDidUpdate`\n- `componentWillUnmount`\n\n一个简单例子：\n```js\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass LikeButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n  handleClick(e) {\n    this.setState({ liked: !this.state.liked });\n  }\n\n  render() {\n    const text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      <p onClick={this.handleClick.bind(this)}>\n          You {text} this. Click to toggle.\n      </p>\n    );\n  }\n}\n\nrender(\n    <LikeButton />,\n    document.getElementById('example')\n);\n```","slug":"React学习总结","published":1,"updated":"2016-07-20T02:40:51.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqd000zycjcsu5nmsuf","content":"<p><a href=\"http://reactjs.cn/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">文档</a><br><a href=\"https://github.com/xieQin/react-learning/tree/master/tutorial\" target=\"_blank\" rel=\"external\">个人学习demo</a></p>\n<p>React 主要概念：</p>\n<ul>\n<li>组件</li>\n<li>JSX</li>\n<li>Virtual DOM</li>\n<li>Data Flow</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloMessage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加载组件到 DOM 元素 mountNode</span></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"John\"</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<h1 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h1><ul>\n<li><code>componentWillMount</code></li>\n<li><code>componentDidMount</code></li>\n<li><code>componentWillReceiveProps</code></li>\n<li><code>shouldComponentUpdate</code></li>\n<li><code>componentWillUpdate</code></li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code></li>\n</ul>\n<p>一个简单例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikeButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; liked: <span class=\"literal\">false</span> &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleClick(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; liked: !<span class=\"keyword\">this</span>.state.liked &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">this</span>.state.liked ? <span class=\"string\">'like'</span> : <span class=\"string\">'haven\\'t liked'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span></div><div class=\"line\">          You &#123;text&#125; this. Click to toggle.</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LikeButton</span> /&gt;</span>,</span></div><div class=\"line\">    document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><a href=\"http://reactjs.cn/react/docs/getting-started.html\">文档</a><br><a href=\"https://github.com/xieQin/react-learning/tree/master/tutorial\">个人学习demo</a></p>\n<p>React 主要概念：</p>\n<ul>\n<li>组件</li>\n<li>JSX</li>\n<li>Virtual DOM</li>\n<li>Data Flow</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloMessage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加载组件到 DOM 元素 mountNode</span></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"John\"</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<h1 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h1><ul>\n<li><code>componentWillMount</code></li>\n<li><code>componentDidMount</code></li>\n<li><code>componentWillReceiveProps</code></li>\n<li><code>shouldComponentUpdate</code></li>\n<li><code>componentWillUpdate</code></li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code></li>\n</ul>\n<p>一个简单例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikeButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; liked: <span class=\"literal\">false</span> &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleClick(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; liked: !<span class=\"keyword\">this</span>.state.liked &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">this</span>.state.liked ? <span class=\"string\">'like'</span> : <span class=\"string\">'haven\\'t liked'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></div><div class=\"line\">          You &#123;text&#125; this. Click to toggle.</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LikeButton</span> /&gt;</span>,</div><div class=\"line\">    document.getElementById('example')</div><div class=\"line\">);</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Touch手势","date":"2015-04-04T03:18:54.000Z","_content":"\n## 常见问题\n>- 带延迟的事件分发机制：鼠标事件\n>- Mousemove无法追踪\n\n## 点击延迟\n```js\nvar startX,\n    startY,\n    tap;\n\nfunction getCoord(e, c) {\n    return /touch/.test(e.type) ? (e.originalEvent || e).changedTouches[0]['page' + c] : e['page' + c];\n}\n\nfunction setTap() {\n    tap = true;\n    setTimeout(function () {\n        tap = false;\n    }, 500);\n}\n\nelement.on('touchstart', function (ev) {\n    startX = getCoord(ev, 'X');\n    startY = getCoord(ev, 'Y');\n}).on('touchend', function (ev) {\n    // If movement is less than 20px, execute the handler\n    if (Math.abs(getCoord(ev, 'X') - startX) < 20 && Math.abs(getCoord(ev, 'Y') - startY) < 20) {\n        // Prevent emulated mouse events\n        ev.preventDefault();\n        handler.call(this, ev);\n    }\n    setTap();\n}).on('click', function (ev) {\n    if (!tap) {\n        // If handler was not called on touchend, call it on click;\n        handler.call(this, ev);\n    }\n    ev.preventDefault();\n});\n```\n\n## Touch事件\n>- Point\n>- Tap\n>- Press and Hold\n>- Slide\n>- Swipe\n>- Pinch and Stretch\n>- Turn\n\n```js\nvar touch,\n    action,\n    diffX,\n    diffY,\n    endX,\n    endY,\n    scroll,\n    sort,\n    startX,\n    startY,\n    swipe,\n\nfunction testTouch(e) {\n    if (e.type == 'touchstart') {\n        touch = true;\n    } else if (touch) {\n        touch = false;\n        return false;\n    }\n    return true;\n}\n\nfunction onStart(ev) {\n    if (testTouch(ev) && !action) {\n        action = true;\n\n        startX = getCoord(ev, 'X');\n        startY = getCoord(ev, 'Y');\n        diffX = 0;\n        diffY = 0;\n\n        sortTimer = setTimeout(function () {\n            sort = true;\n        }, 200);\n\n        if (ev.type == 'mousedown') {\n            $(document).on('mousemove', onMove).on('mouseup', onEnd);\n        }\n    }\n}\n\nfunction onMove(ev) {\n    if (action) {\n        endX = getCoord(ev, 'X');\n        endY = getCoord(ev, 'Y');\n        diffX = endX - startX;\n        diffY = endY - startY;\n\n        if (!sort && !swipe && !scroll) {\n            if (Math.abs(diffY) > 10) { // It's a scroll\n                scroll = true;\n                // Android 4.0 will not fire touchend event\n                $(this).trigger('touchend');\n            } else if (Math.abs(diffX) > 7) { // It's a swipe\n                swipe = true;\n            }\n        }\n\n        if (swipe) {\n            ev.preventDefault(); // Kill page scroll\n            // Handle swipe\n            // ...\n        }\n\n        if (sort) {\n            ev.preventDefault(); // Kill page scroll\n            // Handle sort\n            // ....\n        }\n\n        if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n            clearTimeout(sortTimer);\n        }\n    }\n}\n\nfunction onEnd(ev) {\n    if (action) {\n        action = false;\n\n        if (swipe) {\n            // Handle swipe end\n            // ...\n        } else if (sort) {\n            // Handle sort end\n            // ...\n        } else if (!scroll && Math.abs(diffX) < 5 && Math.abs(diffY) < 5) { // Tap\n            if (ev.type === 'touchend') { // Prevent phantom clicks\n                ev.preventDefault();\n            }\n            // Handle tap\n            // ...\n        }\n\n        swipe = false;\n        sort = false;\n        scroll = false;\n\n        clearTimeout(sortTimer);\n\n        if (ev.type == 'mouseup') {\n            $(document).off('mousemove', onMove).off('mouseup', onEnd);\n        }\n    }\n}\n\nelement\n    .on('touchstart mousedown', onStart)\n    .on('touchmove', onMove)\n    .on('touchend touchcancel', onEnd)\n```","source":"_posts/Touch手势.md","raw":"---\ntitle: Touch手势\ndate: 2015-04-04 11:18:54\ntags: Javascript\ncategories: 前端\n---\n\n## 常见问题\n>- 带延迟的事件分发机制：鼠标事件\n>- Mousemove无法追踪\n\n## 点击延迟\n```js\nvar startX,\n    startY,\n    tap;\n\nfunction getCoord(e, c) {\n    return /touch/.test(e.type) ? (e.originalEvent || e).changedTouches[0]['page' + c] : e['page' + c];\n}\n\nfunction setTap() {\n    tap = true;\n    setTimeout(function () {\n        tap = false;\n    }, 500);\n}\n\nelement.on('touchstart', function (ev) {\n    startX = getCoord(ev, 'X');\n    startY = getCoord(ev, 'Y');\n}).on('touchend', function (ev) {\n    // If movement is less than 20px, execute the handler\n    if (Math.abs(getCoord(ev, 'X') - startX) < 20 && Math.abs(getCoord(ev, 'Y') - startY) < 20) {\n        // Prevent emulated mouse events\n        ev.preventDefault();\n        handler.call(this, ev);\n    }\n    setTap();\n}).on('click', function (ev) {\n    if (!tap) {\n        // If handler was not called on touchend, call it on click;\n        handler.call(this, ev);\n    }\n    ev.preventDefault();\n});\n```\n\n## Touch事件\n>- Point\n>- Tap\n>- Press and Hold\n>- Slide\n>- Swipe\n>- Pinch and Stretch\n>- Turn\n\n```js\nvar touch,\n    action,\n    diffX,\n    diffY,\n    endX,\n    endY,\n    scroll,\n    sort,\n    startX,\n    startY,\n    swipe,\n\nfunction testTouch(e) {\n    if (e.type == 'touchstart') {\n        touch = true;\n    } else if (touch) {\n        touch = false;\n        return false;\n    }\n    return true;\n}\n\nfunction onStart(ev) {\n    if (testTouch(ev) && !action) {\n        action = true;\n\n        startX = getCoord(ev, 'X');\n        startY = getCoord(ev, 'Y');\n        diffX = 0;\n        diffY = 0;\n\n        sortTimer = setTimeout(function () {\n            sort = true;\n        }, 200);\n\n        if (ev.type == 'mousedown') {\n            $(document).on('mousemove', onMove).on('mouseup', onEnd);\n        }\n    }\n}\n\nfunction onMove(ev) {\n    if (action) {\n        endX = getCoord(ev, 'X');\n        endY = getCoord(ev, 'Y');\n        diffX = endX - startX;\n        diffY = endY - startY;\n\n        if (!sort && !swipe && !scroll) {\n            if (Math.abs(diffY) > 10) { // It's a scroll\n                scroll = true;\n                // Android 4.0 will not fire touchend event\n                $(this).trigger('touchend');\n            } else if (Math.abs(diffX) > 7) { // It's a swipe\n                swipe = true;\n            }\n        }\n\n        if (swipe) {\n            ev.preventDefault(); // Kill page scroll\n            // Handle swipe\n            // ...\n        }\n\n        if (sort) {\n            ev.preventDefault(); // Kill page scroll\n            // Handle sort\n            // ....\n        }\n\n        if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n            clearTimeout(sortTimer);\n        }\n    }\n}\n\nfunction onEnd(ev) {\n    if (action) {\n        action = false;\n\n        if (swipe) {\n            // Handle swipe end\n            // ...\n        } else if (sort) {\n            // Handle sort end\n            // ...\n        } else if (!scroll && Math.abs(diffX) < 5 && Math.abs(diffY) < 5) { // Tap\n            if (ev.type === 'touchend') { // Prevent phantom clicks\n                ev.preventDefault();\n            }\n            // Handle tap\n            // ...\n        }\n\n        swipe = false;\n        sort = false;\n        scroll = false;\n\n        clearTimeout(sortTimer);\n\n        if (ev.type == 'mouseup') {\n            $(document).off('mousemove', onMove).off('mouseup', onEnd);\n        }\n    }\n}\n\nelement\n    .on('touchstart mousedown', onStart)\n    .on('touchmove', onMove)\n    .on('touchend touchcancel', onEnd)\n```","slug":"Touch手势","published":1,"updated":"2016-07-20T02:40:51.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqg0011ycjcgylr5g29","content":"<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><blockquote>\n<ul>\n<li>带延迟的事件分发机制：鼠标事件</li>\n<li>Mousemove无法追踪</li>\n</ul>\n</blockquote>\n<h2 id=\"点击延迟\"><a href=\"#点击延迟\" class=\"headerlink\" title=\"点击延迟\"></a>点击延迟</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> startX,</div><div class=\"line\">    startY,</div><div class=\"line\">    tap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCoord</span>(<span class=\"params\">e, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/touch/</span>.test(e.type) ? (e.originalEvent || e).changedTouches[<span class=\"number\">0</span>][<span class=\"string\">'page'</span> + c] : e[<span class=\"string\">'page'</span> + c];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    tap = <span class=\"literal\">true</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        tap = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">element.on(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    startX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">    startY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">&#125;).on(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If movement is less than 20px, execute the handler</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(getCoord(ev, <span class=\"string\">'X'</span>) - startX) &lt; <span class=\"number\">20</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(getCoord(ev, <span class=\"string\">'Y'</span>) - startY) &lt; <span class=\"number\">20</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Prevent emulated mouse events</span></div><div class=\"line\">        ev.preventDefault();</div><div class=\"line\">        handler.call(<span class=\"keyword\">this</span>, ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    setTap();</div><div class=\"line\">&#125;).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!tap) &#123;</div><div class=\"line\">        <span class=\"comment\">// If handler was not called on touchend, call it on click;</span></div><div class=\"line\">        handler.call(<span class=\"keyword\">this</span>, ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ev.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Touch事件\"><a href=\"#Touch事件\" class=\"headerlink\" title=\"Touch事件\"></a>Touch事件</h2><blockquote>\n<ul>\n<li>Point</li>\n<li>Tap</li>\n<li>Press and Hold</li>\n<li>Slide</li>\n<li>Swipe</li>\n<li>Pinch and Stretch</li>\n<li>Turn</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> touch,</div><div class=\"line\">    action,</div><div class=\"line\">    diffX,</div><div class=\"line\">    diffY,</div><div class=\"line\">    endX,</div><div class=\"line\">    endY,</div><div class=\"line\">    scroll,</div><div class=\"line\">    sort,</div><div class=\"line\">    startX,</div><div class=\"line\">    startY,</div><div class=\"line\">    swipe,</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testTouch</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.type == <span class=\"string\">'touchstart'</span>) &#123;</div><div class=\"line\">        touch = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (touch) &#123;</div><div class=\"line\">        touch = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onStart</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (testTouch(ev) &amp;&amp; !action) &#123;</div><div class=\"line\">        action = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        startX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">        startY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">        diffX = <span class=\"number\">0</span>;</div><div class=\"line\">        diffY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        sortTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            sort = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;, <span class=\"number\">200</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.type == <span class=\"string\">'mousedown'</span>) &#123;</div><div class=\"line\">            $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousemove'</span>, onMove).on(<span class=\"string\">'mouseup'</span>, onEnd);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMove</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action) &#123;</div><div class=\"line\">        endX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">        endY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">        diffX = endX - startX;</div><div class=\"line\">        diffY = endY - startY;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!sort &amp;&amp; !swipe &amp;&amp; !scroll) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffY) &gt; <span class=\"number\">10</span>) &#123; <span class=\"comment\">// It's a scroll</span></div><div class=\"line\">                scroll = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"comment\">// Android 4.0 will not fire touchend event</span></div><div class=\"line\">                $(<span class=\"keyword\">this</span>).trigger(<span class=\"string\">'touchend'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffX) &gt; <span class=\"number\">7</span>) &#123; <span class=\"comment\">// It's a swipe</span></div><div class=\"line\">                swipe = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (swipe) &#123;</div><div class=\"line\">            ev.preventDefault(); <span class=\"comment\">// Kill page scroll</span></div><div class=\"line\">            <span class=\"comment\">// Handle swipe</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (sort) &#123;</div><div class=\"line\">            ev.preventDefault(); <span class=\"comment\">// Kill page scroll</span></div><div class=\"line\">            <span class=\"comment\">// Handle sort</span></div><div class=\"line\">            <span class=\"comment\">// ....</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffX) &gt; <span class=\"number\">5</span> || <span class=\"built_in\">Math</span>.abs(diffY) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">            clearTimeout(sortTimer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEnd</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action) &#123;</div><div class=\"line\">        action = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (swipe) &#123;</div><div class=\"line\">            <span class=\"comment\">// Handle swipe end</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sort) &#123;</div><div class=\"line\">            <span class=\"comment\">// Handle sort end</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!scroll &amp;&amp; <span class=\"built_in\">Math</span>.abs(diffX) &lt; <span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(diffY) &lt; <span class=\"number\">5</span>) &#123; <span class=\"comment\">// Tap</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (ev.type === <span class=\"string\">'touchend'</span>) &#123; <span class=\"comment\">// Prevent phantom clicks</span></div><div class=\"line\">                ev.preventDefault();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// Handle tap</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        swipe = <span class=\"literal\">false</span>;</div><div class=\"line\">        sort = <span class=\"literal\">false</span>;</div><div class=\"line\">        scroll = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        clearTimeout(sortTimer);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.type == <span class=\"string\">'mouseup'</span>) &#123;</div><div class=\"line\">            $(<span class=\"built_in\">document</span>).off(<span class=\"string\">'mousemove'</span>, onMove).off(<span class=\"string\">'mouseup'</span>, onEnd);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">element</div><div class=\"line\">    .on(<span class=\"string\">'touchstart mousedown'</span>, onStart)</div><div class=\"line\">    .on(<span class=\"string\">'touchmove'</span>, onMove)</div><div class=\"line\">    .on(<span class=\"string\">'touchend touchcancel'</span>, onEnd)</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><blockquote>\n<ul>\n<li>带延迟的事件分发机制：鼠标事件</li>\n<li>Mousemove无法追踪</li>\n</ul>\n</blockquote>\n<h2 id=\"点击延迟\"><a href=\"#点击延迟\" class=\"headerlink\" title=\"点击延迟\"></a>点击延迟</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> startX,</div><div class=\"line\">    startY,</div><div class=\"line\">    tap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCoord</span>(<span class=\"params\">e, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/touch/</span>.test(e.type) ? (e.originalEvent || e).changedTouches[<span class=\"number\">0</span>][<span class=\"string\">'page'</span> + c] : e[<span class=\"string\">'page'</span> + c];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    tap = <span class=\"literal\">true</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        tap = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">element.on(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    startX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">    startY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">&#125;).on(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If movement is less than 20px, execute the handler</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(getCoord(ev, <span class=\"string\">'X'</span>) - startX) &lt; <span class=\"number\">20</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(getCoord(ev, <span class=\"string\">'Y'</span>) - startY) &lt; <span class=\"number\">20</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Prevent emulated mouse events</span></div><div class=\"line\">        ev.preventDefault();</div><div class=\"line\">        handler.call(<span class=\"keyword\">this</span>, ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    setTap();</div><div class=\"line\">&#125;).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!tap) &#123;</div><div class=\"line\">        <span class=\"comment\">// If handler was not called on touchend, call it on click;</span></div><div class=\"line\">        handler.call(<span class=\"keyword\">this</span>, ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ev.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Touch事件\"><a href=\"#Touch事件\" class=\"headerlink\" title=\"Touch事件\"></a>Touch事件</h2><blockquote>\n<ul>\n<li>Point</li>\n<li>Tap</li>\n<li>Press and Hold</li>\n<li>Slide</li>\n<li>Swipe</li>\n<li>Pinch and Stretch</li>\n<li>Turn</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> touch,</div><div class=\"line\">    action,</div><div class=\"line\">    diffX,</div><div class=\"line\">    diffY,</div><div class=\"line\">    endX,</div><div class=\"line\">    endY,</div><div class=\"line\">    scroll,</div><div class=\"line\">    sort,</div><div class=\"line\">    startX,</div><div class=\"line\">    startY,</div><div class=\"line\">    swipe,</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testTouch</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.type == <span class=\"string\">'touchstart'</span>) &#123;</div><div class=\"line\">        touch = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (touch) &#123;</div><div class=\"line\">        touch = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onStart</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (testTouch(ev) &amp;&amp; !action) &#123;</div><div class=\"line\">        action = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        startX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">        startY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">        diffX = <span class=\"number\">0</span>;</div><div class=\"line\">        diffY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        sortTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            sort = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;, <span class=\"number\">200</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.type == <span class=\"string\">'mousedown'</span>) &#123;</div><div class=\"line\">            $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousemove'</span>, onMove).on(<span class=\"string\">'mouseup'</span>, onEnd);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMove</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action) &#123;</div><div class=\"line\">        endX = getCoord(ev, <span class=\"string\">'X'</span>);</div><div class=\"line\">        endY = getCoord(ev, <span class=\"string\">'Y'</span>);</div><div class=\"line\">        diffX = endX - startX;</div><div class=\"line\">        diffY = endY - startY;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!sort &amp;&amp; !swipe &amp;&amp; !scroll) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffY) &gt; <span class=\"number\">10</span>) &#123; <span class=\"comment\">// It's a scroll</span></div><div class=\"line\">                scroll = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"comment\">// Android 4.0 will not fire touchend event</span></div><div class=\"line\">                $(<span class=\"keyword\">this</span>).trigger(<span class=\"string\">'touchend'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffX) &gt; <span class=\"number\">7</span>) &#123; <span class=\"comment\">// It's a swipe</span></div><div class=\"line\">                swipe = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (swipe) &#123;</div><div class=\"line\">            ev.preventDefault(); <span class=\"comment\">// Kill page scroll</span></div><div class=\"line\">            <span class=\"comment\">// Handle swipe</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (sort) &#123;</div><div class=\"line\">            ev.preventDefault(); <span class=\"comment\">// Kill page scroll</span></div><div class=\"line\">            <span class=\"comment\">// Handle sort</span></div><div class=\"line\">            <span class=\"comment\">// ....</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(diffX) &gt; <span class=\"number\">5</span> || <span class=\"built_in\">Math</span>.abs(diffY) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">            clearTimeout(sortTimer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEnd</span>(<span class=\"params\">ev</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action) &#123;</div><div class=\"line\">        action = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (swipe) &#123;</div><div class=\"line\">            <span class=\"comment\">// Handle swipe end</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sort) &#123;</div><div class=\"line\">            <span class=\"comment\">// Handle sort end</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!scroll &amp;&amp; <span class=\"built_in\">Math</span>.abs(diffX) &lt; <span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">Math</span>.abs(diffY) &lt; <span class=\"number\">5</span>) &#123; <span class=\"comment\">// Tap</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (ev.type === <span class=\"string\">'touchend'</span>) &#123; <span class=\"comment\">// Prevent phantom clicks</span></div><div class=\"line\">                ev.preventDefault();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// Handle tap</span></div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        swipe = <span class=\"literal\">false</span>;</div><div class=\"line\">        sort = <span class=\"literal\">false</span>;</div><div class=\"line\">        scroll = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        clearTimeout(sortTimer);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ev.type == <span class=\"string\">'mouseup'</span>) &#123;</div><div class=\"line\">            $(<span class=\"built_in\">document</span>).off(<span class=\"string\">'mousemove'</span>, onMove).off(<span class=\"string\">'mouseup'</span>, onEnd);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">element</div><div class=\"line\">    .on(<span class=\"string\">'touchstart mousedown'</span>, onStart)</div><div class=\"line\">    .on(<span class=\"string\">'touchmove'</span>, onMove)</div><div class=\"line\">    .on(<span class=\"string\">'touchend touchcancel'</span>, onEnd)</div></pre></td></tr></table></figure>"},{"title":"Vue与Vuex","date":"2016-03-25T04:59:18.000Z","_content":"\n[vuex](https://github.com/vuejs/vuex)\n[文档](http://vuex.vuejs.org/en/index.html)\n\n# 总体流程\n![总体流程](https://raw.githubusercontent.com/vuejs/vuex/master/docs/en/vuex.png)\n\n# Demo\n[quote-demo](https://github.com/xieQin/quote-demo)\n\n# 学习总结\nVuex也是Flux的一种实现，是一个针对Vue特化的Flux，主要是为了配合Vue本身的响应式机制\n\n相较于Redux，同样具有单状态树和热重载的api，不过也少了一些在Vue的场景下并不契合的特性，\n如强制的immutability、为了同构而设计得较为繁琐的 API、必须依赖第三方库才能相对高效率地获得状态树的局部状态等\n\nVue + Vuex更为简洁，开发效率比React + Redux更高，更易于理解\n","source":"_posts/Vue与Vuex.md","raw":"---\ntitle: Vue与Vuex\ndate: 2016-03-25 12:59:18\ntags: Vue\ncategories: Javascript\n---\n\n[vuex](https://github.com/vuejs/vuex)\n[文档](http://vuex.vuejs.org/en/index.html)\n\n# 总体流程\n![总体流程](https://raw.githubusercontent.com/vuejs/vuex/master/docs/en/vuex.png)\n\n# Demo\n[quote-demo](https://github.com/xieQin/quote-demo)\n\n# 学习总结\nVuex也是Flux的一种实现，是一个针对Vue特化的Flux，主要是为了配合Vue本身的响应式机制\n\n相较于Redux，同样具有单状态树和热重载的api，不过也少了一些在Vue的场景下并不契合的特性，\n如强制的immutability、为了同构而设计得较为繁琐的 API、必须依赖第三方库才能相对高效率地获得状态树的局部状态等\n\nVue + Vuex更为简洁，开发效率比React + Redux更高，更易于理解\n","slug":"Vue与Vuex","published":1,"updated":"2016-07-20T02:40:51.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyql0014ycjcn62exp3k","content":"<p><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a><br><a href=\"http://vuex.vuejs.org/en/index.html\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h1 id=\"总体流程\"><a href=\"#总体流程\" class=\"headerlink\" title=\"总体流程\"></a>总体流程</h1><p><img src=\"https://raw.githubusercontent.com/vuejs/vuex/master/docs/en/vuex.png\" alt=\"总体流程\"></p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p><a href=\"https://github.com/xieQin/quote-demo\" target=\"_blank\" rel=\"external\">quote-demo</a></p>\n<h1 id=\"学习总结\"><a href=\"#学习总结\" class=\"headerlink\" title=\"学习总结\"></a>学习总结</h1><p>Vuex也是Flux的一种实现，是一个针对Vue特化的Flux，主要是为了配合Vue本身的响应式机制</p>\n<p>相较于Redux，同样具有单状态树和热重载的api，不过也少了一些在Vue的场景下并不契合的特性，<br>如强制的immutability、为了同构而设计得较为繁琐的 API、必须依赖第三方库才能相对高效率地获得状态树的局部状态等</p>\n<p>Vue + Vuex更为简洁，开发效率比React + Redux更高，更易于理解</p>\n","excerpt":"","more":"<p><a href=\"https://github.com/vuejs/vuex\">vuex</a><br><a href=\"http://vuex.vuejs.org/en/index.html\">文档</a></p>\n<h1 id=\"总体流程\"><a href=\"#总体流程\" class=\"headerlink\" title=\"总体流程\"></a>总体流程</h1><p><img src=\"https://raw.githubusercontent.com/vuejs/vuex/master/docs/en/vuex.png\" alt=\"总体流程\"></p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p><a href=\"https://github.com/xieQin/quote-demo\">quote-demo</a></p>\n<h1 id=\"学习总结\"><a href=\"#学习总结\" class=\"headerlink\" title=\"学习总结\"></a>学习总结</h1><p>Vuex也是Flux的一种实现，是一个针对Vue特化的Flux，主要是为了配合Vue本身的响应式机制</p>\n<p>相较于Redux，同样具有单状态树和热重载的api，不过也少了一些在Vue的场景下并不契合的特性，<br>如强制的immutability、为了同构而设计得较为繁琐的 API、必须依赖第三方库才能相对高效率地获得状态树的局部状态等</p>\n<p>Vue + Vuex更为简洁，开发效率比React + Redux更高，更易于理解</p>\n"},{"title":"CSS绘制三角形","date":"2014-12-21T03:18:12.000Z","_content":"\nCSS绘制三角形是对border属性的应用\n\n```html\n<div class=\"test\"></div>\n```\n\n```css\n.test{\n  width: 0;\n  height: 0;\n  border-top: 50px solid black;\n  border-right: 50px solid red;\n  border-bottom: 50px solid blue;\n  border-left: 50px solid orange;\n}\n```\n\n![效果](https://segmentfault.com/img/bVlP6n)\n\n绘制各种三角形：\n必须设置三个边框的，且位于两侧的边框的 border-color 属性应设置为 transparent\n\n```css\n.test1{\n  width: 0;\n  height: 0;\n  border-right: 50px solid transparent;\n  border-bottom: 50px solid blue;\n  border-left: 50px solid transparent;\n}\n.test2{\n  width: 0;\n  height: 0;\n  border-top: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid orange;\n}\n.test3{\n  width: 0;\n  height: 0;\n  border-top: 50px solid black;\n  border-right: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n.test4{\n  width: 0;\n  height: 0;\n  border-top: 50px solid transparent;\n  border-right: 50px solid red;\n  border-bottom: 50px solid transparent;\n}\n```","source":"_posts/CSS绘制三角形.md","raw":"---\ntitle: CSS绘制三角形\ndate: 2014-12-21 11:18:12\ntags: CSS\ncategories: 前端\n---\n\nCSS绘制三角形是对border属性的应用\n\n```html\n<div class=\"test\"></div>\n```\n\n```css\n.test{\n  width: 0;\n  height: 0;\n  border-top: 50px solid black;\n  border-right: 50px solid red;\n  border-bottom: 50px solid blue;\n  border-left: 50px solid orange;\n}\n```\n\n![效果](https://segmentfault.com/img/bVlP6n)\n\n绘制各种三角形：\n必须设置三个边框的，且位于两侧的边框的 border-color 属性应设置为 transparent\n\n```css\n.test1{\n  width: 0;\n  height: 0;\n  border-right: 50px solid transparent;\n  border-bottom: 50px solid blue;\n  border-left: 50px solid transparent;\n}\n.test2{\n  width: 0;\n  height: 0;\n  border-top: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid orange;\n}\n.test3{\n  width: 0;\n  height: 0;\n  border-top: 50px solid black;\n  border-right: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n.test4{\n  width: 0;\n  height: 0;\n  border-top: 50px solid transparent;\n  border-right: 50px solid red;\n  border-bottom: 50px solid transparent;\n}\n```","slug":"CSS绘制三角形","published":1,"updated":"2016-07-20T02:40:50.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqo0017ycjcd1k4eot3","content":"<p>CSS绘制三角形是对border属性的应用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid black;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid orange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://segmentfault.com/img/bVlP6n\" alt=\"效果\"></p>\n<p>绘制各种三角形：<br>必须设置三个边框的，且位于两侧的边框的 border-color 属性应设置为 transparent</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test1</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test2</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid orange;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid black;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test4</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>CSS绘制三角形是对border属性的应用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid black;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid orange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://segmentfault.com/img/bVlP6n\" alt=\"效果\"></p>\n<p>绘制各种三角形：<br>必须设置三个边框的，且位于两侧的边框的 border-color 属性应设置为 transparent</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test1</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid blue;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test2</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid orange;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid black;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test4</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"datatables 使用","date":"2014-08-12T10:29:56.000Z","_content":"\n一款jQuery表格插件\n\n[中文网](http://datatables.club/)\n[文档](http://datatables.club/reference/)\n[手册](http://datatables.club/manual/)\n\n搭配ajax使用\n\n```js\n$(document).ready(function() {\n  $('#example').dataTable( {\n    \"ajax\": \"data/objects.txt\",\n    \"columns\": [\n      { \"data\": \"name\" },\n      { \"data\": \"position\" },\n      { \"data\": \"office\" },\n      { \"data\": \"extn\" },\n      { \"data\": \"start_date\" },\n      { \"data\": \"salary\" }\n    ]\n  });\n});\n```\n\n","source":"_posts/datatables-使用.md","raw":"---\ntitle: datatables 使用\ndate: 2014-08-12 18:29:56\ntags: Jquery\ncategories: 插件\n---\n\n一款jQuery表格插件\n\n[中文网](http://datatables.club/)\n[文档](http://datatables.club/reference/)\n[手册](http://datatables.club/manual/)\n\n搭配ajax使用\n\n```js\n$(document).ready(function() {\n  $('#example').dataTable( {\n    \"ajax\": \"data/objects.txt\",\n    \"columns\": [\n      { \"data\": \"name\" },\n      { \"data\": \"position\" },\n      { \"data\": \"office\" },\n      { \"data\": \"extn\" },\n      { \"data\": \"start_date\" },\n      { \"data\": \"salary\" }\n    ]\n  });\n});\n```\n\n","slug":"datatables-使用","published":1,"updated":"2016-07-20T02:40:51.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqs001cycjc082mfghm","content":"<p>一款jQuery表格插件</p>\n<p><a href=\"http://datatables.club/\" target=\"_blank\" rel=\"external\">中文网</a><br><a href=\"http://datatables.club/reference/\" target=\"_blank\" rel=\"external\">文档</a><br><a href=\"http://datatables.club/manual/\" target=\"_blank\" rel=\"external\">手册</a></p>\n<p>搭配ajax使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#example'</span>).dataTable( &#123;</div><div class=\"line\">    <span class=\"string\">\"ajax\"</span>: <span class=\"string\">\"data/objects.txt\"</span>,</div><div class=\"line\">    <span class=\"string\">\"columns\"</span>: [</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"name\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"position\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"office\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"extn\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"start_date\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"salary\"</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>一款jQuery表格插件</p>\n<p><a href=\"http://datatables.club/\">中文网</a><br><a href=\"http://datatables.club/reference/\">文档</a><br><a href=\"http://datatables.club/manual/\">手册</a></p>\n<p>搭配ajax使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#example'</span>).dataTable( &#123;</div><div class=\"line\">    <span class=\"string\">\"ajax\"</span>: <span class=\"string\">\"data/objects.txt\"</span>,</div><div class=\"line\">    <span class=\"string\">\"columns\"</span>: [</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"name\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"position\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"office\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"extn\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"start_date\"</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"string\">\"data\"</span>: <span class=\"string\">\"salary\"</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"express与koa","date":"2016-02-26T11:03:44.000Z","_content":"\n# Express\n[Express 文档](http://www.expressjs.com.cn/starter/installing.html)\nExpress主要解决了 请求路由 和 视图模板 的问题\n没有强制的规范约束，因此各个示例中 Config，Controller，View的维护、管理、技巧真是各式各样\n\n# Koa总体流程图\n\n![Koa总体流程图](http://berwin.github.io/ppts/koa/img/koa-flow.jpg)\n[koa](https://github.com/koajs/koa)\n[koa-guide](https://github.com/guo-yu/koa-guide)","source":"_posts/express与koa.md","raw":"---\ntitle: express与koa\ndate: 2016-02-26 19:03:44\ntags: Nodejs\ncategories: Nodejs\n---\n\n# Express\n[Express 文档](http://www.expressjs.com.cn/starter/installing.html)\nExpress主要解决了 请求路由 和 视图模板 的问题\n没有强制的规范约束，因此各个示例中 Config，Controller，View的维护、管理、技巧真是各式各样\n\n# Koa总体流程图\n\n![Koa总体流程图](http://berwin.github.io/ppts/koa/img/koa-flow.jpg)\n[koa](https://github.com/koajs/koa)\n[koa-guide](https://github.com/guo-yu/koa-guide)","slug":"express与koa","published":1,"updated":"2016-07-20T02:40:51.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqt001dycjcnqpheqan","content":"<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><p><a href=\"http://www.expressjs.com.cn/starter/installing.html\" target=\"_blank\" rel=\"external\">Express 文档</a><br>Express主要解决了 请求路由 和 视图模板 的问题<br>没有强制的规范约束，因此各个示例中 Config，Controller，View的维护、管理、技巧真是各式各样</p>\n<h1 id=\"Koa总体流程图\"><a href=\"#Koa总体流程图\" class=\"headerlink\" title=\"Koa总体流程图\"></a>Koa总体流程图</h1><p><img src=\"http://berwin.github.io/ppts/koa/img/koa-flow.jpg\" alt=\"Koa总体流程图\"><br><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"external\">koa</a><br><a href=\"https://github.com/guo-yu/koa-guide\" target=\"_blank\" rel=\"external\">koa-guide</a></p>\n","excerpt":"","more":"<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><p><a href=\"http://www.expressjs.com.cn/starter/installing.html\">Express 文档</a><br>Express主要解决了 请求路由 和 视图模板 的问题<br>没有强制的规范约束，因此各个示例中 Config，Controller，View的维护、管理、技巧真是各式各样</p>\n<h1 id=\"Koa总体流程图\"><a href=\"#Koa总体流程图\" class=\"headerlink\" title=\"Koa总体流程图\"></a>Koa总体流程图</h1><p><img src=\"http://berwin.github.io/ppts/koa/img/koa-flow.jpg\" alt=\"Koa总体流程图\"><br><a href=\"https://github.com/koajs/koa\">koa</a><br><a href=\"https://github.com/guo-yu/koa-guide\">koa-guide</a></p>\n"},{"title":"react-router使用指南","date":"2016-05-20T09:00:39.000Z","_content":"\nreact-router 作为react的路由插件，整体使用上我觉得比vue-router更为方便（除了变来变去的api），\n特别是路由嵌套简洁很多。\n原文见[react-router-tutorial](https://github.com/reactjs/react-router-tutorial)\n\n## 一、安装\n\n```bash\nnpm install react-router --save\n```\n\n## 二、显示路由\n在入口文件处\n- 引入`Router` 、`Route`、`hashHistory`\n\n- render `Router`\n\n```js\nimport { Router, Route, hashHistory } from 'react-router'\nimport About from './modules/About'\nimport Repos from './modules/Repos'\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}/>\n    <Route path=\"/repos\" component={Repos}/>\n    <Route path=\"/about\" component={About}/>\n  </Router>\n), document.getElementById('app'))\n```\n\n使用history api 管理路由时：\n```js\n// index.js\n// ...\nimport { Router, Route, browserHistory } from 'react-router'\n\nrender((\n  <Router history={browserHistory}>\n    {/* ... */}\n  </Router>\n), document.getElementById('app'))\n```\n\n## 三、嵌套路由\n嵌套路由的实现相比vue-router中通过声明子路由的方法简洁直观了很多\n路由的嵌套与对应组件的嵌套之间是存在对应关系，通过这种对应关系来实现嵌套路由\n```\n<App>       {/*  /          */}\n  <Repos>   {/*  /repos     */}\n    <Repo/> {/*  /repos/123 */}\n  </Repos>\n</App>\n```\n\n```js\n// index.js\n// ...\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n      {/* make them children of `App` */}\n      <Route path=\"/repos\" component={Repos}/>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n\n```\n\n```js\n// modules/App.js\n// ...\n  render() {\n    return (\n      <div>\n        <h1>Ghettohub Issues</h1>\n        <ul role=\"nav\">\n          <li><Link to=\"/about\">About</Link></li>\n          <li><Link to=\"/repos\">Repos</Link></li>\n        </ul>\n\n        {/* add this */}\n        {this.props.children}\n\n      </div>\n    )\n  }\n// ...\n```\n\n## 四、导航样式\n访问各路由时显示对应的激活样式\n\n#### 1. Active Styles\n```js\n// modules/App.js\n<li><Link to=\"/about\" activeStyle={{ color: 'red' }}>About</Link></li>\n<li><Link to=\"/repos\" activeStyle={{ color: 'red' }}>Repos</Link></li>\n```\n\n#### 2. Active Class Name\n```js\n// modules/App.js\n<li><Link to=\"/about\" activeClassName=\"active\">About</Link></li>\n<li><Link to=\"/repos\" activeClassName=\"active\">Repos</Link></li>\n```\n```css\n.active {\n  color: green;\n}\n```\n\n#### 3. 封装成NavLink组件\n```js\nimport React from 'react'\nimport { Link } from 'react-router'\n\nexport default React.createClass({\n  render() {\n    return <Link {...this.props} activeClassName=\"active\"/>\n  }\n})\n```\n\n```js\n// modules/App.js\nimport NavLink from './NavLink'\n\n// ...\n\n<li><NavLink to=\"/about\">About</NavLink></li>\n<li><NavLink to=\"/repos\">Repos</NavLink></li>\n```\n\n#### 4. IndexLink\n```js\n// App.js\nimport { IndexLink } from 'react-router'\n\n// ...\n<li><IndexLink to=\"/\" activeClassName=\"active\">Home</IndexLink></li>\n```\n\n#### 5. onlyActiveOnIndex\n```js\n<li><Link to=\"/\" activeClassName=\"active\" onlyActiveOnIndex={true}>Home</Link></li>\n```\n\n```js\n<li><NavLink to=\"/\" onlyActiveOnIndex={true}>Home</NavLink></li>\n```\n\n## 五、参数传递\n用户获取及传递url中附带的参数\n有`/repos/:userName/:repoName`这样的路由\n\n```js\n// modules/Repo.js\nimport React from 'react'\n\nexport default React.createClass({\n  render() {\n    return (\n      <div>\n        <h2>{this.props.params.repoName}</h2>\n      </div>\n    )\n  }\n})\n```\n\n```js\n// ...\n// import Repo\nimport Repo from './modules/Repo'\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n      <Route path=\"/repos\" component={Repos}/>\n      {/* 添加新路由 */}\n      <Route path=\"/repos/:userName/:repoName\" component={Repo}/>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n```\n\n```js\n// Repos.js\nimport { Link } from 'react-router'\n// ...\nexport default React.createClass({\n  render() {\n    return (\n      <div>\n        <h2>Repos</h2>\n\n        {/* 添加跳转链接 */}\n        <ul>\n          <li><Link to=\"/repos/reactjs/react-router\">React Router</Link></li>\n          <li><Link to=\"/repos/facebook/react\">React</Link></li>\n        </ul>\n\n      </div>\n    )\n  }\n})\n```\n\n## 六、设置初始路由\n```js\n// index.js\n// 从'react-router' 中添加新的引用： `IndexRoute`\nimport { Router, Route, hashHistory, IndexRoute } from 'react-router'\n// 添加 Home 组件\nimport Home from './modules/Home'\n\n// ...\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n\n      {/* 将Home组件作为 `/`的子路由添加 */}\n      <IndexRoute component={Home}/>\n\n      <Route path=\"/repos\" component={Repos}>\n        <Route path=\"/repos/:userName/:repoName\" component={Repo}/>\n      </Route>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n```\n\n## 七、触发路由\n使用`browserHistory`\n```js\n// modules/Repos.js\nimport { browserHistory } from 'react-router'\n\n// ...\n  handleSubmit(event) {\n    // ...\n    const path = `/repos/${userName}/${repo}`\n    browserHistory.push(path)\n  },\n// ...\n```\n\n使用`Router`\n```js\n// ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n\n  // ...\n\n  handleSubmit(event) {\n    // ...\n    this.context.router.push(path)\n  },\n```","source":"_posts/react-router使用指南.md","raw":"---\ntitle: react-router使用指南\ndate: 2016-05-20 17:00:39\ntags: React\ncategories: React\n---\n\nreact-router 作为react的路由插件，整体使用上我觉得比vue-router更为方便（除了变来变去的api），\n特别是路由嵌套简洁很多。\n原文见[react-router-tutorial](https://github.com/reactjs/react-router-tutorial)\n\n## 一、安装\n\n```bash\nnpm install react-router --save\n```\n\n## 二、显示路由\n在入口文件处\n- 引入`Router` 、`Route`、`hashHistory`\n\n- render `Router`\n\n```js\nimport { Router, Route, hashHistory } from 'react-router'\nimport About from './modules/About'\nimport Repos from './modules/Repos'\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}/>\n    <Route path=\"/repos\" component={Repos}/>\n    <Route path=\"/about\" component={About}/>\n  </Router>\n), document.getElementById('app'))\n```\n\n使用history api 管理路由时：\n```js\n// index.js\n// ...\nimport { Router, Route, browserHistory } from 'react-router'\n\nrender((\n  <Router history={browserHistory}>\n    {/* ... */}\n  </Router>\n), document.getElementById('app'))\n```\n\n## 三、嵌套路由\n嵌套路由的实现相比vue-router中通过声明子路由的方法简洁直观了很多\n路由的嵌套与对应组件的嵌套之间是存在对应关系，通过这种对应关系来实现嵌套路由\n```\n<App>       {/*  /          */}\n  <Repos>   {/*  /repos     */}\n    <Repo/> {/*  /repos/123 */}\n  </Repos>\n</App>\n```\n\n```js\n// index.js\n// ...\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n      {/* make them children of `App` */}\n      <Route path=\"/repos\" component={Repos}/>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n\n```\n\n```js\n// modules/App.js\n// ...\n  render() {\n    return (\n      <div>\n        <h1>Ghettohub Issues</h1>\n        <ul role=\"nav\">\n          <li><Link to=\"/about\">About</Link></li>\n          <li><Link to=\"/repos\">Repos</Link></li>\n        </ul>\n\n        {/* add this */}\n        {this.props.children}\n\n      </div>\n    )\n  }\n// ...\n```\n\n## 四、导航样式\n访问各路由时显示对应的激活样式\n\n#### 1. Active Styles\n```js\n// modules/App.js\n<li><Link to=\"/about\" activeStyle={{ color: 'red' }}>About</Link></li>\n<li><Link to=\"/repos\" activeStyle={{ color: 'red' }}>Repos</Link></li>\n```\n\n#### 2. Active Class Name\n```js\n// modules/App.js\n<li><Link to=\"/about\" activeClassName=\"active\">About</Link></li>\n<li><Link to=\"/repos\" activeClassName=\"active\">Repos</Link></li>\n```\n```css\n.active {\n  color: green;\n}\n```\n\n#### 3. 封装成NavLink组件\n```js\nimport React from 'react'\nimport { Link } from 'react-router'\n\nexport default React.createClass({\n  render() {\n    return <Link {...this.props} activeClassName=\"active\"/>\n  }\n})\n```\n\n```js\n// modules/App.js\nimport NavLink from './NavLink'\n\n// ...\n\n<li><NavLink to=\"/about\">About</NavLink></li>\n<li><NavLink to=\"/repos\">Repos</NavLink></li>\n```\n\n#### 4. IndexLink\n```js\n// App.js\nimport { IndexLink } from 'react-router'\n\n// ...\n<li><IndexLink to=\"/\" activeClassName=\"active\">Home</IndexLink></li>\n```\n\n#### 5. onlyActiveOnIndex\n```js\n<li><Link to=\"/\" activeClassName=\"active\" onlyActiveOnIndex={true}>Home</Link></li>\n```\n\n```js\n<li><NavLink to=\"/\" onlyActiveOnIndex={true}>Home</NavLink></li>\n```\n\n## 五、参数传递\n用户获取及传递url中附带的参数\n有`/repos/:userName/:repoName`这样的路由\n\n```js\n// modules/Repo.js\nimport React from 'react'\n\nexport default React.createClass({\n  render() {\n    return (\n      <div>\n        <h2>{this.props.params.repoName}</h2>\n      </div>\n    )\n  }\n})\n```\n\n```js\n// ...\n// import Repo\nimport Repo from './modules/Repo'\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n      <Route path=\"/repos\" component={Repos}/>\n      {/* 添加新路由 */}\n      <Route path=\"/repos/:userName/:repoName\" component={Repo}/>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n```\n\n```js\n// Repos.js\nimport { Link } from 'react-router'\n// ...\nexport default React.createClass({\n  render() {\n    return (\n      <div>\n        <h2>Repos</h2>\n\n        {/* 添加跳转链接 */}\n        <ul>\n          <li><Link to=\"/repos/reactjs/react-router\">React Router</Link></li>\n          <li><Link to=\"/repos/facebook/react\">React</Link></li>\n        </ul>\n\n      </div>\n    )\n  }\n})\n```\n\n## 六、设置初始路由\n```js\n// index.js\n// 从'react-router' 中添加新的引用： `IndexRoute`\nimport { Router, Route, hashHistory, IndexRoute } from 'react-router'\n// 添加 Home 组件\nimport Home from './modules/Home'\n\n// ...\n\nrender((\n  <Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n\n      {/* 将Home组件作为 `/`的子路由添加 */}\n      <IndexRoute component={Home}/>\n\n      <Route path=\"/repos\" component={Repos}>\n        <Route path=\"/repos/:userName/:repoName\" component={Repo}/>\n      </Route>\n      <Route path=\"/about\" component={About}/>\n    </Route>\n  </Router>\n), document.getElementById('app'))\n```\n\n## 七、触发路由\n使用`browserHistory`\n```js\n// modules/Repos.js\nimport { browserHistory } from 'react-router'\n\n// ...\n  handleSubmit(event) {\n    // ...\n    const path = `/repos/${userName}/${repo}`\n    browserHistory.push(path)\n  },\n// ...\n```\n\n使用`Router`\n```js\n// ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n\n  // ...\n\n  handleSubmit(event) {\n    // ...\n    this.context.router.push(path)\n  },\n```","slug":"react-router使用指南","published":1,"updated":"2016-07-20T02:40:51.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqv001iycjcjqhsaea0","content":"<p>react-router 作为react的路由插件，整体使用上我觉得比vue-router更为方便（除了变来变去的api），<br>特别是路由嵌套简洁很多。<br>原文见<a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"external\">react-router-tutorial</a></p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install react-router --save</div></pre></td></tr></table></figure>\n<h2 id=\"二、显示路由\"><a href=\"#二、显示路由\" class=\"headerlink\" title=\"二、显示路由\"></a>二、显示路由</h2><p>在入口文件处</p>\n<ul>\n<li><p>引入<code>Router</code> 、<code>Route</code>、<code>hashHistory</code></p>\n</li>\n<li><p>render <code>Router</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> About <span class=\"keyword\">from</span> <span class=\"string\">'./modules/About'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Repos <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Repos'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;/&gt;</div><div class=\"line\">    &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">    &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<p>使用history api 管理路由时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;browserHistory&#125;</span>&gt;</span></span></div><div class=\"line\">    &#123;/* ... */&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\">), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、嵌套路由\"><a href=\"#三、嵌套路由\" class=\"headerlink\" title=\"三、嵌套路由\"></a>三、嵌套路由</h2><p>嵌套路由的实现相比vue-router中通过声明子路由的方法简洁直观了很多<br>路由的嵌套与对应组件的嵌套之间是存在对应关系，通过这种对应关系来实现嵌套路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;App&gt;       &#123;/*  /          */&#125;</div><div class=\"line\">  &lt;Repos&gt;   &#123;/*  /repos     */&#125;</div><div class=\"line\">    &lt;Repo/&gt; &#123;/*  /repos/123 */&#125;</div><div class=\"line\">  &lt;/Repos&gt;</div><div class=\"line\">&lt;/App&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\">      &#123;/* make them children of `App` */&#125;</div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Ghettohub Issues<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">role</span>=<span class=\"string\">\"nav\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        &#123;/* add this */&#125;</div><div class=\"line\">        &#123;this.props.children&#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<h2 id=\"四、导航样式\"><a href=\"#四、导航样式\" class=\"headerlink\" title=\"四、导航样式\"></a>四、导航样式</h2><p>访问各路由时显示对应的激活样式</p>\n<h4 id=\"1-Active-Styles\"><a href=\"#1-Active-Styles\" class=\"headerlink\" title=\"1. Active Styles\"></a>1. Active Styles</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"2-Active-Class-Name\"><a href=\"#2-Active-Class-Name\" class=\"headerlink\" title=\"2. Active Class Name\"></a>2. Active Class Name</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-封装成NavLink组件\"><a href=\"#3-封装成NavLink组件\" class=\"headerlink\" title=\"3. 封装成NavLink组件\"></a>3. 封装成NavLink组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...this.props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>/&gt;</span></span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> NavLink <span class=\"keyword\">from</span> <span class=\"string\">'./NavLink'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"4-IndexLink\"><a href=\"#4-IndexLink\" class=\"headerlink\" title=\"4. IndexLink\"></a>4. IndexLink</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// App.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; IndexLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">IndexLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">IndexLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"5-onlyActiveOnIndex\"><a href=\"#5-onlyActiveOnIndex\" class=\"headerlink\" title=\"5. onlyActiveOnIndex\"></a>5. onlyActiveOnIndex</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">onlyActiveOnIndex</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">onlyActiveOnIndex</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"五、参数传递\"><a href=\"#五、参数传递\" class=\"headerlink\" title=\"五、参数传递\"></a>五、参数传递</h2><p>用户获取及传递url中附带的参数<br>有<code>/repos/:userName/:repoName</code>这样的路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/Repo.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;this.props.params.repoName&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"comment\">// import Repo</span></div><div class=\"line\"><span class=\"keyword\">import</span> Repo <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Repo'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">      &#123;/* 添加新路由 */&#125;</div><div class=\"line\">      &lt;Route path=\"/repos/:userName/:repoName\" component=&#123;Repo&#125;/&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Repos.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        &#123;/* 添加跳转链接 */&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos/reactjs/react-router\"</span>&gt;</span>React Router<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos/facebook/react\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"六、设置初始路由\"><a href=\"#六、设置初始路由\" class=\"headerlink\" title=\"六、设置初始路由\"></a>六、设置初始路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// 从'react-router' 中添加新的引用： `IndexRoute`</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"comment\">// 添加 Home 组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Home'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">      &#123;/* 将Home组件作为 `/`的子路由添加 */&#125;</div><div class=\"line\">      &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;&gt;</div><div class=\"line\">        &lt;Route path=\"/repos/:userName/:repoName\" component=&#123;Repo&#125;/&gt;</div><div class=\"line\">      &lt;/Route&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<h2 id=\"七、触发路由\"><a href=\"#七、触发路由\" class=\"headerlink\" title=\"七、触发路由\"></a>七、触发路由</h2><p>使用<code>browserHistory</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/Repos.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">`/repos/<span class=\"subst\">$&#123;userName&#125;</span>/<span class=\"subst\">$&#123;repo&#125;</span>`</span></div><div class=\"line\">    browserHistory.push(path)</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>使用<code>Router</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ask for `router` from context</span></div><div class=\"line\">  contextTypes: &#123;</div><div class=\"line\">    router: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>react-router 作为react的路由插件，整体使用上我觉得比vue-router更为方便（除了变来变去的api），<br>特别是路由嵌套简洁很多。<br>原文见<a href=\"https://github.com/reactjs/react-router-tutorial\">react-router-tutorial</a></p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install react-router --save</div></pre></td></tr></table></figure>\n<h2 id=\"二、显示路由\"><a href=\"#二、显示路由\" class=\"headerlink\" title=\"二、显示路由\"></a>二、显示路由</h2><p>在入口文件处</p>\n<ul>\n<li><p>引入<code>Router</code> 、<code>Route</code>、<code>hashHistory</code></p>\n</li>\n<li><p>render <code>Router</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> About <span class=\"keyword\">from</span> <span class=\"string\">'./modules/About'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Repos <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Repos'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;/&gt;</div><div class=\"line\">    &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">    &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<p>使用history api 管理路由时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;browserHistory&#125;</span>&gt;</span></div><div class=\"line\">    &#123;/* ... */&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></span></div><div class=\"line\">), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、嵌套路由\"><a href=\"#三、嵌套路由\" class=\"headerlink\" title=\"三、嵌套路由\"></a>三、嵌套路由</h2><p>嵌套路由的实现相比vue-router中通过声明子路由的方法简洁直观了很多<br>路由的嵌套与对应组件的嵌套之间是存在对应关系，通过这种对应关系来实现嵌套路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;App&gt;       &#123;/*  /          */&#125;</div><div class=\"line\">  &lt;Repos&gt;   &#123;/*  /repos     */&#125;</div><div class=\"line\">    &lt;Repo/&gt; &#123;/*  /repos/123 */&#125;</div><div class=\"line\">  &lt;/Repos&gt;</div><div class=\"line\">&lt;/App&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\">      &#123;/* make them children of `App` */&#125;</div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Ghettohub Issues<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">role</span>=<span class=\"string\">\"nav\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        &#123;/* add this */&#125;</div><div class=\"line\">        &#123;this.props.children&#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<h2 id=\"四、导航样式\"><a href=\"#四、导航样式\" class=\"headerlink\" title=\"四、导航样式\"></a>四、导航样式</h2><p>访问各路由时显示对应的激活样式</p>\n<h4 id=\"1-Active-Styles\"><a href=\"#1-Active-Styles\" class=\"headerlink\" title=\"1. Active Styles\"></a>1. Active Styles</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"2-Active-Class-Name\"><a href=\"#2-Active-Class-Name\" class=\"headerlink\" title=\"2. Active Class Name\"></a>2. Active Class Name</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-封装成NavLink组件\"><a href=\"#3-封装成NavLink组件\" class=\"headerlink\" title=\"3. 封装成NavLink组件\"></a>3. 封装成NavLink组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...this.props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>/&gt;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/App.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> NavLink <span class=\"keyword\">from</span> <span class=\"string\">'./NavLink'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos\"</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"4-IndexLink\"><a href=\"#4-IndexLink\" class=\"headerlink\" title=\"4. IndexLink\"></a>4. IndexLink</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// App.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; IndexLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">IndexLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">IndexLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"5-onlyActiveOnIndex\"><a href=\"#5-onlyActiveOnIndex\" class=\"headerlink\" title=\"5. onlyActiveOnIndex\"></a>5. onlyActiveOnIndex</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">onlyActiveOnIndex</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">onlyActiveOnIndex</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"五、参数传递\"><a href=\"#五、参数传递\" class=\"headerlink\" title=\"五、参数传递\"></a>五、参数传递</h2><p>用户获取及传递url中附带的参数<br>有<code>/repos/:userName/:repoName</code>这样的路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/Repo.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;this.props.params.repoName&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"comment\">// import Repo</span></div><div class=\"line\"><span class=\"keyword\">import</span> Repo <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Repo'</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;/&gt;</div><div class=\"line\">      &#123;/* 添加新路由 */&#125;</div><div class=\"line\">      &lt;Route path=\"/repos/:userName/:repoName\" component=&#123;Repo&#125;/&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Repos.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Repos<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        &#123;/* 添加跳转链接 */&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos/reactjs/react-router\"</span>&gt;</span>React Router<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/repos/facebook/react\"</span>&gt;</span>React<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"六、设置初始路由\"><a href=\"#六、设置初始路由\" class=\"headerlink\" title=\"六、设置初始路由\"></a>六、设置初始路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"comment\">// 从'react-router' 中添加新的引用： `IndexRoute`</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"comment\">// 添加 Home 组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Home'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">render((</div><div class=\"line\">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\" component=&#123;App&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">      &#123;/* 将Home组件作为 `/`的子路由添加 */&#125;</div><div class=\"line\">      &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;Route path=\"/repos\" component=&#123;Repos&#125;&gt;</div><div class=\"line\">        &lt;Route path=\"/repos/:userName/:repoName\" component=&#123;Repo&#125;/&gt;</div><div class=\"line\">      &lt;/Route&gt;</div><div class=\"line\">      &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">), document.getElementById('app'))</div></pre></td></tr></table></figure>\n<h2 id=\"七、触发路由\"><a href=\"#七、触发路由\" class=\"headerlink\" title=\"七、触发路由\"></a>七、触发路由</h2><p>使用<code>browserHistory</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/Repos.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">`/repos/<span class=\"subst\">$&#123;userName&#125;</span>/<span class=\"subst\">$&#123;repo&#125;</span>`</span></div><div class=\"line\">    browserHistory.push(path)</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>使用<code>Router</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ask for `router` from context</span></div><div class=\"line\">  contextTypes: &#123;</div><div class=\"line\">    router: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure></p>\n"},{"title":"防止重复发送ajax的方法","date":"2014-09-27T09:24:54.000Z","_content":"\n防止重复发送ajax请求应该是web中很常见的应用场景\n\n### 常见思路：\n- 连续进行多次请求时，只执行最后一次请求\n- 连续进行多次请求，只执行第一次请求，后续请求全部终止\n\n### 具体方法\n- 同一时间只允许一次ajax请求操作，直到请求完成之后才能进行下一次请求\n\n- 不考虑之前的结果，所有的请求只以最后一次请求为最终结果\n\n- 多次的请求设置时间频率，一定时间间隔内只允许有一次请求，即任意请求之间必须大于一个指定时间\n","source":"_posts/防止重复发送ajax的方法.md","raw":"---\ntitle: 防止重复发送ajax的方法\ndate: 2014-09-27 17:24:54\ntags: Javascript\ncategories: 编程\n---\n\n防止重复发送ajax请求应该是web中很常见的应用场景\n\n### 常见思路：\n- 连续进行多次请求时，只执行最后一次请求\n- 连续进行多次请求，只执行第一次请求，后续请求全部终止\n\n### 具体方法\n- 同一时间只允许一次ajax请求操作，直到请求完成之后才能进行下一次请求\n\n- 不考虑之前的结果，所有的请求只以最后一次请求为最终结果\n\n- 多次的请求设置时间频率，一定时间间隔内只允许有一次请求，即任意请求之间必须大于一个指定时间\n","slug":"防止重复发送ajax的方法","published":1,"updated":"2016-07-20T02:40:51.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyqw001lycjcdypfnphp","content":"<p>防止重复发送ajax请求应该是web中很常见的应用场景</p>\n<h3 id=\"常见思路：\"><a href=\"#常见思路：\" class=\"headerlink\" title=\"常见思路：\"></a>常见思路：</h3><ul>\n<li>连续进行多次请求时，只执行最后一次请求</li>\n<li>连续进行多次请求，只执行第一次请求，后续请求全部终止</li>\n</ul>\n<h3 id=\"具体方法\"><a href=\"#具体方法\" class=\"headerlink\" title=\"具体方法\"></a>具体方法</h3><ul>\n<li><p>同一时间只允许一次ajax请求操作，直到请求完成之后才能进行下一次请求</p>\n</li>\n<li><p>不考虑之前的结果，所有的请求只以最后一次请求为最终结果</p>\n</li>\n<li><p>多次的请求设置时间频率，一定时间间隔内只允许有一次请求，即任意请求之间必须大于一个指定时间</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>防止重复发送ajax请求应该是web中很常见的应用场景</p>\n<h3 id=\"常见思路：\"><a href=\"#常见思路：\" class=\"headerlink\" title=\"常见思路：\"></a>常见思路：</h3><ul>\n<li>连续进行多次请求时，只执行最后一次请求</li>\n<li>连续进行多次请求，只执行第一次请求，后续请求全部终止</li>\n</ul>\n<h3 id=\"具体方法\"><a href=\"#具体方法\" class=\"headerlink\" title=\"具体方法\"></a>具体方法</h3><ul>\n<li><p>同一时间只允许一次ajax请求操作，直到请求完成之后才能进行下一次请求</p>\n</li>\n<li><p>不考虑之前的结果，所有的请求只以最后一次请求为最终结果</p>\n</li>\n<li><p>多次的请求设置时间频率，一定时间间隔内只允许有一次请求，即任意请求之间必须大于一个指定时间</p>\n</li>\n</ul>\n"},{"title":"使用nodejs搭建web服务器","date":"2015-07-25T05:52:41.000Z","_content":"\n搭建简单的web服务器\n\n##### 服务器基本流程：\n- 响应url请求，对应于硬盘上的文件\n- 如果文件存在，返回200状态码，并发送文件到浏览器端\n- 如果文件不存在，返回404状态码，并发送一个404文件到浏览器端\n- 如果文件读取错误，返回500状态码，发送错误信息到浏览器端\n\n##### 需要实现的基本功能点：\n- 开启web服务，加载各种web资源\n- 自动分配可用端口，也可以配置端口\n- 加载json文件并模拟网速\n- 启动时能自动打开默认浏览器浏览，方便调试\n- 支持常用文件的MIME类型\n- 允许跨域请求\n- host默认为本地IP\n- 可配置主页\n\n##### 扩展功能\n- 支持304缓存响应\n- 启用GZip功能对指定文件进行压缩\n- 支持断点续传\n- 使用快捷命令\n\n### 代码编写\n\n##### 基本代码\n```js\nvar http = require('http');        // Http服务器API\nvar fs = require('fs');            // 用于处理本地文件\nvar os = require('os');            //用于获取本地IP地址\nvar exec = require('child_process').exec; //用于打开默认浏览器\nvar path = require('path');     //用于处理路径和后缀\nvar url = require('url');       //用于解析get请求所带的参数\n\nvar CONFIG, //默认配置\n    HTTP,   //HTTP静态类\n    log;    //日志打印\n\nCONFIG = {\n  homedir:'',\n  home: 'index.html',\n  port: 8089,\n  browser: true,\n};\nlog = function(txt){ console.log(txt); };\n\nHTTP = {\n  init:function(){},\n  _getIPAddress:function(){/* 获取本地IPv4的IP地址 */},\n  _openURL:function(path){/* 使用默认浏览器打开URL */},\n  _getMIME:function(ext){/* 获取文件的MIME类型 */},\n  responseFile:function(pathName, res, ext, params){ /* 读取文件流并输出 */ }\n  route:function( pathName, req, res ){/* 路由到指定的文件并响应输出 */},\n  createServer:function(){/* 创建一个http服务 */},\n  _bindEvents:function(server){ /* 注册响应事件 */};\n\nHTTP.init();\n```\n\n##### 建立http服务\n```js\nvar server = http.createServer();\nserver.listen(CONFIG.port!==0 ? CONFIG.port : 0);\n```\n\n##### 注册 监听端口 和 请求响应 \n```js\nvar self = this, defaultUrl = CONFIG.homedir ? CONFIG.homedir+'/'+CONFIG.home : CONFIG.home;\n// 注册监听端口启用事件\nserver.on('listening', function() { \n  var port = server.address().port;\n  log('Server running at '+ port);\n  CONFIG.browser && self._openURL('http://'+self._getIPAddress()+':'+port+'/'+defaultUrl);\n})\n```\n\n##### 注册请求处理事件\n```js\nserver.on('request', function(request, response) {\n    // 解析请求的URL\n    var oURL = url.parse(request.url);\n    var pathName = oURL.pathname.slice(1);\n    if(!pathName) pathName = defaultUrl;\n    self.route.bind(self)(pathName, request, response);\n});\n```\n\n##### 路由处理\n```js\nresponseFile:function(pathName, res, ext, params){ /* 读取文件流并输出 */\n  var self = this;\n  var raw = fs.createReadStream(pathName);\n  // 允许跨域调用\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\"Content-Type\", self._getMIME(ext));\n\n  if(ext == 'json' && params.delay){\n    setTimeout(function(){\n      res.writeHead(200, \"Ok\");\n      raw.pipe(res);\n    },params.delay);\n  }else{\n    res.writeHead(200, \"Ok\");\n    raw.pipe(res);\n  }\n},\nroute:function( pathName, req, res ){/* 路由到指定的文件并响应输出 */\n  var self = this;\n  fs.stat(pathName, function(err, stats){\n    if(err){\n      res.writeHead(404, \"Not Found\", {'Content-Type': 'text/plain'});\n      res.write(\"This request URL \" + pathName + \" was not found on this server.\");\n      res.end();\n    }else{\n      if(stats.isDirectory()){\n        pathName = path.join(pathName, '/', CONFIG.home);\n        self.route(pathName, req, res);\n      }else{\n        var method = req.method,\n            ext = path.extname(pathName), \n            params='';\n\n        log(method+': '+pathName);// 打印请求日志\n\n        ext = ext ? ext.slice(1) : 'unknown';\n\n        // 如果是get请求，且url结尾为'/'，那么就返回 home 页\n        if(method=='GET'){\n          pathName.slice(-1) === '/' &&  (pathName = path.normalize(pathName + '/' +CONFIG.home));\n          params = url.parse(req.url, true).query;\n          self.responseFile.bind(self)(pathName, res, ext, params);\n        }else if(method == 'POST'){\n          var _postData = \"\", _postMap = \"\";\n          req.on('data', function (chunk){\n              _postData += chunk;\n          }).on(\"end\", function (){\n            params = require('querystring').parse(_postData);\n            responseFile.bind(self)(pathName, res, ext, params);\n          });\n        }else{\n          self.responseFile.bind(self)(pathName, res, ext, params);\n        }\n      }\n    }\n  });\n}\n```","source":"_posts/使用nodejs搭建web服务器.md","raw":"---\ntitle: 使用nodejs搭建web服务器\ndate: 2015-07-25 13:52:41\ntags: Nodejs\ncategories: Nodejs\n---\n\n搭建简单的web服务器\n\n##### 服务器基本流程：\n- 响应url请求，对应于硬盘上的文件\n- 如果文件存在，返回200状态码，并发送文件到浏览器端\n- 如果文件不存在，返回404状态码，并发送一个404文件到浏览器端\n- 如果文件读取错误，返回500状态码，发送错误信息到浏览器端\n\n##### 需要实现的基本功能点：\n- 开启web服务，加载各种web资源\n- 自动分配可用端口，也可以配置端口\n- 加载json文件并模拟网速\n- 启动时能自动打开默认浏览器浏览，方便调试\n- 支持常用文件的MIME类型\n- 允许跨域请求\n- host默认为本地IP\n- 可配置主页\n\n##### 扩展功能\n- 支持304缓存响应\n- 启用GZip功能对指定文件进行压缩\n- 支持断点续传\n- 使用快捷命令\n\n### 代码编写\n\n##### 基本代码\n```js\nvar http = require('http');        // Http服务器API\nvar fs = require('fs');            // 用于处理本地文件\nvar os = require('os');            //用于获取本地IP地址\nvar exec = require('child_process').exec; //用于打开默认浏览器\nvar path = require('path');     //用于处理路径和后缀\nvar url = require('url');       //用于解析get请求所带的参数\n\nvar CONFIG, //默认配置\n    HTTP,   //HTTP静态类\n    log;    //日志打印\n\nCONFIG = {\n  homedir:'',\n  home: 'index.html',\n  port: 8089,\n  browser: true,\n};\nlog = function(txt){ console.log(txt); };\n\nHTTP = {\n  init:function(){},\n  _getIPAddress:function(){/* 获取本地IPv4的IP地址 */},\n  _openURL:function(path){/* 使用默认浏览器打开URL */},\n  _getMIME:function(ext){/* 获取文件的MIME类型 */},\n  responseFile:function(pathName, res, ext, params){ /* 读取文件流并输出 */ }\n  route:function( pathName, req, res ){/* 路由到指定的文件并响应输出 */},\n  createServer:function(){/* 创建一个http服务 */},\n  _bindEvents:function(server){ /* 注册响应事件 */};\n\nHTTP.init();\n```\n\n##### 建立http服务\n```js\nvar server = http.createServer();\nserver.listen(CONFIG.port!==0 ? CONFIG.port : 0);\n```\n\n##### 注册 监听端口 和 请求响应 \n```js\nvar self = this, defaultUrl = CONFIG.homedir ? CONFIG.homedir+'/'+CONFIG.home : CONFIG.home;\n// 注册监听端口启用事件\nserver.on('listening', function() { \n  var port = server.address().port;\n  log('Server running at '+ port);\n  CONFIG.browser && self._openURL('http://'+self._getIPAddress()+':'+port+'/'+defaultUrl);\n})\n```\n\n##### 注册请求处理事件\n```js\nserver.on('request', function(request, response) {\n    // 解析请求的URL\n    var oURL = url.parse(request.url);\n    var pathName = oURL.pathname.slice(1);\n    if(!pathName) pathName = defaultUrl;\n    self.route.bind(self)(pathName, request, response);\n});\n```\n\n##### 路由处理\n```js\nresponseFile:function(pathName, res, ext, params){ /* 读取文件流并输出 */\n  var self = this;\n  var raw = fs.createReadStream(pathName);\n  // 允许跨域调用\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\"Content-Type\", self._getMIME(ext));\n\n  if(ext == 'json' && params.delay){\n    setTimeout(function(){\n      res.writeHead(200, \"Ok\");\n      raw.pipe(res);\n    },params.delay);\n  }else{\n    res.writeHead(200, \"Ok\");\n    raw.pipe(res);\n  }\n},\nroute:function( pathName, req, res ){/* 路由到指定的文件并响应输出 */\n  var self = this;\n  fs.stat(pathName, function(err, stats){\n    if(err){\n      res.writeHead(404, \"Not Found\", {'Content-Type': 'text/plain'});\n      res.write(\"This request URL \" + pathName + \" was not found on this server.\");\n      res.end();\n    }else{\n      if(stats.isDirectory()){\n        pathName = path.join(pathName, '/', CONFIG.home);\n        self.route(pathName, req, res);\n      }else{\n        var method = req.method,\n            ext = path.extname(pathName), \n            params='';\n\n        log(method+': '+pathName);// 打印请求日志\n\n        ext = ext ? ext.slice(1) : 'unknown';\n\n        // 如果是get请求，且url结尾为'/'，那么就返回 home 页\n        if(method=='GET'){\n          pathName.slice(-1) === '/' &&  (pathName = path.normalize(pathName + '/' +CONFIG.home));\n          params = url.parse(req.url, true).query;\n          self.responseFile.bind(self)(pathName, res, ext, params);\n        }else if(method == 'POST'){\n          var _postData = \"\", _postMap = \"\";\n          req.on('data', function (chunk){\n              _postData += chunk;\n          }).on(\"end\", function (){\n            params = require('querystring').parse(_postData);\n            responseFile.bind(self)(pathName, res, ext, params);\n          });\n        }else{\n          self.responseFile.bind(self)(pathName, res, ext, params);\n        }\n      }\n    }\n  });\n}\n```","slug":"使用nodejs搭建web服务器","published":1,"updated":"2016-07-20T02:40:51.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyr0001qycjcp8awh5qd","content":"<p>搭建简单的web服务器</p>\n<h5 id=\"服务器基本流程：\"><a href=\"#服务器基本流程：\" class=\"headerlink\" title=\"服务器基本流程：\"></a>服务器基本流程：</h5><ul>\n<li>响应url请求，对应于硬盘上的文件</li>\n<li>如果文件存在，返回200状态码，并发送文件到浏览器端</li>\n<li>如果文件不存在，返回404状态码，并发送一个404文件到浏览器端</li>\n<li>如果文件读取错误，返回500状态码，发送错误信息到浏览器端</li>\n</ul>\n<h5 id=\"需要实现的基本功能点：\"><a href=\"#需要实现的基本功能点：\" class=\"headerlink\" title=\"需要实现的基本功能点：\"></a>需要实现的基本功能点：</h5><ul>\n<li>开启web服务，加载各种web资源</li>\n<li>自动分配可用端口，也可以配置端口</li>\n<li>加载json文件并模拟网速</li>\n<li>启动时能自动打开默认浏览器浏览，方便调试</li>\n<li>支持常用文件的MIME类型</li>\n<li>允许跨域请求</li>\n<li>host默认为本地IP</li>\n<li>可配置主页</li>\n</ul>\n<h5 id=\"扩展功能\"><a href=\"#扩展功能\" class=\"headerlink\" title=\"扩展功能\"></a>扩展功能</h5><ul>\n<li>支持304缓存响应</li>\n<li>启用GZip功能对指定文件进行压缩</li>\n<li>支持断点续传</li>\n<li>使用快捷命令</li>\n</ul>\n<h3 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h3><h5 id=\"基本代码\"><a href=\"#基本代码\" class=\"headerlink\" title=\"基本代码\"></a>基本代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);        <span class=\"comment\">// Http服务器API</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);            <span class=\"comment\">// 用于处理本地文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>);            <span class=\"comment\">//用于获取本地IP地址</span></div><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec; <span class=\"comment\">//用于打开默认浏览器</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);     <span class=\"comment\">//用于处理路径和后缀</span></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);       <span class=\"comment\">//用于解析get请求所带的参数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> CONFIG, <span class=\"comment\">//默认配置</span></div><div class=\"line\">    HTTP,   <span class=\"comment\">//HTTP静态类</span></div><div class=\"line\">    log;    <span class=\"comment\">//日志打印</span></div><div class=\"line\"></div><div class=\"line\">CONFIG = &#123;</div><div class=\"line\">  homedir:<span class=\"string\">''</span>,</div><div class=\"line\">  home: <span class=\"string\">'index.html'</span>,</div><div class=\"line\">  port: <span class=\"number\">8089</span>,</div><div class=\"line\">  browser: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\">log = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">txt</span>)</span>&#123; <span class=\"built_in\">console</span>.log(txt); &#125;;</div><div class=\"line\"></div><div class=\"line\">HTTP = &#123;</div><div class=\"line\">  init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  _getIPAddress:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* 获取本地IPv4的IP地址 */</span>&#125;,</div><div class=\"line\">  _openURL:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;<span class=\"comment\">/* 使用默认浏览器打开URL */</span>&#125;,</div><div class=\"line\">  _getMIME:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ext</span>)</span>&#123;<span class=\"comment\">/* 获取文件的MIME类型 */</span>&#125;,</div><div class=\"line\">  responseFile:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathName, res, ext, params</span>)</span>&#123; <span class=\"comment\">/* 读取文件流并输出 */</span> &#125;</div><div class=\"line\">  route:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> pathName, req, res </span>)</span>&#123;<span class=\"comment\">/* 路由到指定的文件并响应输出 */</span>&#125;,</div><div class=\"line\">  createServer:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* 创建一个http服务 */</span>&#125;,</div><div class=\"line\">  _bindEvents:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">server</span>)</span>&#123; <span class=\"comment\">/* 注册响应事件 */</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">HTTP.init();</div></pre></td></tr></table></figure>\n<h5 id=\"建立http服务\"><a href=\"#建立http服务\" class=\"headerlink\" title=\"建立http服务\"></a>建立http服务</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.listen(CONFIG.port!==<span class=\"number\">0</span> ? CONFIG.port : <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"注册-监听端口-和-请求响应\"><a href=\"#注册-监听端口-和-请求响应\" class=\"headerlink\" title=\"注册 监听端口 和 请求响应\"></a>注册 监听端口 和 请求响应</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, defaultUrl = CONFIG.homedir ? CONFIG.homedir+<span class=\"string\">'/'</span>+CONFIG.home : CONFIG.home;</div><div class=\"line\"><span class=\"comment\">// 注册监听端口启用事件</span></div><div class=\"line\">server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  log(<span class=\"string\">'Server running at '</span>+ port);</div><div class=\"line\">  CONFIG.browser &amp;&amp; self._openURL(<span class=\"string\">'http://'</span>+self._getIPAddress()+<span class=\"string\">':'</span>+port+<span class=\"string\">'/'</span>+defaultUrl);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"注册请求处理事件\"><a href=\"#注册请求处理事件\" class=\"headerlink\" title=\"注册请求处理事件\"></a>注册请求处理事件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 解析请求的URL</span></div><div class=\"line\">    <span class=\"keyword\">var</span> oURL = url.parse(request.url);</div><div class=\"line\">    <span class=\"keyword\">var</span> pathName = oURL.pathname.slice(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!pathName) pathName = defaultUrl;</div><div class=\"line\">    self.route.bind(self)(pathName, request, response);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"路由处理\"><a href=\"#路由处理\" class=\"headerlink\" title=\"路由处理\"></a>路由处理</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">responseFile:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathName, res, ext, params</span>)</span>&#123; <span class=\"comment\">/* 读取文件流并输出 */</span></div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> raw = fs.createReadStream(pathName);</div><div class=\"line\">  <span class=\"comment\">// 允许跨域调用</span></div><div class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div><div class=\"line\">  res.setHeader(<span class=\"string\">\"Content-Type\"</span>, self._getMIME(ext));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(ext == <span class=\"string\">'json'</span> &amp;&amp; params.delay)&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>);</div><div class=\"line\">      raw.pipe(res);</div><div class=\"line\">    &#125;,params.delay);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>);</div><div class=\"line\">    raw.pipe(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\">route:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> pathName, req, res </span>)</span>&#123;<span class=\"comment\">/* 路由到指定的文件并响应输出 */</span></div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  fs.stat(pathName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">      res.write(<span class=\"string\">\"This request URL \"</span> + pathName + <span class=\"string\">\" was not found on this server.\"</span>);</div><div class=\"line\">      res.end();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(stats.isDirectory())&#123;</div><div class=\"line\">        pathName = path.join(pathName, <span class=\"string\">'/'</span>, CONFIG.home);</div><div class=\"line\">        self.route(pathName, req, res);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> method = req.method,</div><div class=\"line\">            ext = path.extname(pathName), </div><div class=\"line\">            params=<span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">        log(method+<span class=\"string\">': '</span>+pathName);<span class=\"comment\">// 打印请求日志</span></div><div class=\"line\"></div><div class=\"line\">        ext = ext ? ext.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 如果是get请求，且url结尾为'/'，那么就返回 home 页</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(method==<span class=\"string\">'GET'</span>)&#123;</div><div class=\"line\">          pathName.slice(<span class=\"number\">-1</span>) === <span class=\"string\">'/'</span> &amp;&amp;  (pathName = path.normalize(pathName + <span class=\"string\">'/'</span> +CONFIG.home));</div><div class=\"line\">          params = url.parse(req.url, <span class=\"literal\">true</span>).query;</div><div class=\"line\">          self.responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method == <span class=\"string\">'POST'</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> _postData = <span class=\"string\">\"\"</span>, _postMap = <span class=\"string\">\"\"</span>;</div><div class=\"line\">          req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">              _postData += chunk;</div><div class=\"line\">          &#125;).on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            params = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>).parse(_postData);</div><div class=\"line\">            responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          self.responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>搭建简单的web服务器</p>\n<h5 id=\"服务器基本流程：\"><a href=\"#服务器基本流程：\" class=\"headerlink\" title=\"服务器基本流程：\"></a>服务器基本流程：</h5><ul>\n<li>响应url请求，对应于硬盘上的文件</li>\n<li>如果文件存在，返回200状态码，并发送文件到浏览器端</li>\n<li>如果文件不存在，返回404状态码，并发送一个404文件到浏览器端</li>\n<li>如果文件读取错误，返回500状态码，发送错误信息到浏览器端</li>\n</ul>\n<h5 id=\"需要实现的基本功能点：\"><a href=\"#需要实现的基本功能点：\" class=\"headerlink\" title=\"需要实现的基本功能点：\"></a>需要实现的基本功能点：</h5><ul>\n<li>开启web服务，加载各种web资源</li>\n<li>自动分配可用端口，也可以配置端口</li>\n<li>加载json文件并模拟网速</li>\n<li>启动时能自动打开默认浏览器浏览，方便调试</li>\n<li>支持常用文件的MIME类型</li>\n<li>允许跨域请求</li>\n<li>host默认为本地IP</li>\n<li>可配置主页</li>\n</ul>\n<h5 id=\"扩展功能\"><a href=\"#扩展功能\" class=\"headerlink\" title=\"扩展功能\"></a>扩展功能</h5><ul>\n<li>支持304缓存响应</li>\n<li>启用GZip功能对指定文件进行压缩</li>\n<li>支持断点续传</li>\n<li>使用快捷命令</li>\n</ul>\n<h3 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h3><h5 id=\"基本代码\"><a href=\"#基本代码\" class=\"headerlink\" title=\"基本代码\"></a>基本代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);        <span class=\"comment\">// Http服务器API</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);            <span class=\"comment\">// 用于处理本地文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>);            <span class=\"comment\">//用于获取本地IP地址</span></div><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec; <span class=\"comment\">//用于打开默认浏览器</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);     <span class=\"comment\">//用于处理路径和后缀</span></div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);       <span class=\"comment\">//用于解析get请求所带的参数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> CONFIG, <span class=\"comment\">//默认配置</span></div><div class=\"line\">    HTTP,   <span class=\"comment\">//HTTP静态类</span></div><div class=\"line\">    log;    <span class=\"comment\">//日志打印</span></div><div class=\"line\"></div><div class=\"line\">CONFIG = &#123;</div><div class=\"line\">  homedir:<span class=\"string\">''</span>,</div><div class=\"line\">  home: <span class=\"string\">'index.html'</span>,</div><div class=\"line\">  port: <span class=\"number\">8089</span>,</div><div class=\"line\">  browser: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\">log = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">txt</span>)</span>&#123; <span class=\"built_in\">console</span>.log(txt); &#125;;</div><div class=\"line\"></div><div class=\"line\">HTTP = &#123;</div><div class=\"line\">  init:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  _getIPAddress:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* 获取本地IPv4的IP地址 */</span>&#125;,</div><div class=\"line\">  _openURL:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;<span class=\"comment\">/* 使用默认浏览器打开URL */</span>&#125;,</div><div class=\"line\">  _getMIME:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ext</span>)</span>&#123;<span class=\"comment\">/* 获取文件的MIME类型 */</span>&#125;,</div><div class=\"line\">  responseFile:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathName, res, ext, params</span>)</span>&#123; <span class=\"comment\">/* 读取文件流并输出 */</span> &#125;</div><div class=\"line\">  route:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> pathName, req, res </span>)</span>&#123;<span class=\"comment\">/* 路由到指定的文件并响应输出 */</span>&#125;,</div><div class=\"line\">  createServer:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* 创建一个http服务 */</span>&#125;,</div><div class=\"line\">  _bindEvents:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">server</span>)</span>&#123; <span class=\"comment\">/* 注册响应事件 */</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">HTTP.init();</div></pre></td></tr></table></figure>\n<h5 id=\"建立http服务\"><a href=\"#建立http服务\" class=\"headerlink\" title=\"建立http服务\"></a>建立http服务</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.listen(CONFIG.port!==<span class=\"number\">0</span> ? CONFIG.port : <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"注册-监听端口-和-请求响应\"><a href=\"#注册-监听端口-和-请求响应\" class=\"headerlink\" title=\"注册 监听端口 和 请求响应\"></a>注册 监听端口 和 请求响应</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, defaultUrl = CONFIG.homedir ? CONFIG.homedir+<span class=\"string\">'/'</span>+CONFIG.home : CONFIG.home;</div><div class=\"line\"><span class=\"comment\">// 注册监听端口启用事件</span></div><div class=\"line\">server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  log(<span class=\"string\">'Server running at '</span>+ port);</div><div class=\"line\">  CONFIG.browser &amp;&amp; self._openURL(<span class=\"string\">'http://'</span>+self._getIPAddress()+<span class=\"string\">':'</span>+port+<span class=\"string\">'/'</span>+defaultUrl);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h5 id=\"注册请求处理事件\"><a href=\"#注册请求处理事件\" class=\"headerlink\" title=\"注册请求处理事件\"></a>注册请求处理事件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 解析请求的URL</span></div><div class=\"line\">    <span class=\"keyword\">var</span> oURL = url.parse(request.url);</div><div class=\"line\">    <span class=\"keyword\">var</span> pathName = oURL.pathname.slice(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!pathName) pathName = defaultUrl;</div><div class=\"line\">    self.route.bind(self)(pathName, request, response);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"路由处理\"><a href=\"#路由处理\" class=\"headerlink\" title=\"路由处理\"></a>路由处理</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">responseFile:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathName, res, ext, params</span>)</span>&#123; <span class=\"comment\">/* 读取文件流并输出 */</span></div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> raw = fs.createReadStream(pathName);</div><div class=\"line\">  <span class=\"comment\">// 允许跨域调用</span></div><div class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</div><div class=\"line\">  res.setHeader(<span class=\"string\">\"Content-Type\"</span>, self._getMIME(ext));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(ext == <span class=\"string\">'json'</span> &amp;&amp; params.delay)&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>);</div><div class=\"line\">      raw.pipe(res);</div><div class=\"line\">    &#125;,params.delay);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>);</div><div class=\"line\">    raw.pipe(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\">route:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> pathName, req, res </span>)</span>&#123;<span class=\"comment\">/* 路由到指定的文件并响应输出 */</span></div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  fs.stat(pathName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">      res.write(<span class=\"string\">\"This request URL \"</span> + pathName + <span class=\"string\">\" was not found on this server.\"</span>);</div><div class=\"line\">      res.end();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(stats.isDirectory())&#123;</div><div class=\"line\">        pathName = path.join(pathName, <span class=\"string\">'/'</span>, CONFIG.home);</div><div class=\"line\">        self.route(pathName, req, res);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> method = req.method,</div><div class=\"line\">            ext = path.extname(pathName), </div><div class=\"line\">            params=<span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">        log(method+<span class=\"string\">': '</span>+pathName);<span class=\"comment\">// 打印请求日志</span></div><div class=\"line\"></div><div class=\"line\">        ext = ext ? ext.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 如果是get请求，且url结尾为'/'，那么就返回 home 页</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(method==<span class=\"string\">'GET'</span>)&#123;</div><div class=\"line\">          pathName.slice(<span class=\"number\">-1</span>) === <span class=\"string\">'/'</span> &amp;&amp;  (pathName = path.normalize(pathName + <span class=\"string\">'/'</span> +CONFIG.home));</div><div class=\"line\">          params = url.parse(req.url, <span class=\"literal\">true</span>).query;</div><div class=\"line\">          self.responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method == <span class=\"string\">'POST'</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> _postData = <span class=\"string\">\"\"</span>, _postMap = <span class=\"string\">\"\"</span>;</div><div class=\"line\">          req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">              _postData += chunk;</div><div class=\"line\">          &#125;).on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            params = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>).parse(_postData);</div><div class=\"line\">            responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          self.responseFile.bind(self)(pathName, res, ext, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"flexbox伸缩盒布局","date":"2014-11-21T01:37:20.000Z","_content":"Flex元素可以让你的布局根据浏览器的大小变化进行自动伸缩\n原文[guide-to-flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\nFlex元素分为flex containers 和 flex items\n\n## 1. Flex container\n\n![container](https://css-tricks.com/wp-content/uploads/2014/05/flex-container.svg)\n\n#### 1.1 display\n用于定义一个flex container 元素\n```css\n.container {\n  display: flex; /* or inline-flex */\n}\n```\n\n#### 1.2 flex-direction\n用于设置主轴\n![flex-direction](https://css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg)\n```css\n.container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n#### 1.3 flex-wrap\n![flex-wrap](https://css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg)\n```css\n.container{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n#### 1.4 flex-flow\n`flex-direction` 与 `flex-wrap` 的合并写法\n默认属性为 `row nowrap`\n\n```css\nflex-flow: <'flex-direction'> || <'flex-wrap'>\n```\n\n#### 1.5 justify-content\n用于flex items在设置主轴上的对齐方式\n![justify-content](https://css-tricks.com/wp-content/uploads/2013/04/justify-content.svg)\n\n```css\n.container {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n#### 1.6 align-items\n用于flex items在设置侧轴(cross-axis)上的对齐方式\n\n![align-items](https://css-tricks.com/wp-content/uploads/2014/05/align-items.svg)\n\n```css\n.container {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n#### 1.7 align-content\n\n![align-content](https://css-tricks.com/wp-content/uploads/2013/04/align-content.svg)\n```css\n.container {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n## 2. Flex items\n\n#### 2.1 order\n\n![order](https://css-tricks.com/wp-content/uploads/2013/04/order-2.svg)\n```css\n.item {\n  order: <integer>;\n}\n```\n\n#### 2.2 flex-grow\n\n![flex-grow](https://css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg)\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n\n#### 2.3 flex-shrink\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n\n#### 2.4 flex-basis\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n#### 2.5 flex\n\n`flex-grow`, `flex-shrink` 与 `flex-basis`的合并写法\n```css\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n#### 2.6 align-self\n\n![align-self](https://css-tricks.com/wp-content/uploads/2014/05/align-self.svg)\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```","source":"_posts/flexbox伸缩盒布局.md","raw":"---\ntitle: flexbox伸缩盒布局\ndate: 2014-11-21 09:37:20\ntags: CSS\ncategories: 前端\n---\nFlex元素可以让你的布局根据浏览器的大小变化进行自动伸缩\n原文[guide-to-flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\nFlex元素分为flex containers 和 flex items\n\n## 1. Flex container\n\n![container](https://css-tricks.com/wp-content/uploads/2014/05/flex-container.svg)\n\n#### 1.1 display\n用于定义一个flex container 元素\n```css\n.container {\n  display: flex; /* or inline-flex */\n}\n```\n\n#### 1.2 flex-direction\n用于设置主轴\n![flex-direction](https://css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg)\n```css\n.container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n#### 1.3 flex-wrap\n![flex-wrap](https://css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg)\n```css\n.container{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n#### 1.4 flex-flow\n`flex-direction` 与 `flex-wrap` 的合并写法\n默认属性为 `row nowrap`\n\n```css\nflex-flow: <'flex-direction'> || <'flex-wrap'>\n```\n\n#### 1.5 justify-content\n用于flex items在设置主轴上的对齐方式\n![justify-content](https://css-tricks.com/wp-content/uploads/2013/04/justify-content.svg)\n\n```css\n.container {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n#### 1.6 align-items\n用于flex items在设置侧轴(cross-axis)上的对齐方式\n\n![align-items](https://css-tricks.com/wp-content/uploads/2014/05/align-items.svg)\n\n```css\n.container {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n#### 1.7 align-content\n\n![align-content](https://css-tricks.com/wp-content/uploads/2013/04/align-content.svg)\n```css\n.container {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n## 2. Flex items\n\n#### 2.1 order\n\n![order](https://css-tricks.com/wp-content/uploads/2013/04/order-2.svg)\n```css\n.item {\n  order: <integer>;\n}\n```\n\n#### 2.2 flex-grow\n\n![flex-grow](https://css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg)\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n\n#### 2.3 flex-shrink\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n\n#### 2.4 flex-basis\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n#### 2.5 flex\n\n`flex-grow`, `flex-shrink` 与 `flex-basis`的合并写法\n```css\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n#### 2.6 align-self\n\n![align-self](https://css-tricks.com/wp-content/uploads/2014/05/align-self.svg)\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```","slug":"flexbox伸缩盒布局","published":1,"updated":"2016-07-20T02:40:51.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyr4001tycjcgwp4bj2k","content":"<p>Flex元素可以让你的布局根据浏览器的大小变化进行自动伸缩<br>原文<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"external\">guide-to-flexbox</a></p>\n<p>Flex元素分为flex containers 和 flex items</p>\n<h2 id=\"1-Flex-container\"><a href=\"#1-Flex-container\" class=\"headerlink\" title=\"1. Flex container\"></a>1. Flex container</h2><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-container.svg\" alt=\"container\"></p>\n<h4 id=\"1-1-display\"><a href=\"#1-1-display\" class=\"headerlink\" title=\"1.1 display\"></a>1.1 display</h4><p>用于定义一个flex container 元素<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* or inline-flex */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-flex-direction\"><a href=\"#1-2-flex-direction\" class=\"headerlink\" title=\"1.2 flex-direction\"></a>1.2 flex-direction</h4><p>用于设置主轴<br><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg\" alt=\"flex-direction\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-flex-wrap\"><a href=\"#1-3-flex-wrap\" class=\"headerlink\" title=\"1.3 flex-wrap\"></a>1.3 flex-wrap</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg\" alt=\"flex-wrap\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-flex-flow\"><a href=\"#1-4-flex-flow\" class=\"headerlink\" title=\"1.4 flex-flow\"></a>1.4 flex-flow</h4><p><code>flex-direction</code> 与 <code>flex-wrap</code> 的合并写法<br>默认属性为 <code>row nowrap</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flex-flow: &lt;'flex-direction'&gt; || &lt;'flex-wrap'&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"1-5-justify-content\"><a href=\"#1-5-justify-content\" class=\"headerlink\" title=\"1.5 justify-content\"></a>1.5 justify-content</h4><p>用于flex items在设置主轴上的对齐方式<br><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/justify-content.svg\" alt=\"justify-content\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-6-align-items\"><a href=\"#1-6-align-items\" class=\"headerlink\" title=\"1.6 align-items\"></a>1.6 align-items</h4><p>用于flex items在设置侧轴(cross-axis)上的对齐方式</p>\n<p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/align-items.svg\" alt=\"align-items\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-7-align-content\"><a href=\"#1-7-align-content\" class=\"headerlink\" title=\"1.7 align-content\"></a>1.7 align-content</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/align-content.svg\" alt=\"align-content\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-Flex-items\"><a href=\"#2-Flex-items\" class=\"headerlink\" title=\"2. Flex items\"></a>2. Flex items</h2><h4 id=\"2-1-order\"><a href=\"#2-1-order\" class=\"headerlink\" title=\"2.1 order\"></a>2.1 order</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/order-2.svg\" alt=\"order\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-flex-grow\"><a href=\"#2-2-flex-grow\" class=\"headerlink\" title=\"2.2 flex-grow\"></a>2.2 flex-grow</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg\" alt=\"flex-grow\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-flex-shrink\"><a href=\"#2-3-flex-shrink\" class=\"headerlink\" title=\"2.3 flex-shrink\"></a>2.3 flex-shrink</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-flex-basis\"><a href=\"#2-4-flex-basis\" class=\"headerlink\" title=\"2.4 flex-basis\"></a>2.4 flex-basis</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-5-flex\"><a href=\"#2-5-flex\" class=\"headerlink\" title=\"2.5 flex\"></a>2.5 flex</h4><p><code>flex-grow</code>, <code>flex-shrink</code> 与 <code>flex-basis</code>的合并写法<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-6-align-self\"><a href=\"#2-6-align-self\" class=\"headerlink\" title=\"2.6 align-self\"></a>2.6 align-self</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/align-self.svg\" alt=\"align-self\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Flex元素可以让你的布局根据浏览器的大小变化进行自动伸缩<br>原文<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">guide-to-flexbox</a></p>\n<p>Flex元素分为flex containers 和 flex items</p>\n<h2 id=\"1-Flex-container\"><a href=\"#1-Flex-container\" class=\"headerlink\" title=\"1. Flex container\"></a>1. Flex container</h2><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-container.svg\" alt=\"container\"></p>\n<h4 id=\"1-1-display\"><a href=\"#1-1-display\" class=\"headerlink\" title=\"1.1 display\"></a>1.1 display</h4><p>用于定义一个flex container 元素<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* or inline-flex */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-flex-direction\"><a href=\"#1-2-flex-direction\" class=\"headerlink\" title=\"1.2 flex-direction\"></a>1.2 flex-direction</h4><p>用于设置主轴<br><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg\" alt=\"flex-direction\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-flex-wrap\"><a href=\"#1-3-flex-wrap\" class=\"headerlink\" title=\"1.3 flex-wrap\"></a>1.3 flex-wrap</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg\" alt=\"flex-wrap\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-flex-flow\"><a href=\"#1-4-flex-flow\" class=\"headerlink\" title=\"1.4 flex-flow\"></a>1.4 flex-flow</h4><p><code>flex-direction</code> 与 <code>flex-wrap</code> 的合并写法<br>默认属性为 <code>row nowrap</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flex-flow: &lt;'flex-direction'&gt; || &lt;'flex-wrap'&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"1-5-justify-content\"><a href=\"#1-5-justify-content\" class=\"headerlink\" title=\"1.5 justify-content\"></a>1.5 justify-content</h4><p>用于flex items在设置主轴上的对齐方式<br><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/justify-content.svg\" alt=\"justify-content\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-6-align-items\"><a href=\"#1-6-align-items\" class=\"headerlink\" title=\"1.6 align-items\"></a>1.6 align-items</h4><p>用于flex items在设置侧轴(cross-axis)上的对齐方式</p>\n<p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/align-items.svg\" alt=\"align-items\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-7-align-content\"><a href=\"#1-7-align-content\" class=\"headerlink\" title=\"1.7 align-content\"></a>1.7 align-content</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/align-content.svg\" alt=\"align-content\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-Flex-items\"><a href=\"#2-Flex-items\" class=\"headerlink\" title=\"2. Flex items\"></a>2. Flex items</h2><h4 id=\"2-1-order\"><a href=\"#2-1-order\" class=\"headerlink\" title=\"2.1 order\"></a>2.1 order</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2013/04/order-2.svg\" alt=\"order\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-flex-grow\"><a href=\"#2-2-flex-grow\" class=\"headerlink\" title=\"2.2 flex-grow\"></a>2.2 flex-grow</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg\" alt=\"flex-grow\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-flex-shrink\"><a href=\"#2-3-flex-shrink\" class=\"headerlink\" title=\"2.3 flex-shrink\"></a>2.3 flex-shrink</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-flex-basis\"><a href=\"#2-4-flex-basis\" class=\"headerlink\" title=\"2.4 flex-basis\"></a>2.4 flex-basis</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-5-flex\"><a href=\"#2-5-flex\" class=\"headerlink\" title=\"2.5 flex\"></a>2.5 flex</h4><p><code>flex-grow</code>, <code>flex-shrink</code> 与 <code>flex-basis</code>的合并写法<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-6-align-self\"><a href=\"#2-6-align-self\" class=\"headerlink\" title=\"2.6 align-self\"></a>2.6 align-self</h4><p><img src=\"https://css-tricks.com/wp-content/uploads/2014/05/align-self.svg\" alt=\"align-self\"><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"客户端检测","date":"2015-06-04T05:36:19.000Z","_content":"\n# 客户端检测\n-----------\n\n### 能力检测（特性检测）\n>识别客户端浏览器的能力\n\n### 怪癖检测\n>识别浏览器的特殊行为\n\n### 用户代理检测\n通过检测用户代理字符串来确定实际使用的浏览器\n\n- 识别呈现引擎\nIE、Gecko、Webkit、KHTML、Opera\n- 识别浏览器\n- 识别平台\n- 识别Windows操作系统\n- 识别移动设备\n- 识别游戏主机系统\n\n```js\nvar client = function () {\n  //呈现引擎\n  var engine = {\n    ie: 0,\n    gecko: 0,\n    webkit: 0,\n    kthml: 0,\n    opera: 0,\n\n    //版本号\n    ver: null\n  }\n\n  //浏览器\n  var browser = {\n    //主要浏览器\n    ie: 0,\n    firefox: 0,\n    safari: 0,\n    opera: 0,\n    chrome: 0,\n\n    //版本号\n    ver: null\n  }\n\n  //平台、设备、主机\n  var system = {\n    win: false,\n    mac: false,\n    x11: false,\n\n    //移动设备\n    iphone: false,\n    ipod: false,\n    ipad: false,\n    ios: false,\n    android: false,\n    nokiaN: false,\n    winMobile: false,\n\n    //主机\n    wii: false,\n    ps: false\n  }\n\n  //检测呈现引擎和浏览器\n  var ua = navigator.userAgent\n  if (window.opera) {\n    engine.ver = browser.ver = window.opera.version()\n    engine.opera = browser.opera = parseFloat(engine.ver)\n  } else if (/AppleWebkit\\/(\\S+)/.test(ua)) {\n    engine.ver = RegExp[\"$1\"]\n    engine.webkit = parseFloat(engine.ver)\n\n    //确定是Chrome还是Safari\n    if (/Chrome\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.chrome = parseFloat(browser.ver)\n    } else if (/Version\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.safari = parseFloat(browser.ver)\n    } else {\n      //近似确定版本号\n      var safariVersion = 1\n      if(engine.webkit < 100) {\n        safariVersion = 1\n      } else if (engine.webkit < 312) {\n        safariVersion = 1.2\n      } else if (engine.webkit < 412) {\n        safariVersion = 1.3\n      } else {\n        safariVersion = 2\n      }\n\n      browser.safari = browser.ver = safariVersion\n    }\n  } else if (/KHTML\\/(\\S+)/.test(ua) || /Konqueror\\/([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"]\n    engine.khtml = browser.konq = parseFloat(engine.ver)\n  } else if (/rv:([^\\)]+)\\) Gecko\\/d{8}/.test(ua)) {\n    engine.ver = RegExp[\"$1\"]\n    engine.gecko = parseFloat(engine.ver)\n\n    //确定是不是Firefox\n    if (/Firefox\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.firefox = parseFloat(browser.ver)\n    }\n  } else if (/MSIE ([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"]\n    engine.ie = browser.ie = parseFloat(engine.ver)\n  }\n\n  //检测浏览器\n  browser.ie = engine.ie\n  browser.opera= engine.opera\n\n  //检测平台\n  var p = navigator.platform\n  system.win = p.indexOf(\"Win\") == 0\n  system.mac = p.indexOf(\"Mac\") == 0\n  system.x11 = (p == \"X11\") || (p.indexOf(\"Linux\") == 0)\n\n  //检测Windows操作系统\n  if (system.win) {\n    if (/Win(?:dows)?([^do]{2})\\s?(\\d+\\.\\d+)?/.test(ua)) {\n      if (RegExp[\"$1\"] == \"NT\") {\n        switch (RegExp[\"$2\"]) {\n          case \"5.0\":\n            system.win = \"2000\"\n            break;\n          case \"5.1\":\n            system.win = \"XP\"\n            break;\n          case \"6.0\":\n            system.win = \"Vista\"\n            break;\n          case \"6.1\":\n            system.win = \"7\"\n            break;\n          default:\n            system.win = \"NT\"\n            break;\n        }\n      } else if (RegExp[\"$1\"] == \"9x\") {\n        system.win = \"ME\"\n      } else {\n        system.win = RegExp[\"$1\"]\n      }\n    }\n  }\n\n  //移动设备\n  system.iphone = ua.indexOf(\"iPhone\") > -1\n  system.ipod = ua.indexOf(\"iPod\") > -1\n  system.ipad = ua.indexOf(\"iPad\") > -1\n  system.nokiaN = ua.indexOf(\"NokiaN\") > -1\n\n  //windows mobile\n  if (system.win == \"CE\") {\n    system.winMbile = system.win\n  } else if (system.win == \"Ph\") {\n    if (/Windows Phone OS (\\d+.\\d+)/.test(ua)) {\n      system.win = \"Phone\"\n      system.winMobile = parseFloat(RegExp([\"$1\"]))\n    }\n  }\n\n  //检测iOS版本\n  if (system.mac && ua.indexOf(\"Mobile\") > -1) {\n    if(/CPU (?:iPhone )?OS (\\d+\\.\\d+)/.test(ua)) {\n      system.ios = parseFloat(RegExp.$1.replace(\"_\", \".\"))\n    } else {\n      system.ios = 2\n    }\n  }\n\n  //检测Android版本\n  if (/Android (\\d+\\.\\d+)/.test(ua)) {\n    system.android = parseFloat(RegExp.$1)\n  }\n  //主机游戏系统\n  system.wii = ua.indexOf(\"Wii\") > -1\n  system.ps = /playstation/i.test(ua)\n\n  //返回\n  return {\n    engine: engine,\n    browser: browser,\n    system: system\n  }\n}\n```","source":"_posts/客户端检测.md","raw":"---\ntitle: 客户端检测\ndate: 2015-06-04 13:36:19\ntags: Javascript\ncategories: 编程\n---\n\n# 客户端检测\n-----------\n\n### 能力检测（特性检测）\n>识别客户端浏览器的能力\n\n### 怪癖检测\n>识别浏览器的特殊行为\n\n### 用户代理检测\n通过检测用户代理字符串来确定实际使用的浏览器\n\n- 识别呈现引擎\nIE、Gecko、Webkit、KHTML、Opera\n- 识别浏览器\n- 识别平台\n- 识别Windows操作系统\n- 识别移动设备\n- 识别游戏主机系统\n\n```js\nvar client = function () {\n  //呈现引擎\n  var engine = {\n    ie: 0,\n    gecko: 0,\n    webkit: 0,\n    kthml: 0,\n    opera: 0,\n\n    //版本号\n    ver: null\n  }\n\n  //浏览器\n  var browser = {\n    //主要浏览器\n    ie: 0,\n    firefox: 0,\n    safari: 0,\n    opera: 0,\n    chrome: 0,\n\n    //版本号\n    ver: null\n  }\n\n  //平台、设备、主机\n  var system = {\n    win: false,\n    mac: false,\n    x11: false,\n\n    //移动设备\n    iphone: false,\n    ipod: false,\n    ipad: false,\n    ios: false,\n    android: false,\n    nokiaN: false,\n    winMobile: false,\n\n    //主机\n    wii: false,\n    ps: false\n  }\n\n  //检测呈现引擎和浏览器\n  var ua = navigator.userAgent\n  if (window.opera) {\n    engine.ver = browser.ver = window.opera.version()\n    engine.opera = browser.opera = parseFloat(engine.ver)\n  } else if (/AppleWebkit\\/(\\S+)/.test(ua)) {\n    engine.ver = RegExp[\"$1\"]\n    engine.webkit = parseFloat(engine.ver)\n\n    //确定是Chrome还是Safari\n    if (/Chrome\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.chrome = parseFloat(browser.ver)\n    } else if (/Version\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.safari = parseFloat(browser.ver)\n    } else {\n      //近似确定版本号\n      var safariVersion = 1\n      if(engine.webkit < 100) {\n        safariVersion = 1\n      } else if (engine.webkit < 312) {\n        safariVersion = 1.2\n      } else if (engine.webkit < 412) {\n        safariVersion = 1.3\n      } else {\n        safariVersion = 2\n      }\n\n      browser.safari = browser.ver = safariVersion\n    }\n  } else if (/KHTML\\/(\\S+)/.test(ua) || /Konqueror\\/([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"]\n    engine.khtml = browser.konq = parseFloat(engine.ver)\n  } else if (/rv:([^\\)]+)\\) Gecko\\/d{8}/.test(ua)) {\n    engine.ver = RegExp[\"$1\"]\n    engine.gecko = parseFloat(engine.ver)\n\n    //确定是不是Firefox\n    if (/Firefox\\/(\\S+)/.test(ua)) {\n      browser.ver = RegExp[\"$1\"]\n      browser.firefox = parseFloat(browser.ver)\n    }\n  } else if (/MSIE ([^;]+)/.test(ua)) {\n    engine.ver = browser.ver = RegExp[\"$1\"]\n    engine.ie = browser.ie = parseFloat(engine.ver)\n  }\n\n  //检测浏览器\n  browser.ie = engine.ie\n  browser.opera= engine.opera\n\n  //检测平台\n  var p = navigator.platform\n  system.win = p.indexOf(\"Win\") == 0\n  system.mac = p.indexOf(\"Mac\") == 0\n  system.x11 = (p == \"X11\") || (p.indexOf(\"Linux\") == 0)\n\n  //检测Windows操作系统\n  if (system.win) {\n    if (/Win(?:dows)?([^do]{2})\\s?(\\d+\\.\\d+)?/.test(ua)) {\n      if (RegExp[\"$1\"] == \"NT\") {\n        switch (RegExp[\"$2\"]) {\n          case \"5.0\":\n            system.win = \"2000\"\n            break;\n          case \"5.1\":\n            system.win = \"XP\"\n            break;\n          case \"6.0\":\n            system.win = \"Vista\"\n            break;\n          case \"6.1\":\n            system.win = \"7\"\n            break;\n          default:\n            system.win = \"NT\"\n            break;\n        }\n      } else if (RegExp[\"$1\"] == \"9x\") {\n        system.win = \"ME\"\n      } else {\n        system.win = RegExp[\"$1\"]\n      }\n    }\n  }\n\n  //移动设备\n  system.iphone = ua.indexOf(\"iPhone\") > -1\n  system.ipod = ua.indexOf(\"iPod\") > -1\n  system.ipad = ua.indexOf(\"iPad\") > -1\n  system.nokiaN = ua.indexOf(\"NokiaN\") > -1\n\n  //windows mobile\n  if (system.win == \"CE\") {\n    system.winMbile = system.win\n  } else if (system.win == \"Ph\") {\n    if (/Windows Phone OS (\\d+.\\d+)/.test(ua)) {\n      system.win = \"Phone\"\n      system.winMobile = parseFloat(RegExp([\"$1\"]))\n    }\n  }\n\n  //检测iOS版本\n  if (system.mac && ua.indexOf(\"Mobile\") > -1) {\n    if(/CPU (?:iPhone )?OS (\\d+\\.\\d+)/.test(ua)) {\n      system.ios = parseFloat(RegExp.$1.replace(\"_\", \".\"))\n    } else {\n      system.ios = 2\n    }\n  }\n\n  //检测Android版本\n  if (/Android (\\d+\\.\\d+)/.test(ua)) {\n    system.android = parseFloat(RegExp.$1)\n  }\n  //主机游戏系统\n  system.wii = ua.indexOf(\"Wii\") > -1\n  system.ps = /playstation/i.test(ua)\n\n  //返回\n  return {\n    engine: engine,\n    browser: browser,\n    system: system\n  }\n}\n```","slug":"客户端检测","published":1,"updated":"2016-07-20T02:40:51.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyrb001yycjcwjxgb94u","content":"<h1 id=\"客户端检测\"><a href=\"#客户端检测\" class=\"headerlink\" title=\"客户端检测\"></a>客户端检测</h1><hr>\n<h3 id=\"能力检测（特性检测）\"><a href=\"#能力检测（特性检测）\" class=\"headerlink\" title=\"能力检测（特性检测）\"></a>能力检测（特性检测）</h3><blockquote>\n<p>识别客户端浏览器的能力</p>\n</blockquote>\n<h3 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h3><blockquote>\n<p>识别浏览器的特殊行为</p>\n</blockquote>\n<h3 id=\"用户代理检测\"><a href=\"#用户代理检测\" class=\"headerlink\" title=\"用户代理检测\"></a>用户代理检测</h3><p>通过检测用户代理字符串来确定实际使用的浏览器</p>\n<ul>\n<li>识别呈现引擎<br>IE、Gecko、Webkit、KHTML、Opera</li>\n<li>识别浏览器</li>\n<li>识别平台</li>\n<li>识别Windows操作系统</li>\n<li>识别移动设备</li>\n<li>识别游戏主机系统</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> client = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//呈现引擎</span></div><div class=\"line\">  <span class=\"keyword\">var</span> engine = &#123;</div><div class=\"line\">    ie: <span class=\"number\">0</span>,</div><div class=\"line\">    gecko: <span class=\"number\">0</span>,</div><div class=\"line\">    webkit: <span class=\"number\">0</span>,</div><div class=\"line\">    kthml: <span class=\"number\">0</span>,</div><div class=\"line\">    opera: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//版本号</span></div><div class=\"line\">    ver: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//浏览器</span></div><div class=\"line\">  <span class=\"keyword\">var</span> browser = &#123;</div><div class=\"line\">    <span class=\"comment\">//主要浏览器</span></div><div class=\"line\">    ie: <span class=\"number\">0</span>,</div><div class=\"line\">    firefox: <span class=\"number\">0</span>,</div><div class=\"line\">    safari: <span class=\"number\">0</span>,</div><div class=\"line\">    opera: <span class=\"number\">0</span>,</div><div class=\"line\">    chrome: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//版本号</span></div><div class=\"line\">    ver: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//平台、设备、主机</span></div><div class=\"line\">  <span class=\"keyword\">var</span> system = &#123;</div><div class=\"line\">    win: <span class=\"literal\">false</span>,</div><div class=\"line\">    mac: <span class=\"literal\">false</span>,</div><div class=\"line\">    x11: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//移动设备</span></div><div class=\"line\">    iphone: <span class=\"literal\">false</span>,</div><div class=\"line\">    ipod: <span class=\"literal\">false</span>,</div><div class=\"line\">    ipad: <span class=\"literal\">false</span>,</div><div class=\"line\">    ios: <span class=\"literal\">false</span>,</div><div class=\"line\">    android: <span class=\"literal\">false</span>,</div><div class=\"line\">    nokiaN: <span class=\"literal\">false</span>,</div><div class=\"line\">    winMobile: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//主机</span></div><div class=\"line\">    wii: <span class=\"literal\">false</span>,</div><div class=\"line\">    ps: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测呈现引擎和浏览器</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ua = navigator.userAgent</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.opera) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">window</span>.opera.version()</div><div class=\"line\">    engine.opera = browser.opera = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/AppleWebkit\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.webkit = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//确定是Chrome还是Safari</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Chrome\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.chrome = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/Version\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.safari = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//近似确定版本号</span></div><div class=\"line\">      <span class=\"keyword\">var</span> safariVersion = <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(engine.webkit &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">312</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1.2</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">412</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1.3</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">2</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      browser.safari = browser.ver = safariVersion</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/KHTML\\/(\\S+)/</span>.test(ua) || <span class=\"regexp\">/Konqueror\\/([^;]+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.khtml = browser.konq = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/rv:([^\\)]+)\\) Gecko\\/d&#123;8&#125;/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.gecko = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//确定是不是Firefox</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Firefox\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.firefox = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/MSIE ([^;]+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.ie = browser.ie = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测浏览器</span></div><div class=\"line\">  browser.ie = engine.ie</div><div class=\"line\">  browser.opera= engine.opera</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测平台</span></div><div class=\"line\">  <span class=\"keyword\">var</span> p = navigator.platform</div><div class=\"line\">  system.win = p.indexOf(<span class=\"string\">\"Win\"</span>) == <span class=\"number\">0</span></div><div class=\"line\">  system.mac = p.indexOf(<span class=\"string\">\"Mac\"</span>) == <span class=\"number\">0</span></div><div class=\"line\">  system.x11 = (p == <span class=\"string\">\"X11\"</span>) || (p.indexOf(<span class=\"string\">\"Linux\"</span>) == <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测Windows操作系统</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.win) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Win(?:dows)?([^do]&#123;2&#125;)\\s?(\\d+\\.\\d+)?/</span>.test(ua)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"NT\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$2\"</span>]) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.0\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"2000\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.1\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"XP\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.0\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"Vista\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.1\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"7\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"NT\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"9x\"</span>) &#123;</div><div class=\"line\">        system.win = <span class=\"string\">\"ME\"</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        system.win = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//移动设备</span></div><div class=\"line\">  system.iphone = ua.indexOf(<span class=\"string\">\"iPhone\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ipod = ua.indexOf(<span class=\"string\">\"iPod\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ipad = ua.indexOf(<span class=\"string\">\"iPad\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.nokiaN = ua.indexOf(<span class=\"string\">\"NokiaN\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//windows mobile</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"CE\"</span>) &#123;</div><div class=\"line\">    system.winMbile = system.win</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"Ph\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Windows Phone OS (\\d+.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">      system.win = <span class=\"string\">\"Phone\"</span></div><div class=\"line\">      system.winMobile = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>([<span class=\"string\">\"$1\"</span>]))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测iOS版本</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.mac &amp;&amp; ua.indexOf(<span class=\"string\">\"Mobile\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"regexp\">/CPU (?:iPhone )?OS (\\d+\\.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">      system.ios = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>replace(<span class=\"string\">\"_\"</span>, <span class=\"string\">\".\"</span>))</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      system.ios = <span class=\"number\">2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测Android版本</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">    system.android = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//主机游戏系统</span></div><div class=\"line\">  system.wii = ua.indexOf(<span class=\"string\">\"Wii\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ps = <span class=\"regexp\">/playstation/i</span>.test(ua)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//返回</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    engine: engine,</div><div class=\"line\">    browser: browser,</div><div class=\"line\">    system: system</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"客户端检测\"><a href=\"#客户端检测\" class=\"headerlink\" title=\"客户端检测\"></a>客户端检测</h1><hr>\n<h3 id=\"能力检测（特性检测）\"><a href=\"#能力检测（特性检测）\" class=\"headerlink\" title=\"能力检测（特性检测）\"></a>能力检测（特性检测）</h3><blockquote>\n<p>识别客户端浏览器的能力</p>\n</blockquote>\n<h3 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h3><blockquote>\n<p>识别浏览器的特殊行为</p>\n</blockquote>\n<h3 id=\"用户代理检测\"><a href=\"#用户代理检测\" class=\"headerlink\" title=\"用户代理检测\"></a>用户代理检测</h3><p>通过检测用户代理字符串来确定实际使用的浏览器</p>\n<ul>\n<li>识别呈现引擎<br>IE、Gecko、Webkit、KHTML、Opera</li>\n<li>识别浏览器</li>\n<li>识别平台</li>\n<li>识别Windows操作系统</li>\n<li>识别移动设备</li>\n<li>识别游戏主机系统</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> client = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//呈现引擎</span></div><div class=\"line\">  <span class=\"keyword\">var</span> engine = &#123;</div><div class=\"line\">    ie: <span class=\"number\">0</span>,</div><div class=\"line\">    gecko: <span class=\"number\">0</span>,</div><div class=\"line\">    webkit: <span class=\"number\">0</span>,</div><div class=\"line\">    kthml: <span class=\"number\">0</span>,</div><div class=\"line\">    opera: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//版本号</span></div><div class=\"line\">    ver: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//浏览器</span></div><div class=\"line\">  <span class=\"keyword\">var</span> browser = &#123;</div><div class=\"line\">    <span class=\"comment\">//主要浏览器</span></div><div class=\"line\">    ie: <span class=\"number\">0</span>,</div><div class=\"line\">    firefox: <span class=\"number\">0</span>,</div><div class=\"line\">    safari: <span class=\"number\">0</span>,</div><div class=\"line\">    opera: <span class=\"number\">0</span>,</div><div class=\"line\">    chrome: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//版本号</span></div><div class=\"line\">    ver: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//平台、设备、主机</span></div><div class=\"line\">  <span class=\"keyword\">var</span> system = &#123;</div><div class=\"line\">    win: <span class=\"literal\">false</span>,</div><div class=\"line\">    mac: <span class=\"literal\">false</span>,</div><div class=\"line\">    x11: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//移动设备</span></div><div class=\"line\">    iphone: <span class=\"literal\">false</span>,</div><div class=\"line\">    ipod: <span class=\"literal\">false</span>,</div><div class=\"line\">    ipad: <span class=\"literal\">false</span>,</div><div class=\"line\">    ios: <span class=\"literal\">false</span>,</div><div class=\"line\">    android: <span class=\"literal\">false</span>,</div><div class=\"line\">    nokiaN: <span class=\"literal\">false</span>,</div><div class=\"line\">    winMobile: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//主机</span></div><div class=\"line\">    wii: <span class=\"literal\">false</span>,</div><div class=\"line\">    ps: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测呈现引擎和浏览器</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ua = navigator.userAgent</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.opera) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">window</span>.opera.version()</div><div class=\"line\">    engine.opera = browser.opera = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/AppleWebkit\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.webkit = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//确定是Chrome还是Safari</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Chrome\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.chrome = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/Version\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.safari = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//近似确定版本号</span></div><div class=\"line\">      <span class=\"keyword\">var</span> safariVersion = <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(engine.webkit &lt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">312</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1.2</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (engine.webkit &lt; <span class=\"number\">412</span>) &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">1.3</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        safariVersion = <span class=\"number\">2</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      browser.safari = browser.ver = safariVersion</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/KHTML\\/(\\S+)/</span>.test(ua) || <span class=\"regexp\">/Konqueror\\/([^;]+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.khtml = browser.konq = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/rv:([^\\)]+)\\) Gecko\\/d&#123;8&#125;/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.gecko = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//确定是不是Firefox</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Firefox\\/(\\S+)/</span>.test(ua)) &#123;</div><div class=\"line\">      browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      browser.firefox = <span class=\"built_in\">parseFloat</span>(browser.ver)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/MSIE ([^;]+)/</span>.test(ua)) &#123;</div><div class=\"line\">    engine.ver = browser.ver = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">    engine.ie = browser.ie = <span class=\"built_in\">parseFloat</span>(engine.ver)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测浏览器</span></div><div class=\"line\">  browser.ie = engine.ie</div><div class=\"line\">  browser.opera= engine.opera</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测平台</span></div><div class=\"line\">  <span class=\"keyword\">var</span> p = navigator.platform</div><div class=\"line\">  system.win = p.indexOf(<span class=\"string\">\"Win\"</span>) == <span class=\"number\">0</span></div><div class=\"line\">  system.mac = p.indexOf(<span class=\"string\">\"Mac\"</span>) == <span class=\"number\">0</span></div><div class=\"line\">  system.x11 = (p == <span class=\"string\">\"X11\"</span>) || (p.indexOf(<span class=\"string\">\"Linux\"</span>) == <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测Windows操作系统</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.win) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Win(?:dows)?([^do]&#123;2&#125;)\\s?(\\d+\\.\\d+)?/</span>.test(ua)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"NT\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$2\"</span>]) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.0\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"2000\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"5.1\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"XP\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.0\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"Vista\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"string\">\"6.1\"</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"7\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">            system.win = <span class=\"string\">\"NT\"</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>] == <span class=\"string\">\"9x\"</span>) &#123;</div><div class=\"line\">        system.win = <span class=\"string\">\"ME\"</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        system.win = <span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//移动设备</span></div><div class=\"line\">  system.iphone = ua.indexOf(<span class=\"string\">\"iPhone\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ipod = ua.indexOf(<span class=\"string\">\"iPod\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ipad = ua.indexOf(<span class=\"string\">\"iPad\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.nokiaN = ua.indexOf(<span class=\"string\">\"NokiaN\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//windows mobile</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"CE\"</span>) &#123;</div><div class=\"line\">    system.winMbile = system.win</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (system.win == <span class=\"string\">\"Ph\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Windows Phone OS (\\d+.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">      system.win = <span class=\"string\">\"Phone\"</span></div><div class=\"line\">      system.winMobile = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>([<span class=\"string\">\"$1\"</span>]))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测iOS版本</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (system.mac &amp;&amp; ua.indexOf(<span class=\"string\">\"Mobile\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"regexp\">/CPU (?:iPhone )?OS (\\d+\\.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">      system.ios = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>replace(<span class=\"string\">\"_\"</span>, <span class=\"string\">\".\"</span>))</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      system.ios = <span class=\"number\">2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测Android版本</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/Android (\\d+\\.\\d+)/</span>.test(ua)) &#123;</div><div class=\"line\">    system.android = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//主机游戏系统</span></div><div class=\"line\">  system.wii = ua.indexOf(<span class=\"string\">\"Wii\"</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  system.ps = <span class=\"regexp\">/playstation/i</span>.test(ua)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//返回</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    engine: engine,</div><div class=\"line\">    browser: browser,</div><div class=\"line\">    system: system</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"点击事件绑定","date":"2015-03-25T10:59:53.000Z","_content":"\n网页界面中与用户的交互通常是通过各种事件来达成的；\n在各种事件之中，点击事件 往往是最常见、最通用的一种界面事件\n\n## 点击事件\n------------------------------------\n```js\nvar actionList = {\n  'action1': function () {\n    func1 ()\n  },\n  'action2': function () {\n    func2 ()\n  },\n  ...\n}\n\n$body.on('click', ['data-action'], function () {\n  var actionName = $(this).data('action')\n  var action = actionList[actionName]\n  if ($.isFunction(action)) action()\n})\n\n$.extend(actionList, {\n  'more-action': function () {\n    // ...\n  }\n})\n```\n----------------------------------\n\n\n- CSS 样式\n```css\n[data-action] {\n  cursor: pointer;\n}\n```","source":"_posts/点击事件绑定.md","raw":"---\ntitle: 点击事件绑定\ndate: 2015-03-25 18:59:53\ntags: Jquery\ncategories: 前端\n---\n\n网页界面中与用户的交互通常是通过各种事件来达成的；\n在各种事件之中，点击事件 往往是最常见、最通用的一种界面事件\n\n## 点击事件\n------------------------------------\n```js\nvar actionList = {\n  'action1': function () {\n    func1 ()\n  },\n  'action2': function () {\n    func2 ()\n  },\n  ...\n}\n\n$body.on('click', ['data-action'], function () {\n  var actionName = $(this).data('action')\n  var action = actionList[actionName]\n  if ($.isFunction(action)) action()\n})\n\n$.extend(actionList, {\n  'more-action': function () {\n    // ...\n  }\n})\n```\n----------------------------------\n\n\n- CSS 样式\n```css\n[data-action] {\n  cursor: pointer;\n}\n```","slug":"点击事件绑定","published":1,"updated":"2016-07-20T02:40:51.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyrd0021ycjcty0vh2b4","content":"<p>网页界面中与用户的交互通常是通过各种事件来达成的；<br>在各种事件之中，点击事件 往往是最常见、最通用的一种界面事件</p>\n<h2 id=\"点击事件\"><a href=\"#点击事件\" class=\"headerlink\" title=\"点击事件\"></a>点击事件</h2><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> actionList = &#123;</div><div class=\"line\">  <span class=\"string\">'action1'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    func1 ()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'action2'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    func2 ()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$body.on(<span class=\"string\">'click'</span>, [<span class=\"string\">'data-action'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> actionName = $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'action'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> action = actionList[actionName]</div><div class=\"line\">  <span class=\"keyword\">if</span> ($.isFunction(action)) action()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.extend(actionList, &#123;</div><div class=\"line\">  <span class=\"string\">'more-action'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>CSS 样式<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[data-action]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>网页界面中与用户的交互通常是通过各种事件来达成的；<br>在各种事件之中，点击事件 往往是最常见、最通用的一种界面事件</p>\n<h2 id=\"点击事件\"><a href=\"#点击事件\" class=\"headerlink\" title=\"点击事件\"></a>点击事件</h2><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> actionList = &#123;</div><div class=\"line\">  <span class=\"string\">'action1'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    func1 ()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'action2'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    func2 ()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$body.on(<span class=\"string\">'click'</span>, [<span class=\"string\">'data-action'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> actionName = $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'action'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> action = actionList[actionName]</div><div class=\"line\">  <span class=\"keyword\">if</span> ($.isFunction(action)) action()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$.extend(actionList, &#123;</div><div class=\"line\">  <span class=\"string\">'more-action'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>CSS 样式<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[data-action]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Vue.js","date":"2015-09-09T09:46:23.000Z","_content":"\n# 学习资源\n[中文文档](http://cn.vuejs.org/guide/)\n[vue-cli](https://github.com/vuejs/vue-cli)\n[vue-resource](https://github.com/vuejs/vue-resource)\n[vue-router](https://github.com/vuejs/vue-router)\n[vuex](https://github.com/vuejs/vuex)\n\n# 学习demo\n[vue-template](https://github.com/xieQin/vue-template)\n[vue-todomvc](https://github.com/xieQin/vue-todomvc)\n[quote-demo](https://github.com/xieQin/quote-demo)\n\n# 学习总结\n比Angular更容易上手更简洁的前端框架\n吸收了很多React的思想\n\n是一个用于创建界面的库，也是一个精简的MVVM\n\n专注于MVVM模型的ViewModal层，通过双向数据绑定将View层和Modal层连接起来\n\n实际的DOM封装和输出都抽象成Directives和Filters","source":"_posts/Vue.md","raw":"---\ntitle: Vue.js\ndate: 2015-09-9 17:46:23\ntags: Vue\ncategories: Javascript\n---\n\n# 学习资源\n[中文文档](http://cn.vuejs.org/guide/)\n[vue-cli](https://github.com/vuejs/vue-cli)\n[vue-resource](https://github.com/vuejs/vue-resource)\n[vue-router](https://github.com/vuejs/vue-router)\n[vuex](https://github.com/vuejs/vuex)\n\n# 学习demo\n[vue-template](https://github.com/xieQin/vue-template)\n[vue-todomvc](https://github.com/xieQin/vue-todomvc)\n[quote-demo](https://github.com/xieQin/quote-demo)\n\n# 学习总结\n比Angular更容易上手更简洁的前端框架\n吸收了很多React的思想\n\n是一个用于创建界面的库，也是一个精简的MVVM\n\n专注于MVVM模型的ViewModal层，通过双向数据绑定将View层和Modal层连接起来\n\n实际的DOM封装和输出都抽象成Directives和Filters","slug":"Vue","published":1,"updated":"2016-07-20T02:40:51.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqubkyrn002kycjcunu9znwv","content":"<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"http://cn.vuejs.org/guide/\" target=\"_blank\" rel=\"external\">中文文档</a><br><a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">vue-cli</a><br><a href=\"https://github.com/vuejs/vue-resource\" target=\"_blank\" rel=\"external\">vue-resource</a><br><a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router</a><br><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a></p>\n<h1 id=\"学习demo\"><a href=\"#学习demo\" class=\"headerlink\" title=\"学习demo\"></a>学习demo</h1><p><a href=\"https://github.com/xieQin/vue-template\" target=\"_blank\" rel=\"external\">vue-template</a><br><a href=\"https://github.com/xieQin/vue-todomvc\" target=\"_blank\" rel=\"external\">vue-todomvc</a><br><a href=\"https://github.com/xieQin/quote-demo\" target=\"_blank\" rel=\"external\">quote-demo</a></p>\n<h1 id=\"学习总结\"><a href=\"#学习总结\" class=\"headerlink\" title=\"学习总结\"></a>学习总结</h1><p>比Angular更容易上手更简洁的前端框架<br>吸收了很多React的思想</p>\n<p>是一个用于创建界面的库，也是一个精简的MVVM</p>\n<p>专注于MVVM模型的ViewModal层，通过双向数据绑定将View层和Modal层连接起来</p>\n<p>实际的DOM封装和输出都抽象成Directives和Filters</p>\n","excerpt":"","more":"<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p><a href=\"http://cn.vuejs.org/guide/\">中文文档</a><br><a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a><br><a href=\"https://github.com/vuejs/vue-resource\">vue-resource</a><br><a href=\"https://github.com/vuejs/vue-router\">vue-router</a><br><a href=\"https://github.com/vuejs/vuex\">vuex</a></p>\n<h1 id=\"学习demo\"><a href=\"#学习demo\" class=\"headerlink\" title=\"学习demo\"></a>学习demo</h1><p><a href=\"https://github.com/xieQin/vue-template\">vue-template</a><br><a href=\"https://github.com/xieQin/vue-todomvc\">vue-todomvc</a><br><a href=\"https://github.com/xieQin/quote-demo\">quote-demo</a></p>\n<h1 id=\"学习总结\"><a href=\"#学习总结\" class=\"headerlink\" title=\"学习总结\"></a>学习总结</h1><p>比Angular更容易上手更简洁的前端框架<br>吸收了很多React的思想</p>\n<p>是一个用于创建界面的库，也是一个精简的MVVM</p>\n<p>专注于MVVM模型的ViewModal层，通过双向数据绑定将View层和Modal层连接起来</p>\n<p>实际的DOM封装和输出都抽象成Directives和Filters</p>\n"},{"layout":"es6","title":"Generator函数","date":"2016-07-20T10:13:26.000Z","_content":"","source":"_posts/Generator函数.md","raw":"layout: es6\ntitle: Generator函数\ndate: 2016-07-20 18:13:26\ntags:\n---\n","slug":"Generator函数","published":1,"updated":"2016-07-20T10:13:26.379Z","_id":"ciquqe2o300000ojchbq4fzrs","comments":1,"photos":[],"link":"","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ciqubkyov0000ycjc0u2uewo5","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkyp60004ycjcec1gxqps"},{"post_id":"ciqubkypa0006ycjcmw0mzt58","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkypd000aycjcy6vr0lnt"},{"post_id":"ciqubkyp80005ycjc0vqfp56a","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkype000cycjcyscrog76"},{"post_id":"ciqubkypm000dycjc0y5jdi83","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkyq1000lycjcumn2dasa"},{"post_id":"ciqubkypw000iycjcc9n4032m","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkyq4000qycjc6ntei67o"},{"post_id":"ciqubkyq1000mycjcsvf3w1o8","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkyq6000tycjc4iuthpra"},{"post_id":"ciqubkypq000fycjcdbobskve","category_id":"ciqubkyq0000kycjc1gj9o9s5","_id":"ciqubkyqa000xycjchwak2dvq"},{"post_id":"ciqubkyq4000rycjcxu0xhgiy","category_id":"ciqubkyq9000wycjcfklyf5o1","_id":"ciqubkyqn0016ycjcct2jl8gl"},{"post_id":"ciqubkyqg0011ycjcgylr5g29","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkyqr001aycjc7kuzsa3o"},{"post_id":"ciqubkyq6000uycjcq943qg07","category_id":"ciqubkyqi0012ycjcf6n65l72","_id":"ciqubkyqu001eycjclgcitqf5"},{"post_id":"ciqubkyqo0017ycjcd1k4eot3","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkyqw001jycjcy593umya"},{"post_id":"ciqubkyqa000yycjcbz9alw3g","category_id":"ciqubkyqi0012ycjcf6n65l72","_id":"ciqubkyqy001mycjcgcpm2oqz"},{"post_id":"ciqubkyqv001iycjcjqhsaea0","category_id":"ciqubkyqi0012ycjcf6n65l72","_id":"ciqubkyr4001sycjcsma0gifn"},{"post_id":"ciqubkyqd000zycjcsu5nmsuf","category_id":"ciqubkyqi0012ycjcf6n65l72","_id":"ciqubkyra001wycjcx4v8idjw"},{"post_id":"ciqubkyqw001lycjcdypfnphp","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkyrc0020ycjch1pot066"},{"post_id":"ciqubkyql0014ycjcn62exp3k","category_id":"ciqubkyqz001nycjc347be9qa","_id":"ciqubkyre0023ycjcml5k7mp5"},{"post_id":"ciqubkyr4001tycjcgwp4bj2k","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkyri0027ycjc92apnlvv"},{"post_id":"ciqubkyrb001yycjcwjxgb94u","category_id":"ciqubkypc0008ycjclnouqlx8","_id":"ciqubkyrj0029ycjc4ub9pkre"},{"post_id":"ciqubkyqs001cycjc082mfghm","category_id":"ciqubkyr9001vycjc4p81awto","_id":"ciqubkyrk002cycjcbix24a9u"},{"post_id":"ciqubkyrd0021ycjcty0vh2b4","category_id":"ciqubkyp40002ycjciy0hfdlp","_id":"ciqubkyrk002eycjchtwvs0x8"},{"post_id":"ciqubkyqt001dycjcnqpheqan","category_id":"ciqubkyre0024ycjcnpe25s0h","_id":"ciqubkyrl002gycjcshgg1ugg"},{"post_id":"ciqubkyr0001qycjcp8awh5qd","category_id":"ciqubkyre0024ycjcnpe25s0h","_id":"ciqubkyrm002iycjcorgn1qxn"},{"post_id":"ciqubkyrn002kycjcunu9znwv","category_id":"ciqubkyqz001nycjc347be9qa","_id":"ciqubkyrq002mycjcbpr42v7u"}],"PostTag":[{"post_id":"ciqubkyov0000ycjc0u2uewo5","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyp50003ycjcxfznxxt8"},{"post_id":"ciqubkyp80005ycjc0vqfp56a","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkypc0007ycjchu2eh2mu"},{"post_id":"ciqubkypa0006ycjcmw0mzt58","tag_id":"ciqubkypd0009ycjc9kroumet","_id":"ciqubkype000bycjcuiy33d7z"},{"post_id":"ciqubkypm000dycjc0y5jdi83","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkypv000hycjcgqq3mtvn"},{"post_id":"ciqubkypw000iycjcc9n4032m","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyq2000nycjc159axidk"},{"post_id":"ciqubkyq1000mycjcsvf3w1o8","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyq4000pycjclvabi5ky"},{"post_id":"ciqubkypq000fycjcdbobskve","tag_id":"ciqubkypz000jycjcrtlhx150","_id":"ciqubkyq6000sycjccy7j8iz8"},{"post_id":"ciqubkyq4000rycjcxu0xhgiy","tag_id":"ciqubkyq8000vycjcxvujddpi","_id":"ciqubkyqj0013ycjc4ux8ttl0"},{"post_id":"ciqubkyqg0011ycjcgylr5g29","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyqn0015ycjcql5p0zgu"},{"post_id":"ciqubkyq6000uycjcq943qg07","tag_id":"ciqubkyqf0010ycjc7eq5tacn","_id":"ciqubkyqr001bycjcjxogi1dv"},{"post_id":"ciqubkyqs001cycjc082mfghm","tag_id":"ciqubkypz000jycjcrtlhx150","_id":"ciqubkyqv001hycjcb9xs5mpq"},{"post_id":"ciqubkyqa000yycjcbz9alw3g","tag_id":"ciqubkyqp0018ycjcdjykij3b","_id":"ciqubkyqw001kycjcjm53r40y"},{"post_id":"ciqubkyqv001iycjcjqhsaea0","tag_id":"ciqubkyqu001gycjc4by88o6z","_id":"ciqubkyqz001oycjc7cxu9id7"},{"post_id":"ciqubkyqd000zycjcsu5nmsuf","tag_id":"ciqubkyqu001gycjc4by88o6z","_id":"ciqubkyr3001rycjc7b4a4l82"},{"post_id":"ciqubkyqw001lycjcdypfnphp","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyr8001uycjclythrgzr"},{"post_id":"ciqubkyql0014ycjcn62exp3k","tag_id":"ciqubkyqz001pycjc8tp7za4o","_id":"ciqubkyrc001zycjcxb9hqb2h"},{"post_id":"ciqubkyrb001yycjcwjxgb94u","tag_id":"ciqubkyp20001ycjcrhyeq1n2","_id":"ciqubkyre0022ycjcu5sq827b"},{"post_id":"ciqubkyrd0021ycjcty0vh2b4","tag_id":"ciqubkypz000jycjcrtlhx150","_id":"ciqubkyri0026ycjc7a1xclqt"},{"post_id":"ciqubkyqo0017ycjcd1k4eot3","tag_id":"ciqubkyrb001xycjc62hj899g","_id":"ciqubkyrj0028ycjcvn7hy8t9"},{"post_id":"ciqubkyqt001dycjcnqpheqan","tag_id":"ciqubkyrg0025ycjc0fglbx4n","_id":"ciqubkyrk002dycjcpimh2wck"},{"post_id":"ciqubkyr0001qycjcp8awh5qd","tag_id":"ciqubkyrg0025ycjc0fglbx4n","_id":"ciqubkyrm002hycjcfjm7a4sn"},{"post_id":"ciqubkyr4001tycjcgwp4bj2k","tag_id":"ciqubkyrb001xycjc62hj899g","_id":"ciqubkyrm002jycjcnrzqsrbv"},{"post_id":"ciqubkyrn002kycjcunu9znwv","tag_id":"ciqubkyqz001pycjc8tp7za4o","_id":"ciqubkyrp002lycjcbuw90ro3"}],"Tag":[{"name":"Javascript","_id":"ciqubkyp20001ycjcrhyeq1n2"},{"name":"Eslint","_id":"ciqubkypd0009ycjc9kroumet"},{"name":"Jquery","_id":"ciqubkypz000jycjcrtlhx150"},{"name":"Markdown","_id":"ciqubkyq8000vycjcxvujddpi"},{"name":"Redux","_id":"ciqubkyqf0010ycjc7eq5tacn"},{"name":"React-Native","_id":"ciqubkyqp0018ycjcdjykij3b"},{"name":"React","_id":"ciqubkyqu001gycjc4by88o6z"},{"name":"Vue","_id":"ciqubkyqz001pycjc8tp7za4o"},{"name":"CSS","_id":"ciqubkyrb001xycjc62hj899g"},{"name":"Nodejs","_id":"ciqubkyrg0025ycjc0fglbx4n"}]}}